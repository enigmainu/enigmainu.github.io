<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Enigma&#39;s Blog</title>
  <subtitle>Sometimes it is the people who no one imagines anything of who do the things that no one can inmagine.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-04-19T01:41:57.440Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Enigma</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>4月末计划</title>
    <link href="http://yoursite.com/2017/04/18/April_plan/"/>
    <id>http://yoursite.com/2017/04/18/April_plan/</id>
    <published>2017-04-17T16:00:00.000Z</published>
    <updated>2017-04-19T01:41:57.440Z</updated>
    
    <content type="html"><![CDATA[<p>省选后颓的不得了。。不能颓下去了，要给自己立一点事情来做了。</p>
<h3 id="计划内容"><a href="#计划内容" class="headerlink" title="计划内容"></a>计划内容</h3><blockquote>
<p><input type="checkbox" onclick="return false;" unchecked=""> Codeforces 上紫<br><input type="checkbox" onclick="return false;" unchecked=""> Codeforces Goodbye 2015 开始向后刷 70道 Div2 E (进度: 13/70)<br><input type="checkbox" onclick="return false;" unchecked=""> 把LCT的技能坑填了</p>
</blockquote>
<h3 id="Deadline"><a href="#Deadline" class="headerlink" title="Deadline"></a>Deadline</h3><blockquote>
<p>2017-5-5 (去北京前)</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;省选后颓的不得了。。不能颓下去了，要给自己立一点事情来做了。&lt;/p&gt;
&lt;h3 id=&quot;计划内容&quot;&gt;&lt;a href=&quot;#计划内容&quot; class=&quot;headerlink&quot; title=&quot;计划内容&quot;&gt;&lt;/a&gt;计划内容&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;input type
    
    </summary>
    
      <category term="OI相关" scheme="http://yoursite.com/categories/OI%E7%9B%B8%E5%85%B3/"/>
    
    
  </entry>
  
  <entry>
    <title>「Codeforces697E」PLEASE</title>
    <link href="http://yoursite.com/2017/04/14/CF697E/"/>
    <id>http://yoursite.com/2017/04/14/CF697E/</id>
    <published>2017-04-13T16:00:00.000Z</published>
    <updated>2017-04-17T07:41:53.668Z</updated>
    
    <content type="html"><![CDATA[<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><blockquote>
<p><a href="http://codeforces.com/contest/697/problem/E" target="_blank" rel="external">题目传送门</a></p>
</blockquote>
<h3 id="解题报告"><a href="#解题报告" class="headerlink" title="解题报告"></a>解题报告</h3><blockquote>
<p>题解：首先我们可以轻易得到一个递推式：$d[i] = \frac {1 - d[i - 1]} {2}$<br>运用数列技巧，我们可以进行如下变换：$d[i] - \frac{1}{3} =  - \frac{1}{2}(d[i - 1] - \frac{1}{3})$<br>那么我们有 $d[n] = \frac {(-1)^n + 2^{n - 1}} {3 \times 2^{n - 1}}$<br>其中我们发现，$(-1)^n + 2^{n - 1}$ 一定是3的倍数，且商一定是奇数，所以与剩下部分互质<br>也即 $p = \frac {(-1)^n + 2^{n - 1}} {3}$ , $q = 2^{n - 1}$<br>带进去算就好了。</p>
</blockquote>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 1000000007</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">read</span><span class="params">()</span> </span>&#123;</div><div class="line">    LL x = <span class="number">0</span>, f = <span class="number">1</span>; <span class="keyword">char</span> a = getchar();</div><div class="line">    <span class="keyword">while</span>(a &lt; <span class="string">'0'</span> || a &gt; <span class="string">'9'</span>) &#123; <span class="keyword">if</span>(a == <span class="string">'-'</span>) f = <span class="number">-1</span>; a = getchar(); &#125;</div><div class="line">    <span class="keyword">while</span>(a &gt;= <span class="string">'0'</span> &amp;&amp; a &lt;= <span class="string">'9'</span>) x = x * <span class="number">10</span> + a - <span class="string">'0'</span>, a = getchar();</div><div class="line">    <span class="keyword">return</span> x * f;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, p = <span class="number">2</span>, q, f = <span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">fpow</span><span class="params">(<span class="keyword">int</span> x, LL k)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> ret = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(k) &#123;</div><div class="line">        <span class="keyword">if</span>(k &amp; <span class="number">1</span>) ret = <span class="number">1L</span>L * ret * x % mod;</div><div class="line">        k /= <span class="number">2</span>; x = <span class="number">1L</span>L * x * x % mod;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    n = read();</div><div class="line">    LL tmp; <span class="keyword">int</span> inv2 = fpow(<span class="number">2</span>, mod <span class="number">-2</span>), inv3 = fpow(<span class="number">3</span>, mod - <span class="number">2</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">        tmp = read();</div><div class="line">        f = <span class="number">1L</span>L * f * tmp % <span class="number">2</span>;</div><div class="line">        p = fpow(p, tmp);</div><div class="line">    &#125;</div><div class="line">    q = <span class="number">1L</span>L * p * inv2  % mod;    </div><div class="line">    p = <span class="number">1L</span>L * (q + (f ? <span class="number">-1</span> : <span class="number">1</span>)) * inv3 % mod;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d/%d\n"</span> ,p ,q);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;相关链接&quot;&gt;&lt;a href=&quot;#相关链接&quot; class=&quot;headerlink&quot; title=&quot;相关链接&quot;&gt;&lt;/a&gt;相关链接&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://codeforces.com/contest/697/proble
    
    </summary>
    
      <category term="题目精选" scheme="http://yoursite.com/categories/%E9%A2%98%E7%9B%AE%E7%B2%BE%E9%80%89/"/>
    
    
      <category term="数学" scheme="http://yoursite.com/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>「Codeforces703D」Mishka and Interesting sum</title>
    <link href="http://yoursite.com/2017/04/13/CF703D/"/>
    <id>http://yoursite.com/2017/04/13/CF703D/</id>
    <published>2017-04-12T16:00:00.000Z</published>
    <updated>2017-04-16T04:58:31.326Z</updated>
    
    <content type="html"><![CDATA[<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><blockquote>
<p><a href="http://codeforces.com/contest/703/problem/D" target="_blank" rel="external">题目传送门</a></p>
</blockquote>
<h3 id="解题报告"><a href="#解题报告" class="headerlink" title="解题报告"></a>解题报告</h3><blockquote>
<p>首先很显然，每一次询问的答案，等于这个区间所有不同元素异或和异或上区间异或和。（因为出现偶数次的对区间异或和贡献为0，此时剩下的是出现奇数次的数，在取个补集即为答案）<br>区间异或和前缀和就好了，那问题转化为求区间不同元素异或和。由于这个东西区间合并很困难，所以在线算法是比较不优雅的。那我们考虑离线算法。我们按询问的右端点为第一关键字排序，然后处理到目前这个右端点位置的last数组，last数组定义为每个数最后出现的位置，然后给每个值对应的last附上它的值，这样我们一个区间求异或和可以得到区间不同元素异或和。树状数组一发就好了。</p>
</blockquote>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 1000000</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) ((x) &amp; -(x))</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">read</span><span class="params">()</span> </span>&#123;</div><div class="line">    LL x = <span class="number">0</span>, f = <span class="number">1</span>; <span class="keyword">char</span> a = getchar();</div><div class="line">    <span class="keyword">while</span>(a &lt; <span class="string">'0'</span> || a &gt; <span class="string">'9'</span>) &#123; <span class="keyword">if</span>(a == <span class="string">'-'</span>) f = <span class="number">-1</span>; a = getchar(); &#125;</div><div class="line">    <span class="keyword">while</span>(a &gt;= <span class="string">'0'</span> &amp;&amp; a &lt;= <span class="string">'9'</span>) x = x * <span class="number">10</span> + a - <span class="string">'0'</span>, a = getchar();</div><div class="line">    <span class="keyword">return</span> x * f;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, a[N + <span class="number">5</span>], ans[N + <span class="number">5</span>], sum[N + <span class="number">5</span>], Q;</div><div class="line"><span class="keyword">int</span> fen[N + <span class="number">5</span>];</div><div class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; last;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> query &#123;</div><div class="line">    <span class="keyword">int</span> id, l, r;</div><div class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> query &amp; w) <span class="keyword">const</span> &#123;</div><div class="line">        <span class="keyword">return</span> r &lt; w.r;</div><div class="line">    &#125;</div><div class="line">&#125; q[N + <span class="number">5</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> val)</span> </span>&#123; <span class="keyword">if</span>(!pos) <span class="keyword">return</span>; <span class="keyword">for</span>(<span class="keyword">int</span> i = pos; i &lt;= n; i += lowbit(i)) fen[i] ^= val; &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">querysum</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = r; i; i -= lowbit(i)) ret ^= fen[i];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = l - <span class="number">1</span>; i; i -= lowbit(i)) ret ^= fen[i];</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    n = read();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) a[i] = read();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) sum[i] = sum[i - <span class="number">1</span>] ^ a[i];</div><div class="line">    Q = read();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= Q; i++) q[i].id = i, q[i].l = read(), q[i].r = read();</div><div class="line">    sort(q + <span class="number">1</span>, q + <span class="number">1</span> + Q);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> pos = <span class="number">1</span>, i = <span class="number">1</span>; i &lt;= Q; i++) &#123;</div><div class="line">        <span class="keyword">for</span>(; pos &lt;= q[i].r; pos++) &#123;</div><div class="line">            add(last[a[pos]], a[pos]);</div><div class="line">            last[a[pos]] = pos;</div><div class="line">            add(pos, a[pos]);</div><div class="line">        &#125;</div><div class="line">        ans[q[i].id] = querysum(q[i].l, q[i].r) ^ sum[q[i].l<span class="number">-1</span>] ^ sum[q[i].r];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= Q; i++) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans[i]);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;相关链接&quot;&gt;&lt;a href=&quot;#相关链接&quot; class=&quot;headerlink&quot; title=&quot;相关链接&quot;&gt;&lt;/a&gt;相关链接&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://codeforces.com/contest/703/proble
    
    </summary>
    
      <category term="题目精选" scheme="http://yoursite.com/categories/%E9%A2%98%E7%9B%AE%E7%B2%BE%E9%80%89/"/>
    
    
      <category term="树状数组" scheme="http://yoursite.com/tags/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>「Codeforces697D」Puzzle</title>
    <link href="http://yoursite.com/2017/04/12/CF697D/"/>
    <id>http://yoursite.com/2017/04/12/CF697D/</id>
    <published>2017-04-11T16:00:00.000Z</published>
    <updated>2017-04-16T04:55:42.528Z</updated>
    
    <content type="html"><![CDATA[<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><blockquote>
<p><a href="http://codeforces.com/contest/697/problem/D" target="_blank" rel="external">题目传送门</a></p>
</blockquote>
<h3 id="解题报告"><a href="#解题报告" class="headerlink" title="解题报告"></a>解题报告</h3><blockquote>
<p>考虑一个节点，其他兄弟节点对它有贡献当且仅当其他节点在它之前被遍历，概率是1/2的。<br>所以ans[x] = ans[fa] + 1 + sz[brother]  / 2;</p>
</blockquote>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100000</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">read</span><span class="params">()</span> </span>&#123;</div><div class="line">    LL x = <span class="number">0</span>, f = <span class="number">1</span>; <span class="keyword">char</span> a = getchar();</div><div class="line">    <span class="keyword">while</span>(a &lt; <span class="string">'0'</span> || a &gt; <span class="string">'9'</span>) &#123; <span class="keyword">if</span>(a == <span class="string">'-'</span>) f = <span class="number">-1</span>; a = getchar(); &#125;</div><div class="line">    <span class="keyword">while</span>(a &gt;= <span class="string">'0'</span> &amp;&amp; a &lt;= <span class="string">'9'</span>) x = x *<span class="number">10</span> + a - <span class="string">'0'</span>, a = getchar();</div><div class="line">    <span class="keyword">return</span> x * f;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, head[N + <span class="number">5</span>], sz[N + <span class="number">5</span>], cnt = <span class="number">1</span>;</div><div class="line"><span class="keyword">double</span> ans[N + <span class="number">5</span>];</div><div class="line"></div><div class="line"><span class="keyword">struct</span> edges&#123;</div><div class="line">    <span class="keyword">int</span> to, next;</div><div class="line">&#125;e[<span class="number">2</span> * N + <span class="number">5</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> u = x, v = read();</div><div class="line">    e[++cnt] = (edges) &#123;u, head[v]&#125;; head[v] = cnt;</div><div class="line">    e[++cnt] = (edges) &#123;v, head[u]&#125;; head[u] = cnt;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa)</span></span>&#123;</div><div class="line">    sz[x] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = head[x]; i; i = e[i].next) &#123;</div><div class="line">        <span class="keyword">if</span>(e[i].to == fa) <span class="keyword">continue</span>;</div><div class="line">        dfs(e[i].to, x)    ;</div><div class="line">        sz[x] += sz[e[i].to];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = head[x]; i; i = e[i].next) &#123;</div><div class="line">        <span class="keyword">if</span>(e[i].to == fa) <span class="keyword">continue</span>;        </div><div class="line">        ans[e[i].to] = <span class="number">1.0</span> * (sz[x] - <span class="number">1</span> - sz[e[i].to]) / <span class="number">2.0</span> + <span class="number">1.0</span> + ans[x];</div><div class="line">        Dfs(e[i].to, x);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    n = read();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) insert(i);</div><div class="line">    dfs(<span class="number">1</span>, <span class="number">0</span>);</div><div class="line">    ans[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    Dfs(<span class="number">1</span>, <span class="number">0</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">printf</span>(<span class="string">"%.7lf\n"</span>,ans[i]);</div><div class="line">    <span class="keyword">return</span>  <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;相关链接&quot;&gt;&lt;a href=&quot;#相关链接&quot; class=&quot;headerlink&quot; title=&quot;相关链接&quot;&gt;&lt;/a&gt;相关链接&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://codeforces.com/contest/697/proble
    
    </summary>
    
      <category term="题目精选" scheme="http://yoursite.com/categories/%E9%A2%98%E7%9B%AE%E7%B2%BE%E9%80%89/"/>
    
    
      <category term="概率与期望" scheme="http://yoursite.com/tags/%E6%A6%82%E7%8E%87%E4%B8%8E%E6%9C%9F%E6%9C%9B/"/>
    
  </entry>
  
  <entry>
    <title>SCOI2017酱油记</title>
    <link href="http://yoursite.com/2017/04/07/scoi2017jyj/"/>
    <id>http://yoursite.com/2017/04/07/scoi2017jyj/</id>
    <published>2017-04-06T16:00:00.000Z</published>
    <updated>2017-04-16T04:48:50.671Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Day0"><a href="#Day0" class="headerlink" title="Day0"></a>Day0</h3><blockquote>
<p>虽然是8点30开始模拟赛，还是设了个7点的闹钟调节生物钟。结果硬生生睡到7点40。。。<br>打开题目：T1期望，直接弃掉（到现在都不会期望已经可以滚粗了。。）<br>T2一眼可做，恩，先写个暴力。然后写完，发现这狗东西不能调试（wuvin说可以编译选项里加-g，好吧学到了），然后输出调试，简直哔了狗了。。调了半天，恩，写正解线段树合并去了。。<br>T3看了一会，1e6怎么都要带2个log，发现可以离线，那就1个log吧。。但怎么都不可能做到线性啊！绝壁出题人的锅。。<br>时间不够了，不写了。。直接回酒店收拾东西准备撤退。。<br>本来说和曾老住一个酒店的，文老强制要求母上大人要全程陪同（文老：亲子互动的好时机啊！）于是在酒店大堂愉悦的水了一下午知乎等母上大人从都江堰过来。<br>和母上大人吃了晚饭后在神大兜了一圈，感觉心情变好了些，回来又遇到学妹（弟）加油，瞬间感觉BUFF（奶）上满，看看Modern family写一道题就准备着睡了吧。</p>
</blockquote>
<h3 id="Day1"><a href="#Day1" class="headerlink" title="Day1"></a>Day1</h3><blockquote>
<p>6点50起床吃早饭，来到神大，骑个小黄车呼哧呼哧到实验大楼，已经7点30。有点气紧，有点紧张，和noip一样。<br>走进考场，试了下机子，发现还是调试不起。。场外小哥来调了半天，最后告诉我只有开项目。。这哔狗的操作。。<br>T1看到有点慌，因为题意有点差错。然后看T2，好尼玛长啊。。不想写系列。。再看T3。。恩，我会写暴力。。<br>T1读懂之后就好说了，一个简单贪心，拿个堆搞搞就好了。T2太长真不想看，啃完题意写了个暴力不管了。T3研究了一会没啥思路，那写个暴力就行了吧。结果最后发现暴力很卡，随机数据都特么卡出屎，我卡了半天最后才卡到3.2秒，内心是极度悲伤的。。感觉只有130了。<br>到星巴克和wuvin和ZYQN大佬吃了点东西（考场上巧克力吃饱了），然而内心并不好受。这就是个中规中矩的分，真不算有竞争力。本来想回酒店睡一会，想想还是回神大等成绩吧。（毕竟这种像等高考一样的经历是少有的）回到神大自己绕着湖边一直走，内心挺煎熬的。这个时候有学妹安慰我，瞬间感觉人间真的温暖。感谢那些陪伴我在意我支持我的人。<br>回到实验楼，16点40左右出了成绩（贼TM慢）。一看，瞬间吃惊。<br>wuvin大佬很稳的220，算上noip就rank4了。<br>ihopenot大佬逆风翻盘系列，230强势扭转noip劣势<br>ZYQN大佬有点悲伤，有点炸。点个蜡烛。。<br>我中规中矩，不过T3很良心的没卡我暴力，最后烂大街的150。<br>感觉稍微歇了口气。不过仍然是任重道远。算了noip分之后我rank17，还是悬，只有靠后面翻盘了。<br>回来睡了一会，和母上大人出去吃饭了，打算回来写写题就睡了，希望明天好运吧。</p>
</blockquote>
<h3 id="Day2"><a href="#Day2" class="headerlink" title="Day2"></a>Day2</h3><blockquote>
<p>晚上没睡好。。还是7点30到实验大楼下。。<br>领取装备巧克力X2,矿泉水X1，准备上机（这是怪物猎人吗）<br>T1期望。。。完了完了死穴被考了（后来发现是普及组难度内心是狂喜的。。。）<br>T2 RMQ+并查集。。。然而考场上抽掉了，最后玄学的挂0（自己弱啊）<br>T3 自己瞎YY了个广义回文树。。然而完全是瞎整系列。。。最后好像全场都没什么人写。。<br>最后D2 100分滚粗，翻盘无望。。。</p>
</blockquote>
<h3 id="Final"><a href="#Final" class="headerlink" title="Final"></a>Final</h3><blockquote>
<p>在这里恭喜rank4的wuvin大爷，以及惊险卡线但是仍然实现翻盘，经历可以写成跌宕起伏一波三折小说的ihopenot大佬。<br>给ZYQN大爷点个蜡烛。。虽然D2 160正常发挥但是D1比较可惜。。<br>以及致垃圾的不行的自己，就你这智商连文化课都不要读，滚去种田吧。<br>滚粗啦滚粗啦！SCOI2017滚粗啦！</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Day0&quot;&gt;&lt;a href=&quot;#Day0&quot; class=&quot;headerlink&quot; title=&quot;Day0&quot;&gt;&lt;/a&gt;Day0&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;虽然是8点30开始模拟赛，还是设了个7点的闹钟调节生物钟。结果硬生生睡到7点40。。。&lt;br&gt;打开
    
    </summary>
    
      <category term="OI相关" scheme="http://yoursite.com/categories/OI%E7%9B%B8%E5%85%B3/"/>
    
    
  </entry>
  
  <entry>
    <title>「BZOJ4730」「清华集训2016」「UOJ266」 Alice和Bob又在玩游戏</title>
    <link href="http://yoursite.com/2017/03/22/bzoj4730/"/>
    <id>http://yoursite.com/2017/03/22/bzoj4730/</id>
    <published>2017-03-21T16:00:00.000Z</published>
    <updated>2017-04-16T04:44:37.560Z</updated>
    
    <content type="html"><![CDATA[<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><blockquote>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=4730" target="_blank" rel="external">题目传送门</a></p>
</blockquote>
<h3 id="解题报告"><a href="#解题报告" class="headerlink" title="解题报告"></a>解题报告</h3><blockquote>
<p>比较神的一道题。<br>我们现在要解决的问题是怎么求解一棵子树的SG值，首先把根删掉的情况考虑，这很好办，直接把子树的sg异或起来就好，关键是如果删除点在子树里怎么办。<br>这里用到了一个巧妙的东西，trie。怎么会用这个呢？因为删除子树里的节点就相当于是子树里这种对应的情况再异或上外边子树的sg。但是我们不可能用一般的方法来存一棵子树里所有的sg。这个时候trie应运而生。我们处理子树之后，把它合并上来，就能得到当前节点的所有拓展局面的sg了。这里注意，合并子树前要先在子树上打一个tag（因为它是要异或上外面所有子树sg的）。<br>算法很清晰了，dfs下去，合并上来。这里的trie还要打tag。所有细节就这么多。</p>
</blockquote>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100005</span></div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">       LL x=<span class="number">0</span>,f=<span class="number">1</span>; <span class="keyword">char</span> a=getchar();</div><div class="line">       <span class="keyword">while</span>(a&lt;<span class="string">'0'</span> || a&gt;<span class="string">'9'</span>) &#123;<span class="keyword">if</span>(a==<span class="string">'-'</span>) f=<span class="number">-1</span>; a=getchar();&#125;</div><div class="line">       <span class="keyword">while</span>(a&gt;=<span class="string">'0'</span> &amp;&amp; a&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+a-<span class="string">'0'</span>,a=getchar();</div><div class="line">       <span class="keyword">return</span> x*f;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">int</span> n,m,T,bin[<span class="number">25</span>],head[N],cnt,id,tag[N*<span class="number">20</span>],rt[N],ls[N*<span class="number">20</span>],rs[N*<span class="number">20</span>],sg[N],sz[N*<span class="number">20</span>];</div><div class="line"><span class="keyword">bool</span> vis[N];</div><div class="line"> </div><div class="line"><span class="keyword">struct</span> edges&#123;</div><div class="line">    <span class="keyword">int</span> to,next;</div><div class="line">&#125;e[<span class="number">2</span>*N];</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> u=read(),v=read();</div><div class="line">    e[++cnt]=(edges)&#123;v,head[u]&#125;;head[u]=cnt;</div><div class="line">    e[++cnt]=(edges)&#123;u,head[v]&#125;;head[v]=cnt;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    bin[<span class="number">0</span>]=<span class="number">1</span>; <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">19</span>;i++) bin[i]=bin[i<span class="number">-1</span>]&lt;&lt;<span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> level)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(!tag[k]) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">if</span>(bin[level<span class="number">-1</span>]&amp;tag[k]) swap(ls[k],rs[k]);</div><div class="line">    tag[ls[k]]^=tag[k]; tag[rs[k]]^=tag[k];</div><div class="line">    tag[k]=<span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">reset</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) head[i]=sg[i]=rt[i]=<span class="number">0</span>,vis[i]=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=id;i++) tag[i]=ls[i]=rs[i]=sz[i]=<span class="number">0</span>;</div><div class="line">    cnt=<span class="number">1</span>; id=<span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span>&amp; k,<span class="keyword">int</span> x,<span class="keyword">int</span> level)</span></span>&#123; <span class="comment">// 0 is on the left</span></div><div class="line">    k=++id; sz[k]=<span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span>(!level) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">if</span>(x&amp;bin[level<span class="number">-1</span>]) ins(rs[k],x,level<span class="number">-1</span>);</div><div class="line">    <span class="keyword">else</span> ins(ls[k],x,level<span class="number">-1</span>);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> level)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(!x || !y) <span class="keyword">return</span> x|y;</div><div class="line">    pushdown(x,level); pushdown(y,level);</div><div class="line">    ls[x]=merge(ls[x],ls[y],level<span class="number">-1</span>); rs[x]=merge(rs[x],rs[y],level<span class="number">-1</span>);</div><div class="line">    sz[x]=sz[ls[x]]+sz[rs[x]]+(level?<span class="number">0</span>:<span class="number">1</span>);</div><div class="line">    <span class="keyword">return</span> x;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> fa)</span></span>&#123;</div><div class="line">    vis[x]=<span class="number">1</span>; <span class="keyword">int</span> t=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=e[i].next)&#123;</div><div class="line">        <span class="keyword">if</span>(fa==e[i].to) <span class="keyword">continue</span>;</div><div class="line">        dfs(e[i].to,x); t^=sg[e[i].to];</div><div class="line">    &#125;</div><div class="line">    ins(rt[x],t,<span class="number">19</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=e[i].next)&#123;</div><div class="line">        <span class="keyword">if</span>(fa==e[i].to) <span class="keyword">continue</span>;</div><div class="line">        tag[rt[e[i].to]]^=t^sg[e[i].to];</div><div class="line">        rt[x]=merge(rt[x],rt[e[i].to],<span class="number">19</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> now=rt[x],i=<span class="number">19</span>;i;i--)&#123; <span class="comment">// i is the i th digit int binary system</span></div><div class="line">        pushdown(now,i);</div><div class="line">        <span class="keyword">if</span>(sz[ls[now]]&lt;bin[i<span class="number">-1</span>]) now=ls[now];</div><div class="line">        <span class="keyword">else</span> sg[x]|=bin[i<span class="number">-1</span>],now=rs[now];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</div><div class="line">    n=read(); m=read(); <span class="keyword">int</span> ans=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) insert();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="keyword">if</span>(!vis[i]) dfs(i,<span class="number">0</span>),ans^=sg[i];</div><div class="line">    <span class="built_in">puts</span>(ans?<span class="string">"Alice"</span>:<span class="string">"Bob"</span>);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    init(); T=read();</div><div class="line">    <span class="keyword">while</span>(T--)&#123;</div><div class="line">        solve();</div><div class="line">        reset();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;相关链接&quot;&gt;&lt;a href=&quot;#相关链接&quot; class=&quot;headerlink&quot; title=&quot;相关链接&quot;&gt;&lt;/a&gt;相关链接&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.lydsy.com/JudgeOnline/problem
    
    </summary>
    
      <category term="题目精选" scheme="http://yoursite.com/categories/%E9%A2%98%E7%9B%AE%E7%B2%BE%E9%80%89/"/>
    
    
      <category term="博弈论" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%BC%88%E8%AE%BA/"/>
    
      <category term="可持久化Trie" scheme="http://yoursite.com/tags/%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96Trie/"/>
    
  </entry>
  
  <entry>
    <title>「BZOJ4520」「CQOI2016」K远点对</title>
    <link href="http://yoursite.com/2017/03/21/bzoj4520/"/>
    <id>http://yoursite.com/2017/03/21/bzoj4520/</id>
    <published>2017-03-20T16:00:00.000Z</published>
    <updated>2017-04-16T04:38:14.785Z</updated>
    
    <content type="html"><![CDATA[<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><blockquote>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=4520" target="_blank" rel="external">题目传送门</a></p>
</blockquote>
<h3 id="解题报告"><a href="#解题报告" class="headerlink" title="解题报告"></a>解题报告</h3><blockquote>
<p>做法很多，可以旋转卡壳，也可以三分，还能KD_Tree。这里写的是KD_Tree。<br>用一个一开始装了2*K个0的优先队列记录答案，对于每一个点丢进去查，多的弹出来，再加进去。<br>巨TM有毒，调了2h，原因是对于每一个平面的划分点，我是在nth_element之前就选定了。但这样是不行的，排了之后它就跑掉了。。所以要么排了之后再选要么找划分点的时候直接根据l,r求出mid。</p>
</blockquote>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> sqr(x) ((x)*(x))</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF ((LL)1&lt;&lt;62)</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">       LL x=<span class="number">0</span>,f=<span class="number">1</span>; <span class="keyword">char</span> a=getchar();</div><div class="line">       <span class="keyword">while</span>(a&lt;<span class="string">'0'</span> || a&gt;<span class="string">'9'</span>) &#123;<span class="keyword">if</span>(a==<span class="string">'-'</span>) f=<span class="number">-1</span>; a=getchar();&#125;</div><div class="line">       <span class="keyword">while</span>(a&gt;=<span class="string">'0'</span> &amp;&amp; a&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+a-<span class="string">'0'</span>,a=getchar();</div><div class="line">       <span class="keyword">return</span> x*f;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n,K;</div><div class="line">priority_queue&lt;LL&gt;q;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> point&#123;</div><div class="line">    LL x,y;</div><div class="line">&#125;p[N],v;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmpx</span><span class="params">(<span class="keyword">const</span> point&amp; a,<span class="keyword">const</span> point&amp; b)</span></span>&#123;<span class="keyword">return</span> a.x&lt;b.x;&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmpy</span><span class="params">(<span class="keyword">const</span> point&amp; a,<span class="keyword">const</span> point&amp; b)</span></span>&#123;<span class="keyword">return</span> a.y&lt;b.y;&#125;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> KDT&#123;</div><div class="line">    <span class="keyword">int</span> root,cnt;</div><div class="line">    </div><div class="line">    <span class="keyword">struct</span> kd&#123;</div><div class="line">        <span class="keyword">int</span> l,r,son[<span class="number">2</span>],kind;</div><div class="line">        LL xl,xr,yt,yb;</div><div class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">            xl=yb=INF; xr=yt=<span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;a[<span class="number">2</span>*N];</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">inline</span> LL <span class="title">dis</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">        point mid=p[(a[x].l+a[x].r)&gt;&gt;<span class="number">1</span>];</div><div class="line">        <span class="keyword">return</span> sqr(mid.x-v.x)+sqr(mid.y-v.y);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">inline</span> LL <span class="title">get</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(!k) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        LL t1=max(sqr(a[k].xl-v.x),sqr(a[k].xr-v.x));</div><div class="line">        LL t2=max(sqr(a[k].yb-v.y),sqr(a[k].yt-v.y));</div><div class="line">        <span class="keyword">return</span> t1+t2;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span>&amp; k,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(l&gt;r) <span class="keyword">return</span>;</div><div class="line">        k=++cnt;    </div><div class="line">        a[k].l=l; a[k].r=r; a[k].init();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;=r;i++)&#123;</div><div class="line">            a[k].xl=min(a[k].xl,p[i].x);</div><div class="line">            a[k].xr=max(a[k].xr,p[i].x);</div><div class="line">            a[k].yb=min(a[k].yb,p[i].y);</div><div class="line">            a[k].yt=max(a[k].yt,p[i].y);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>,F;</div><div class="line">        <span class="keyword">if</span>(l==r) <span class="keyword">return</span>;</div><div class="line">        a[k].kind=F=a[k].xr-a[k].xl&gt;a[k].yt-a[k].yb?<span class="number">0</span>:<span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span>(!F) nth_element(p+l,p+mid,p+r+<span class="number">1</span>,cmpx);</div><div class="line">        <span class="keyword">else</span> nth_element(p+l,p+mid,p+r+<span class="number">1</span>,cmpy);</div><div class="line">        build(a[k].son[<span class="number">0</span>],l,mid<span class="number">-1</span>); build(a[k].son[<span class="number">1</span>],mid+<span class="number">1</span>,r);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</div><div class="line">        LL d=dis(k),d1=get(a[k].son[<span class="number">0</span>]),d2=get(a[k].son[<span class="number">1</span>]);</div><div class="line">        <span class="keyword">if</span>(-d&lt;q.top()) q.pop(),q.push(-d);</div><div class="line">        <span class="keyword">if</span>(d1&gt;d2)&#123;</div><div class="line">            <span class="keyword">if</span>(-d1&lt;q.top()) query(a[k].son[<span class="number">0</span>]);</div><div class="line">            <span class="keyword">if</span>(-d2&lt;q.top()) query(a[k].son[<span class="number">1</span>]);</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">if</span>(-d2&lt;q.top()) query(a[k].son[<span class="number">1</span>]);</div><div class="line">            <span class="keyword">if</span>(-d1&lt;q.top()) query(a[k].son[<span class="number">0</span>]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    n=read(); K=read();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">2</span>*K;i++) q.push(<span class="number">0</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) p[i].x=read(),p[i].y=read();</div><div class="line">    KDT::build(KDT::root,<span class="number">1</span>,n);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) v=p[i],KDT::query(KDT::root);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,-q.top());</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;相关链接&quot;&gt;&lt;a href=&quot;#相关链接&quot; class=&quot;headerlink&quot; title=&quot;相关链接&quot;&gt;&lt;/a&gt;相关链接&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.lydsy.com/JudgeOnline/problem
    
    </summary>
    
      <category term="题目精选" scheme="http://yoursite.com/categories/%E9%A2%98%E7%9B%AE%E7%B2%BE%E9%80%89/"/>
    
    
      <category term="KD_Tree" scheme="http://yoursite.com/tags/KD-Tree/"/>
    
  </entry>
  
  <entry>
    <title>「BZOJ4311」向量</title>
    <link href="http://yoursite.com/2017/03/21/bzoj4311/"/>
    <id>http://yoursite.com/2017/03/21/bzoj4311/</id>
    <published>2017-03-20T16:00:00.000Z</published>
    <updated>2017-04-16T04:41:08.569Z</updated>
    
    <content type="html"><![CDATA[<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><blockquote>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=4311" target="_blank" rel="external">题目传送门</a></p>
</blockquote>
<h3 id="解题报告"><a href="#解题报告" class="headerlink" title="解题报告"></a>解题报告</h3><blockquote>
<p>线段树时间分治，每个区间做一个凸包，查询的时候到对应区间的凸包上三分。<br>(话说我这个可能有点问题，三分那一块R-L&gt;=20我才过的。。)</p>
</blockquote>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 300005</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">       LL x=<span class="number">0</span>,f=<span class="number">1</span>; <span class="keyword">char</span> a=getchar();</div><div class="line">       <span class="keyword">while</span>(a&lt;<span class="string">'0'</span> || a&gt;<span class="string">'9'</span>) &#123;<span class="keyword">if</span>(a==<span class="string">'-'</span>) f=<span class="number">-1</span>; a=getchar();&#125;</div><div class="line">       <span class="keyword">while</span>(a&gt;=<span class="string">'0'</span> &amp;&amp; a&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+a-<span class="string">'0'</span>,a=getchar();</div><div class="line">       <span class="keyword">return</span> x*f;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n,cnt,st[N],ed[N],qnum,root,ti[N];</div><div class="line">LL ans;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> point&#123;</div><div class="line">    LL x,y;</div><div class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> point&amp; w)<span class="keyword">const</span>&#123;</div><div class="line">        <span class="keyword">if</span>(x==w.x) <span class="keyword">return</span> y&lt;w.y;</div><div class="line">        <span class="keyword">return</span> x&lt;w.x;</div><div class="line">    &#125;</div><div class="line">&#125;p[N],Q[N],tmp[N];</div><div class="line"></div><div class="line">point <span class="keyword">operator</span> - (<span class="keyword">const</span> point&amp; a,<span class="keyword">const</span> point&amp; b)&#123;<span class="keyword">return</span> (point)&#123;a.x-b.x,a.y-b.y&#125;;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">cross</span><span class="params">(point a,point b)</span></span>&#123;<span class="keyword">return</span> a.x*b.y-a.y*b.x;&#125;</div><div class="line"></div><div class="line">LL <span class="keyword">operator</span> * (<span class="keyword">const</span> point&amp; a,<span class="keyword">const</span> point&amp; b)&#123;</div><div class="line">    <span class="keyword">return</span> a.x*b.x+a.y*b.y;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> segment&#123;</div><div class="line">    <span class="keyword">int</span> l,r;</div><div class="line">    <span class="built_in">vector</span>&lt;point&gt;s;</div><div class="line">&#125;a[<span class="number">4</span>*N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</div><div class="line">    a[k].l=l; a[k].r=r;</div><div class="line">    <span class="keyword">if</span>(l==r) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</div><div class="line">    build(k&lt;&lt;<span class="number">1</span>,l,mid); build(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> l=a[k].l,r=a[k].r;</div><div class="line">    <span class="keyword">if</span>(l==L &amp;&amp; r==R) &#123;a[k].s.push_back(p[x]); <span class="keyword">return</span>;&#125;</div><div class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span>(R&lt;=mid) insert(k&lt;&lt;<span class="number">1</span>,L,R,x);</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(mid&lt;L) insert(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,L,R,x);</div><div class="line">    <span class="keyword">else</span> insert(k&lt;&lt;<span class="number">1</span>,L,mid,x),insert(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,R,x);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">convexhull</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(!a[k].l) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">int</span> len=a[k].s.size();</div><div class="line">    sort(a[k].s.begin(),a[k].s.end());</div><div class="line">    <span class="keyword">int</span> top=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</div><div class="line">        <span class="keyword">while</span>(top&gt;<span class="number">1</span> &amp;&amp; cross(a[k].s[i]-tmp[top<span class="number">-1</span>],tmp[top]-tmp[top<span class="number">-1</span>])&gt;=<span class="number">0</span>) top--;</div><div class="line">        tmp[++top]=a[k].s[i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> tt=top;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=len<span class="number">-2</span>;i&gt;=<span class="number">0</span>;i--)&#123;</div><div class="line">        <span class="keyword">while</span>(top&gt;tt &amp;&amp; cross(a[k].s[i]-tmp[top<span class="number">-1</span>],tmp[top]-tmp[top<span class="number">-1</span>])&gt;=<span class="number">0</span>) top--;</div><div class="line">        tmp[++top]=a[k].s[i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(len&gt;<span class="number">1</span>) top--;</div><div class="line">    a[k].s.clear();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=top;i++) a[k].s.push_back(tmp[i]);</div><div class="line">    convexhull(k&lt;&lt;<span class="number">1</span>); convexhull(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> pos,<span class="keyword">int</span> num)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> l=a[k].l,r=a[k].r;</div><div class="line">    <span class="keyword">int</span> L=<span class="number">0</span>,R=a[k].s.size()<span class="number">-1</span>;</div><div class="line">    <span class="keyword">while</span>(R-L&gt;=<span class="number">3</span>)&#123;</div><div class="line">        <span class="keyword">int</span> ll=L+(R-L)/<span class="number">3</span>,rr=R-(R-L)/<span class="number">3</span>;</div><div class="line">        <span class="keyword">if</span>(Q[num]*a[k].s[ll]&gt;Q[num]*a[k].s[rr]) R=rr;</div><div class="line">        <span class="keyword">else</span> L=ll;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=L;i&lt;=R;i++)</div><div class="line">    ans=max(ans,Q[num]*a[k].s[i]);</div><div class="line">    <span class="keyword">if</span>(l==r) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span>(pos&lt;=mid) query(k&lt;&lt;<span class="number">1</span>,pos,num);</div><div class="line">    <span class="keyword">else</span> query(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,pos,num);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    n=read();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</div><div class="line">        <span class="keyword">int</span> type=read();</div><div class="line">        <span class="keyword">if</span>(type==<span class="number">1</span>) p[++cnt].x=read(),p[cnt].y=read(),st[cnt]=i;        </div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(type==<span class="number">2</span>) ed[read()]=i;</div><div class="line">        <span class="keyword">else</span> Q[++qnum].x=read(),Q[qnum].y=read(),ti[qnum]=i;</div><div class="line">    &#125;</div><div class="line">    build(<span class="number">1</span>,<span class="number">1</span>,n);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++) <span class="keyword">if</span>(!ed[i]) ed[i]=n;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++) insert(<span class="number">1</span>,st[i],ed[i],i);</div><div class="line">    convexhull(<span class="number">1</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=qnum;i++) ans=<span class="number">0</span>,query(<span class="number">1</span>,ti[i],i),<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;相关链接&quot;&gt;&lt;a href=&quot;#相关链接&quot; class=&quot;headerlink&quot; title=&quot;相关链接&quot;&gt;&lt;/a&gt;相关链接&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.lydsy.com/JudgeOnline/problem
    
    </summary>
    
      <category term="题目精选" scheme="http://yoursite.com/categories/%E9%A2%98%E7%9B%AE%E7%B2%BE%E9%80%89/"/>
    
    
      <category term="线段树" scheme="http://yoursite.com/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="凸包" scheme="http://yoursite.com/tags/%E5%87%B8%E5%8C%85/"/>
    
      <category term="三分" scheme="http://yoursite.com/tags/%E4%B8%89%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>「BZOJ4555」「Tjoi2016 &amp; Heoi2016」求和</title>
    <link href="http://yoursite.com/2017/03/19/bzoj4555/"/>
    <id>http://yoursite.com/2017/03/19/bzoj4555/</id>
    <published>2017-03-18T16:00:00.000Z</published>
    <updated>2017-04-17T07:56:18.080Z</updated>
    
    <content type="html"><![CDATA[<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><blockquote>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=4555" target="_blank" rel="external">题目传送门</a></p>
</blockquote>
<h3 id="解题报告"><a href="#解题报告" class="headerlink" title="解题报告"></a>解题报告</h3><blockquote>
<p>首先根据第二类斯特林数的定义，我们可以把第二个sigma上界变成n（这里很关键，就是因为不知道导致没推出卷积形式。。）<br>根据第二类斯特林数的公式，式子可以写成<br>$ f(n) = \sum_ {i = 0} ^ {n} \sum_ {j = 0} ^ {n} \sum_ {k = 0} ^ {j} (-1)^k * \frac {(j - k)^i} {k! (j-k)!} * 2^j *j! $<br>再把i的sigma丢到后面去 $ f(n) = \sum_{j = 0}^{n}\sum_{k = 0}^{j}(-1)^k* \frac{\sum_{i = 0}^{n}\text{ }(j-k)^i}{k!(j-k)!}*2^j*j! $<br>或者写成这样更显然一点 $ f(n) = \sum_{j = 0}^{n}2 ^ j * j!\sum_{k = 0}^{j} \frac{(-1)^k}{k!} * \frac{\sum_{i = 0}^{n}\text{ }(j-k)^i}{(j-k)!} $<br>这个式子就是个卷积，直接NTT咯。</p>
<p>这道题有些坑点，首先对于卷积那一部分里我们要弄一个等比数列求和，这里公比为1的时候要注意一下（还记得等比数列求和公式要分类讨论吗？）<br>然后还有对于第0项的讨论。这些都要注意。</p>
</blockquote>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 998244353</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 400005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> G 3</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>; <span class="keyword">char</span> a=getchar();</div><div class="line">    <span class="keyword">while</span>(a&lt;<span class="string">'0'</span> || a&gt;<span class="string">'9'</span>) &#123;<span class="keyword">if</span>(a==<span class="string">'-'</span>) f=<span class="number">-1</span>; a=getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(a&gt;=<span class="string">'0'</span> &amp;&amp; a&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+a-<span class="string">'0'</span>,a=getchar();</div><div class="line">    <span class="keyword">return</span> x*f;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n,fac[N],nfac[N],two[N],a[N],b[N],f[N],ans;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">fpow</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> k)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> ret=<span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(k)&#123;</div><div class="line">        <span class="keyword">if</span>(k&amp;<span class="number">1</span>) ret=<span class="number">1L</span>L*ret*x%mod;</div><div class="line">        k&gt;&gt;=<span class="number">1</span>; x=<span class="number">1L</span>L*x*x%mod;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> NTT&#123;</div><div class="line">    <span class="keyword">int</span> rev[N],wn[<span class="number">30</span>];</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">getwn</span><span class="params">()</span></span>&#123;<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,t=<span class="number">2</span>;i&lt;<span class="number">20</span>;i++,t&lt;&lt;=<span class="number">1</span>) wn[i]=fpow(G,(mod<span class="number">-1</span>)/t);&#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">ntt</span><span class="params">(<span class="keyword">int</span> x[],<span class="keyword">int</span> len,<span class="keyword">int</span> f)</span></span>&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len;i++) <span class="keyword">if</span>(i&lt;rev[i]) swap(x[i],x[rev[i]]);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> t=<span class="number">1</span>,lnow=<span class="number">2</span>;lnow&lt;=len;lnow&lt;&lt;=<span class="number">1</span>,t++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i+=lnow)&#123;</div><div class="line">                <span class="keyword">int</span> w=<span class="number">1</span>;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;i+lnow/<span class="number">2</span>;j++)&#123;</div><div class="line">                    <span class="keyword">int</span> t1=x[j],t2=<span class="number">1L</span>L*w*x[j+lnow/<span class="number">2</span>]%mod;</div><div class="line">                    x[j]=(t1+t2)%mod;</div><div class="line">                    x[j+lnow/<span class="number">2</span>]=((t1-t2)%mod+mod)%mod;</div><div class="line">                    w=<span class="number">1L</span>L*w*wn[t]%mod;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(f==<span class="number">-1</span>)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=len/<span class="number">2</span>;i+<span class="number">1</span>;i--) swap(x[i],x[len-i]);</div><div class="line">            <span class="keyword">int</span> inv=fpow(len,mod<span class="number">-2</span>);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=len;i++) a[i]=<span class="number">1L</span>L*a[i]*inv%mod;    </div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> b[],<span class="keyword">int</span> l1,<span class="keyword">int</span> l2)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> len,t;</div><div class="line">        <span class="keyword">for</span>(len=<span class="number">1</span>,t=<span class="number">0</span>;len&lt;=(l1+l2+<span class="number">1</span>);len&lt;&lt;=<span class="number">1</span>,t++); t=<span class="number">1</span>&lt;&lt;(t<span class="number">-1</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len;i++) rev[i]=rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>|(i&amp;<span class="number">1</span>?t:<span class="number">0</span>);</div><div class="line">        ntt(a,len,<span class="number">1</span>); ntt(b,len,<span class="number">1</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=len;i++) a[i]=<span class="number">1L</span>L*a[i]*b[i]%mod;</div><div class="line">        ntt(a,len,<span class="number">-1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    NTT::getwn();</div><div class="line">    n=read(); </div><div class="line">    fac[<span class="number">0</span>]=<span class="number">1</span>; <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) fac[i]=<span class="number">1L</span>L*fac[i<span class="number">-1</span>]*i%mod;</div><div class="line">    nfac[n]=fpow(fac[n],mod<span class="number">-2</span>); <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i+<span class="number">1</span>;i--) nfac[i]=<span class="number">1L</span>L*nfac[i+<span class="number">1</span>]*(i+<span class="number">1</span>)%mod;</div><div class="line">    two[<span class="number">0</span>]=<span class="number">1</span>; <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) two[i]=<span class="number">1L</span>L*two[i<span class="number">-1</span>]*<span class="number">2</span>%mod;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++) f[i]=<span class="number">1L</span>L*two[i]*fac[i]%mod;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++) a[i]=<span class="number">1L</span>L*(fpow(i,n+<span class="number">1</span>)<span class="number">-1</span>)*fpow(i<span class="number">-1</span>,mod<span class="number">-2</span>)%mod*nfac[i]%mod,a[i]=(a[i]+mod)%mod;</div><div class="line">    a[<span class="number">0</span>]=<span class="number">1</span>; a[<span class="number">1</span>]=n+<span class="number">1</span>; <span class="comment">//就是这里</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++) b[i]=(<span class="number">1L</span>L*(i&amp;<span class="number">1</span>?<span class="number">-1</span>:<span class="number">1</span>)*nfac[i]%mod+mod)%mod;</div><div class="line">    NTT::work(a,b,n,n);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++) ans=((LL)ans+<span class="number">1L</span>L*f[i]*a[i]%mod)%mod;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans+<span class="number">1</span>);  <span class="comment">//要把s（0,0）加上</span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;相关链接&quot;&gt;&lt;a href=&quot;#相关链接&quot; class=&quot;headerlink&quot; title=&quot;相关链接&quot;&gt;&lt;/a&gt;相关链接&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.lydsy.com/JudgeOnline/problem
    
    </summary>
    
      <category term="题目精选" scheme="http://yoursite.com/categories/%E9%A2%98%E7%9B%AE%E7%B2%BE%E9%80%89/"/>
    
    
      <category term="数学" scheme="http://yoursite.com/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="NTT" scheme="http://yoursite.com/tags/NTT/"/>
    
  </entry>
  
  <entry>
    <title>「Codechef Nov Challenge 2012」Arithmetic Progressions</title>
    <link href="http://yoursite.com/2017/03/18/codechef_Nov/"/>
    <id>http://yoursite.com/2017/03/18/codechef_Nov/</id>
    <published>2017-03-17T16:00:00.000Z</published>
    <updated>2017-04-16T04:24:21.438Z</updated>
    
    <content type="html"><![CDATA[<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><blockquote>
<p><a href="https://www.codechef.com/NOV12/problems/COUNTARI/" target="_blank" rel="external">题目传送门</a></p>
</blockquote>
<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote>
<p>给定一个序列，求多少个三元组满足ai+ak=2*aj(i&lt;j&lt;k)。</p>
</blockquote>
<h3 id="解题报告"><a href="#解题报告" class="headerlink" title="解题报告"></a>解题报告</h3><blockquote>
<p>原来叉姐的讲义上有啊。。完全忘掉了。。<br>首先这个式子很明显是一个卷积。我们有了FFT的思路。但是肯定不能每一个数都去做一次。那怎么办呢？我们分块吧！（分块大法好）<br>对于每一个块我们统计出前面块的桶，同理我们也有后面块的桶，两个桶FFT一下我们就得到了以这个块内元素为j,i和k分别在前面的块与后面的块的方案了。然后我们还要解决两个在一个块，三个在一个块的问题。两个在一个块的我们直接去前后的桶里找，同一个块的直接n*n暴力。然后就做完啦！好妙啊！<br>这题被坑了好久。。因为空间莫名其妙的问题怎么都算不对（块开极端都可以，就是开中间不行），然后一个下午没有了。。</p>
</blockquote>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 205005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1e9</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> Bl 70</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LIM 60000</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI=<span class="built_in">acos</span>(<span class="number">-1</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">       LL x=<span class="number">0</span>,f=<span class="number">1</span>; <span class="keyword">char</span> a=getchar();</div><div class="line">       <span class="keyword">while</span>(a&lt;<span class="string">'0'</span> || a&gt;<span class="string">'9'</span>) &#123;<span class="keyword">if</span>(a==<span class="string">'-'</span>) f=<span class="number">-1</span>; a=getchar();&#125;</div><div class="line">       <span class="keyword">while</span>(a&gt;=<span class="string">'0'</span> &amp;&amp; a&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+a-<span class="string">'0'</span>,a=getchar();</div><div class="line">       <span class="keyword">return</span> x*f;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> FFT&#123;</div><div class="line">    <span class="keyword">int</span> rev[N];</div><div class="line">    </div><div class="line">    <span class="keyword">struct</span> vec&#123;</div><div class="line">        <span class="keyword">double</span> r,i;</div><div class="line">        vec <span class="keyword">operator</span> * (<span class="keyword">const</span> vec&amp; w)&#123;<span class="keyword">return</span> (vec)&#123;r*w.r-i*w.i,i*w.r+r*w.i&#125;;&#125;</div><div class="line">        vec <span class="keyword">operator</span> + (<span class="keyword">const</span> vec&amp; w)&#123;<span class="keyword">return</span> (vec)&#123;r+w.r,i+w.i&#125;;&#125;</div><div class="line">        vec <span class="keyword">operator</span> - (<span class="keyword">const</span> vec&amp; w)&#123;<span class="keyword">return</span> (vec)&#123;r-w.r,i-w.i&#125;;&#125;</div><div class="line">    &#125;A[N],B[N];</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">fft</span><span class="params">(vec* x,<span class="keyword">int</span> len,<span class="keyword">int</span> f)</span></span>&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len;i++) <span class="keyword">if</span>(i&lt;rev[i]) swap(x[i],x[rev[i]]);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> lnow=<span class="number">2</span>;lnow&lt;=len;lnow&lt;&lt;=<span class="number">1</span>)&#123;</div><div class="line">            vec w,w0=(vec)&#123;<span class="built_in">cos</span>(<span class="number">2.0</span>*PI/lnow*f),<span class="built_in">sin</span>(<span class="number">2.0</span>*PI/lnow*f)&#125;,t1,t2;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i+=lnow)&#123;</div><div class="line">                w=(vec)&#123;<span class="number">1</span>,<span class="number">0</span>&#125;;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;i+lnow/<span class="number">2</span>;j++)&#123;</div><div class="line">                    t1=x[j]; t2=w*x[j+lnow/<span class="number">2</span>];</div><div class="line">                    x[j]=t1+t2; x[j+lnow/<span class="number">2</span>]=t1-t2;</div><div class="line">                    w=w*w0;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> b[],<span class="keyword">int</span> l1,<span class="keyword">int</span> l2,LL s[])</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> len,t;</div><div class="line">        <span class="keyword">for</span>(len=<span class="number">1</span>,t=<span class="number">0</span>;len&lt;=(l1+l2+<span class="number">1</span>);len&lt;&lt;=<span class="number">1</span>,t++); t=<span class="number">1</span>&lt;&lt;(t<span class="number">-1</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=len;i++) rev[i]=rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>|(i&amp;<span class="number">1</span>?t:<span class="number">0</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=len;i++) B[i]=A[i]=(vec)&#123;<span class="number">0</span>,<span class="number">0</span>&#125;;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=l1;i++) A[i].r=a[i];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=l2;i++) B[i].r=b[i];</div><div class="line">        fft(A,len,<span class="number">1</span>); fft(B,len,<span class="number">1</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=len;i++) A[i]=A[i]*B[i];</div><div class="line">        fft(A,len,<span class="number">-1</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=l1+l2;i++)</div><div class="line">        s[i]=(LL)(<span class="number">1.0</span>*A[i].r/len+<span class="number">0.5</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n,block_size,block_num;</div><div class="line"><span class="keyword">int</span> bel[N],l[Bl+<span class="number">5</span>],r[Bl+<span class="number">5</span>],a[N];</div><div class="line">LL tot,ans[<span class="number">2</span>*LIM+<span class="number">6000</span>];</div><div class="line"><span class="keyword">int</span> lsum[LIM+<span class="number">5</span>],rsum[LIM+<span class="number">5</span>],cnt[<span class="number">2</span>*LIM+<span class="number">5</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">brutal_force</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=l[x];i&lt;=r[x];i++) rsum[a[i]]--;</div><div class="line">    <span class="built_in">memset</span>(ans,<span class="number">0</span>,<span class="keyword">sizeof</span>(ans));</div><div class="line">    FFT::work(lsum,rsum,<span class="number">30000</span>,<span class="number">30000</span>,ans);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=l[x];i&lt;=r[x];i++)&#123;</div><div class="line">        tot+=ans[<span class="number">2</span>*a[i]];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=l[x];j&lt;i;j++)</div><div class="line">        <span class="keyword">if</span>(<span class="number">2</span>*a[i]-a[j]&gt;<span class="number">0</span>) tot+=rsum[<span class="number">2</span>*a[i]-a[j]];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=r[x];j++)</div><div class="line">        <span class="keyword">if</span>(<span class="number">2</span>*a[i]-a[j]&gt;<span class="number">0</span>) tot+=lsum[<span class="number">2</span>*a[i]-a[j]];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=l[x];i&lt;=r[x];i++) lsum[a[i]]++;</div><div class="line">    <span class="built_in">memset</span>(cnt,<span class="number">0</span>,<span class="keyword">sizeof</span>(cnt));</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=l[x];i&lt;=r[x];i++)&#123;</div><div class="line">        tot+=cnt[a[i]];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=l[x];j&lt;i;j++)</div><div class="line">        <span class="keyword">if</span>(<span class="number">2</span>*a[i]-a[j]&gt;<span class="number">0</span>) cnt[<span class="number">2</span>*a[i]-a[j]]++;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    n=read(); block_size=<span class="number">1500</span>;</div><div class="line">    block_num=(n<span class="number">-1</span>)/block_size+<span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) a[i]=read(),bel[i]=(i<span class="number">-1</span>)/block_size+<span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=block_num;i++) l[i]=(i<span class="number">-1</span>)*block_size+<span class="number">1</span>,r[i]=min(n,i*block_size);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) rsum[a[i]]++;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=block_num;i++) brutal_force(i);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,tot);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;相关链接&quot;&gt;&lt;a href=&quot;#相关链接&quot; class=&quot;headerlink&quot; title=&quot;相关链接&quot;&gt;&lt;/a&gt;相关链接&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.codechef.com/NOV12/problems/
    
    </summary>
    
      <category term="题目精选" scheme="http://yoursite.com/categories/%E9%A2%98%E7%9B%AE%E7%B2%BE%E9%80%89/"/>
    
    
      <category term="FFT" scheme="http://yoursite.com/tags/FFT/"/>
    
      <category term="分块" scheme="http://yoursite.com/tags/%E5%88%86%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>「BZOJ4502」串</title>
    <link href="http://yoursite.com/2017/03/14/bzoj4502/"/>
    <id>http://yoursite.com/2017/03/14/bzoj4502/</id>
    <published>2017-03-13T16:00:00.000Z</published>
    <updated>2017-04-16T04:15:13.522Z</updated>
    
    <content type="html"><![CDATA[<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><blockquote>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=4502" target="_blank" rel="external">题目传送门</a></p>
</blockquote>
<h3 id="解题报告"><a href="#解题报告" class="headerlink" title="解题报告"></a>解题报告</h3><blockquote>
<p>首先直接弄肯定不行，会算重。所以要么除掉相同方案或者找到一种不重不漏的计算方式。这里提供一种不重不漏的dp。<br>AC自动机上dp。我们定义dp状态dp[i][j]表示第一次失配之后我们加了i个字符，当前在j节点的方案数。<br>转移如下：dp[i][j]-&gt;dp[i+1][next[j][a]]其中a为我们当前枚举的转移字符，并且要满足条件：状态next[j][a]的长度要大于i。<br>现在来解释这样为什么能做到不重不漏。dp状态里的这个i其实并不能完全说是加了i个字符，也许说走了i步更加合适，因为我们dp完后去看对应的方案其实不一定就是在分割点后加了i个字符。我们基于的思想是这样的：我们在初始化的时候，枚举AC自动机上哪些节点没有当前枚举字符的转移，但是fail指向的又不是root，这些作为我们的第一“切割点”（待会解释为什么这里是打引号）。然后我们开始往里面丢字符，也许我们丢了之后转移到的状态对应的长度是大于我们目前加的这后面一段总长度的，但这不要紧，我们可以把多的那一部分前缀补到分割点前面去，也就是说分割点前移，所以说为什么前面要打引号，是这个原因。<br>举个例子，我们在前面一部分串为ABC，我们在这个C后面断开开始找第二段。此时第一“切割点”就是这个C。假如我们枚举一个D，而后缀自动机把它转移到了BCD状态上，我们可以视作将切割点迁移至了A后面，最后对应的分割方式就是A|BCD。<br>好，那么为什么要满足那个长度要大于i的条件呢？因为一旦小等i，就说明没有一个对应的方案可以实现，这是不存在的。<br>再回到本质问题上来，为什么能不重不漏。经过多番讨论，我想到一个较为准确的表述：我们发现，我们用这种分割方式，第一“分割点”一定会选择一个位置，使得实际分割点到第一分割点尽可能的长，这就使得每个串有一个唯一的划分方式，使得不重不漏。<br>上面说了不重，还要注意不漏。有一些串在我们初始化的时候是断不开的，对于这些串我们要特判一下，一开始就计入答案。</p>
</blockquote>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 300005</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">       LL x=<span class="number">0</span>,f=<span class="number">1</span>; <span class="keyword">char</span> a=getchar();</div><div class="line">       <span class="keyword">while</span>(a&lt;<span class="string">'0'</span> || a&gt;<span class="string">'9'</span>) &#123;<span class="keyword">if</span>(a==<span class="string">'-'</span>) f=<span class="number">-1</span>; a=getchar();&#125;</div><div class="line">       <span class="keyword">while</span>(a&gt;=<span class="string">'0'</span> &amp;&amp; a&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+a-<span class="string">'0'</span>,a=getchar();</div><div class="line">       <span class="keyword">return</span> x*f;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n,cnt,next[N][<span class="number">26</span>],f[N],root,lim,dep[N];</div><div class="line"><span class="keyword">bool</span> tr[N][<span class="number">26</span>];</div><div class="line">LL ans,dp[<span class="number">100</span>][N];</div><div class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">char</span> tmp[<span class="number">35</span>]; <span class="built_in">memset</span>(tmp,<span class="number">0</span>,<span class="keyword">sizeof</span>(tmp)); <span class="built_in">scanf</span>(<span class="string">"%s"</span>,tmp+<span class="number">1</span>);</div><div class="line">    <span class="keyword">int</span> len=<span class="built_in">strlen</span>(tmp+<span class="number">1</span>),now=root;lim=max(lim,<span class="number">2</span>*len);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len;i++)&#123;</div><div class="line">        <span class="keyword">int</span> a=tmp[i]-<span class="string">'a'</span>;</div><div class="line">        <span class="keyword">if</span>(!next[now][a]) next[now][a]=++cnt; </div><div class="line">        now=next[now][a];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">getfail</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++) <span class="keyword">if</span>(next[root][i])    dep[next[root][i]]=<span class="number">1</span>,q.push(next[root][i]);</div><div class="line">    <span class="keyword">while</span>(!q.empty())&#123;</div><div class="line">        <span class="keyword">int</span> p=q.front(); q.pop();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)&#123;</div><div class="line">            <span class="keyword">int</span> v=next[p][i];</div><div class="line">            <span class="keyword">if</span>(!v) &#123;next[p][i]=next[f[p]][i];<span class="keyword">continue</span>;&#125;</div><div class="line">            tr[p][i]=<span class="number">1</span>;</div><div class="line">            <span class="keyword">int</span> k=f[p];</div><div class="line">            <span class="keyword">while</span>(k &amp;&amp; !next[k][i]) k=f[k]; k=next[k][i];</div><div class="line">            f[v]=k; dep[v]=dep[p]+<span class="number">1</span>;</div><div class="line">            q.push(v);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    n=read();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) insert(); getfail();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++) <span class="keyword">if</span>(f[i]!=root) ans++;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> a=<span class="number">0</span>;a&lt;<span class="number">26</span>;a++)</div><div class="line">            <span class="keyword">if</span>(!tr[i][a] &amp;&amp; next[i][a]!=root) dp[<span class="number">1</span>][next[i][a]]++;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=lim;i++)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=cnt;j++)</div><div class="line">        <span class="keyword">if</span>(dp[i][j])&#123;</div><div class="line">            ans+=dp[i][j];</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> a=<span class="number">0</span>;a&lt;<span class="number">26</span>;a++)</div><div class="line">                <span class="keyword">if</span>(tr[j][a] || dep[next[j][a]]&gt;=i+<span class="number">1</span>) dp[i+<span class="number">1</span>][next[j][a]]+=dp[i][j];</div><div class="line">        &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;相关链接&quot;&gt;&lt;a href=&quot;#相关链接&quot; class=&quot;headerlink&quot; title=&quot;相关链接&quot;&gt;&lt;/a&gt;相关链接&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.lydsy.com/JudgeOnline/problem
    
    </summary>
    
      <category term="题目精选" scheme="http://yoursite.com/categories/%E9%A2%98%E7%9B%AE%E7%B2%BE%E9%80%89/"/>
    
    
      <category term="动态规划" scheme="http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="AC自动机" scheme="http://yoursite.com/tags/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>日常小测3.4 T1</title>
    <link href="http://yoursite.com/2017/03/04/3_4T1/"/>
    <id>http://yoursite.com/2017/03/04/3_4T1/</id>
    <published>2017-03-03T16:00:00.000Z</published>
    <updated>2017-04-16T04:11:34.935Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote>
<p>给定4个字符A,B,C,D的数量（&lt;=1000）求由它们全体组成的满足相邻字符不同的序列个数。</p>
</blockquote>
<h3 id="解题报告"><a href="#解题报告" class="headerlink" title="解题报告"></a>解题报告</h3><blockquote>
<p>首先是$n^4$的暴力。<br>然后我们考虑怎么减少枚举量，我们考虑往已得到的序列中加入字符。<br>我们先只加入A。然后插入B，我们枚举有哪些A被B给插开了，此时我们可以唯一确定，有多少空隙必须要加入字符（因为会有AA、BB这样的，以下称之为必要空隙），而有一些则不必（如AB、BA，称之为不必要空隙），关于这个个数我们需要分类讨论一下B在序列两侧（也就是没被A包住）的情况。我们还要再枚举除了必要空隙，还有哪些不必要空隙我们也会插入字符C、D，再枚举C、D的插入形式，我们就能把这种情况不重不漏的计入答案中。<br>考虑怎么枚举C、D的插入形式。前面的A、B虽然可以有“粘黏”（形如AA，BB），但是后面插入的C、D是不允许的，因为已经没有后续字符来分开他们了。所以只有以下4种形式：1.CDCDC…C  2.DCDCD…D 3.CDCDCD…CD 4.DCDCDC…DC<br>关键在于枚举形式1。为什么呢，因为C与D的字符个数差是恒定的。如果我们把形式1看作一个C加上形式4，形式2也可以这么看待，而形式3、4中的C、D个数相等，C、D之差只由形式1、2决定，所以一旦1确定，2也跟着确定了，确定之后，我们会有若干对CD。只要把他们随便丢到插入位置屁股后面就好了。<br>这么看来好像是3层枚举，但其实我们可以预处理对于每种待插入空隙数量，形式1不同个数的情况的总和。所以我们只用O（M^2）的枚举就可以解决这个问题了。<br>这个问题非常巧妙，通过枚举来减少字符集，尤其是这种不重不漏的统计方法值得学习。<br>然后就是这个很讨厌的int和LL的问题了。切记括号要包严实。</p>
</blockquote>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 4005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 1000000007</span></div><div class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">       LL x=<span class="number">0</span>,f=<span class="number">1</span>; <span class="keyword">char</span> a=getchar();</div><div class="line">       <span class="keyword">while</span>(a&lt;<span class="string">'0'</span> || a&gt;<span class="string">'9'</span>) &#123;<span class="keyword">if</span>(a==<span class="string">'-'</span>) f=<span class="number">-1</span>; a=getchar();&#125;</div><div class="line">       <span class="keyword">while</span>(a&gt;=<span class="string">'0'</span> &amp;&amp; a&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+a-<span class="string">'0'</span>,a=getchar();</div><div class="line">       <span class="keyword">return</span> x*f;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> a,b,c,d,f[N],two[N],F[N][N],C[N][N],ans;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">4000</span>;i++) C[i][<span class="number">0</span>]=<span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">4000</span>;i++) </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=i;j++)</div><div class="line">        C[i][j]=((LL)C[i<span class="number">-1</span>][j]+C[i<span class="number">-1</span>][j<span class="number">-1</span>])%mod;</div><div class="line">    F[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">4000</span>;i++)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">4000</span>;j++)</div><div class="line">        F[i][j]=i?((LL)F[i][j<span class="number">-1</span>]+F[i<span class="number">-1</span>][j])%mod:F[i][j<span class="number">-1</span>];</div><div class="line">    two[<span class="number">0</span>]=<span class="number">1</span>; <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">4000</span>;i++) two[i]=(LL)two[i<span class="number">-1</span>]*<span class="number">2L</span>L%mod;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=c;i++)&#123;</div><div class="line">        <span class="keyword">int</span> s1=i,s2=d-c+s1;</div><div class="line">        <span class="keyword">if</span>(s2&lt;<span class="number">0</span> || s2&gt;d || s1+s2&gt;x) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">int</span> lef=c-s1; lef-=x-s1-s2;</div><div class="line">        <span class="keyword">if</span>(lef&lt;<span class="number">0</span>) <span class="keyword">continue</span>;</div><div class="line">        f[x]=((LL)f[x]+((LL)C[x][s1]*C[x-s1][s2]%mod*two[x-s1-s2]%mod*F[lef][x]%mod))%mod; </div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    a=read(); b=read(); c=read(); d=read();</div><div class="line">    init(); <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=c+d;i++) work(i);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">3</span>;k++)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>;x&lt;=min(b-k,a<span class="number">-1</span>);x++)&#123;</div><div class="line">            <span class="keyword">int</span> num=a<span class="number">-1</span><span class="number">-2</span>*x+b-k,lef=a+b+<span class="number">1</span>-num;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> delta=<span class="number">0</span>;delta&lt;=lef;delta++)</div><div class="line">                <span class="keyword">if</span>(k==<span class="number">1</span>)</div><div class="line">            ans=((LL)ans+<span class="number">2L</span>L*f[delta+num]%mod*C[a<span class="number">-1</span>][x]%mod*C[lef][delta]%mod*F[b-x-k][x+k])%mod;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                ans=((LL)ans+<span class="number">1L</span>L*f[delta+num]*C[a<span class="number">-1</span>][x]%mod*C[lef][delta]%mod*F[b-x-k][x+k])%mod;</div><div class="line">        &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;给定4个字符A,B,C,D的数量（&amp;lt;=1000）求由它们全体组成的满足相邻字符不同的序列个数。&lt;/p&gt;
&lt;/
    
    </summary>
    
      <category term="题目精选" scheme="http://yoursite.com/categories/%E9%A2%98%E7%9B%AE%E7%B2%BE%E9%80%89/"/>
    
    
      <category term="组合数学" scheme="http://yoursite.com/tags/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>「51nod 1766」树上最远点对</title>
    <link href="http://yoursite.com/2017/01/23/51nod1766/"/>
    <id>http://yoursite.com/2017/01/23/51nod1766/</id>
    <published>2017-01-22T16:00:00.000Z</published>
    <updated>2017-04-16T04:05:16.194Z</updated>
    
    <content type="html"><![CDATA[<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><blockquote>
<p><a href="https://www.51nod.com/onlineJudge/questionCode.html#!problemId=1766" target="_blank" rel="external">题目传送门</a></p>
</blockquote>
<h3 id="解题报告"><a href="#解题报告" class="headerlink" title="解题报告"></a>解题报告</h3><blockquote>
<p>首先，我们有一个结论：对于一个集合的直径，如果我们将这个集合分解成两个非空集合，它的端点一定在两个非空集合的两个端这4个端点中。这非常的显然。。。<br>那么我们就可以做到合并两个集合，我们就可以用线段树维护每个区间的直径，就好啦，完全不用复杂的数据结构。<br>这道题卡时间，所以LCA要用欧拉序RMQ做。<br>复杂度O（nlogn）</p>
</blockquote>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 200005</span></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>; <span class="keyword">char</span> a=getchar();</div><div class="line">    <span class="keyword">while</span>(a&lt;<span class="string">'0'</span> || a&gt;<span class="string">'9'</span>) &#123;<span class="keyword">if</span>(a==<span class="string">'-'</span>) f=<span class="number">-1</span>; a=getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(a&gt;=<span class="string">'0'</span> &amp;&amp; a&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+a-<span class="string">'0'</span>,a=getchar();</div><div class="line">    <span class="keyword">return</span> x*f;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> n,m,cnt=<span class="number">1</span>,euler[<span class="number">2</span>*N],dep[N],head[N],fi[N],dis[N],st[N][<span class="number">20</span>],mn[N][<span class="number">20</span>],Log[<span class="number">2</span>*N];</div><div class="line"><span class="keyword">struct</span> edges&#123;</div><div class="line">    <span class="keyword">int</span> to,c,next;</div><div class="line">&#125;e[N];</div><div class="line"><span class="keyword">struct</span> node&#123;</div><div class="line">    <span class="keyword">int</span> x1,x2,l,r;</div><div class="line">&#125;seg[<span class="number">4</span>*N];</div><div class="line"><span class="keyword">struct</span> data&#123;</div><div class="line">    <span class="keyword">int</span> x1,x2;</div><div class="line">&#125;;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getdis</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(!u || !v) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    u=fi[u]; v=fi[v];</div><div class="line">    <span class="keyword">if</span>(u&gt;v) swap(u,v);</div><div class="line">    <span class="keyword">int</span> p,len=Log[v-u+<span class="number">1</span>];</div><div class="line">    p=mn[u][len]&lt;mn[v-(<span class="number">1</span>&lt;&lt;len)+<span class="number">1</span>][len]?st[u][len]:st[v-(<span class="number">1</span>&lt;&lt;len)+<span class="number">1</span>][len];</div><div class="line">    <span class="keyword">return</span> dis[euler[u]]+dis[euler[v]]<span class="number">-2</span>*dis[p];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> mx=<span class="number">0</span>,x1=seg[x&lt;&lt;<span class="number">1</span>].x1,x2=seg[x&lt;&lt;<span class="number">1</span>].x2,x3=seg[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].x1,x4=seg[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].x2,f;</div><div class="line"><span class="keyword">if</span>((f=getdis(x1,x2))&gt;mx) seg[x].x1=x1,seg[x].x2=x2,mx=f; <span class="keyword">if</span>((f=getdis(x1,x3))&gt;mx) seg[x].x1=x1,seg[x].x2=x3,mx=f;</div><div class="line"><span class="keyword">if</span>((f=getdis(x1,x4))&gt;mx) seg[x].x1=x1,seg[x].x2=x4,mx=f; <span class="keyword">if</span>((f=getdis(x2,x3))&gt;mx) seg[x].x1=x2,seg[x].x2=x3,mx=f;</div><div class="line"><span class="keyword">if</span>((f=getdis(x2,x4))&gt;mx) seg[x].x1=x2,seg[x].x2=x4,mx=f; <span class="keyword">if</span>((f=getdis(x3,x4))&gt;mx) seg[x].x1=x3,seg[x].x2=x4,mx=f;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> u=read(),v=read(),c=read();</div><div class="line">    e[++cnt]=(edges)&#123;v,c,head[u]&#125;;head[u]=cnt;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> fa)</span></span>&#123;</div><div class="line">    dep[x]=dep[fa]+<span class="number">1</span>; fi[x]=euler[<span class="number">0</span>]+<span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=e[i].next)&#123;</div><div class="line">        <span class="keyword">if</span>(fa==e[i].to) <span class="keyword">continue</span>;</div><div class="line">        euler[++euler[<span class="number">0</span>]]=x;</div><div class="line">        dis[e[i].to]=dis[x]+e[i].c; dfs(e[i].to,x);</div><div class="line">    &#125;</div><div class="line">    euler[++euler[<span class="number">0</span>]]=x;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">rmq_pre</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=euler[<span class="number">0</span>];i++) st[i][<span class="number">0</span>]=euler[i],mn[i][<span class="number">0</span>]=dep[euler[i]];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">18</span>;i++)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=euler[<span class="number">0</span>];j++)&#123;</div><div class="line">            <span class="keyword">if</span>(j+(<span class="number">1</span>&lt;&lt;i)<span class="number">-1</span>&gt;euler[<span class="number">0</span>]) <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">if</span>(mn[j][i<span class="number">-1</span>]&lt;mn[j+(<span class="number">1</span>&lt;&lt;(i<span class="number">-1</span>))][i<span class="number">-1</span>]) st[j][i]=st[j][i<span class="number">-1</span>],mn[j][i]=mn[j][i<span class="number">-1</span>];</div><div class="line">            <span class="keyword">else</span> st[j][i]=st[j+(<span class="number">1</span>&lt;&lt;(i<span class="number">-1</span>))][i<span class="number">-1</span>],mn[j][i]=mn[j+(<span class="number">1</span>&lt;&lt;(i<span class="number">-1</span>))][i<span class="number">-1</span>];</div><div class="line">        &#125;</div><div class="line">    Log[<span class="number">0</span>]=<span class="number">-1</span>; <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=euler[<span class="number">0</span>];i++) Log[i]=Log[i&gt;&gt;<span class="number">1</span>]+<span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    seg[x].l=l; seg[x].r=r;</div><div class="line">    <span class="keyword">if</span>(l==r) &#123;seg[x].x1=l; seg[x].x2=<span class="number">0</span>; <span class="keyword">return</span>;&#125;</div><div class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</div><div class="line">    build(l,mid,x&lt;&lt;<span class="number">1</span>);</div><div class="line">    build(mid+<span class="number">1</span>,r,x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</div><div class="line">    update(x);</div><div class="line">&#125;</div><div class="line"><span class="function">data <span class="title">merge</span><span class="params">(data tmp1,data tmp2)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> f,mx=<span class="number">0</span>,x1=tmp1.x1,x2=tmp1.x2,x3=tmp2.x1,x4=tmp2.x2;</div><div class="line">    data ret;</div><div class="line">    <span class="keyword">if</span>((f=getdis(x1,x2))&gt;mx) ret.x1=x1,ret.x2=x2,mx=f; <span class="keyword">if</span>((f=getdis(x1,x3))&gt;mx) ret.x1=x1,ret.x2=x3,mx=f;</div><div class="line">    <span class="keyword">if</span>((f=getdis(x1,x4))&gt;mx) ret.x1=x1,ret.x2=x4,mx=f; <span class="keyword">if</span>((f=getdis(x2,x3))&gt;mx) ret.x1=x2,ret.x2=x3,mx=f;</div><div class="line">    <span class="keyword">if</span>((f=getdis(x2,x4))&gt;mx) ret.x1=x2,ret.x2=x4,mx=f; <span class="keyword">if</span>((f=getdis(x3,x4))&gt;mx) ret.x1=x3,ret.x2=x4,mx=f;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"><span class="function">data <span class="title">query</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> l=seg[x].l,r=seg[x].r;</div><div class="line">    <span class="keyword">if</span>(l==L &amp;&amp; r==R) &#123;<span class="keyword">return</span> (data)&#123;seg[x].x1,seg[x].x2&#125;;&#125;</div><div class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span>(R&lt;=mid) <span class="keyword">return</span> query(L,R,x&lt;&lt;<span class="number">1</span>);</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(mid&lt;L) <span class="keyword">return</span> query(L,R,x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> merge(query(L,mid,x&lt;&lt;<span class="number">1</span>),query(mid+<span class="number">1</span>,R,x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>));</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    n=read();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++) insert();</div><div class="line">    dfs(<span class="number">1</span>,<span class="number">0</span>); rmq_pre(); build(<span class="number">1</span>,n,<span class="number">1</span>);</div><div class="line">    m=read();</div><div class="line">    <span class="keyword">while</span>(m--)&#123;</div><div class="line">        <span class="keyword">int</span> t1,t2,a=read(),b=read(),c=read(),d=read();</div><div class="line">        data tmp1=query(a,b,<span class="number">1</span>),tmp2=query(c,d,<span class="number">1</span>);</div><div class="line">        t1=max(getdis(tmp1.x1,tmp2.x1),getdis(tmp1.x1,tmp2.x2));</div><div class="line">        t2=max(getdis(tmp1.x2,tmp2.x1),getdis(tmp1.x2,tmp2.x2));</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,max(t1,t2));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;相关链接&quot;&gt;&lt;a href=&quot;#相关链接&quot; class=&quot;headerlink&quot; title=&quot;相关链接&quot;&gt;&lt;/a&gt;相关链接&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.51nod.com/onlineJudge/questi
    
    </summary>
    
      <category term="题目精选" scheme="http://yoursite.com/categories/%E9%A2%98%E7%9B%AE%E7%B2%BE%E9%80%89/"/>
    
    
      <category term="线段树" scheme="http://yoursite.com/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>「51nod 1537」分解</title>
    <link href="http://yoursite.com/2017/01/20/51nod1537/"/>
    <id>http://yoursite.com/2017/01/20/51nod1537/</id>
    <published>2017-01-19T16:00:00.000Z</published>
    <updated>2017-04-16T03:52:55.676Z</updated>
    
    <content type="html"><![CDATA[<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><blockquote>
<p><a href="https://www.51nod.com/onlineJudge/questionCode.html#!problemId=1537" target="_blank" rel="external">题目传送门</a></p>
</blockquote>
<h3 id="解题报告"><a href="#解题报告" class="headerlink" title="解题报告"></a>解题报告</h3><blockquote>
<p>证明好巧妙，给跪OTZ<br>题目的式子：$ {\left( {1{\rm{ + }}\sqrt 2 } \right)^{\rm{n}}} $，设其乘开之后为　$ {\rm{a + b}}\sqrt 2 $<br>考虑相对的式子：$ {\left( {1{\rm{ - }}\sqrt 2 } \right)^{\rm{n}}}$,则乘开后为 ${\rm{a - b}}\sqrt 2 $<br>两式相乘，得到 $ {( - 1)^n} = {a^2} - 2{b^2} $<br>分奇偶讨论，如果n为偶数，则当 $ m = {a^2} $, $ m - 1 = {a^2} - 1 = 2{b^2} $,$ \sqrt m  + \sqrt {m - 1}  = a + b\sqrt 2 $<br>n为奇数时同理，当 $ m = {a^2} + 1 = 2{b^2} $,$ m - 1 = {a^2} $,$ \sqrt m  + \sqrt {m - 1}  = a + b\sqrt 2 $<br>所以，不存在无解状况。现在问题是怎么求a。如果打表找规律可以知道，n&gt;=2时，a[n]=2*a[n-1]+a[n-2],初始值为a[1]=a[2]=1;</p>
<p>怎么证明呢？网上没看到有证明，所以自己胡扯一下吧。考虑我们已经有了 $ {\left( {1{\rm{ + }}\sqrt 2 } \right)^{n - 2}} = {a_1} + {b_1}\sqrt 2 $<br> $ {a_2} = {a_1} + 2{b_1} $,$ {b_2} = {a_1} + {b_1} $<br>同理,可以推出 $ {a_3} = {a_2} + 2{b_2} $<br>带入a1,a2，可以得到 $ {a_3} = 3{a_1} + 4{b_1} = 2{a_1} + {a_2} $<br>所以满足上面的递推式。<br>然后矩阵快速幂搞一发就过啦！</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;相关链接&quot;&gt;&lt;a href=&quot;#相关链接&quot; class=&quot;headerlink&quot; title=&quot;相关链接&quot;&gt;&lt;/a&gt;相关链接&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.51nod.com/onlineJudge/questi
    
    </summary>
    
      <category term="题目精选" scheme="http://yoursite.com/categories/%E9%A2%98%E7%9B%AE%E7%B2%BE%E9%80%89/"/>
    
    
      <category term="数学" scheme="http://yoursite.com/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="矩阵快速幂" scheme="http://yoursite.com/tags/%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82/"/>
    
  </entry>
  
  <entry>
    <title>「UER#7」T2</title>
    <link href="http://yoursite.com/2017/01/12/UER7T2/"/>
    <id>http://yoursite.com/2017/01/12/UER7T2/</id>
    <published>2017-01-11T16:00:00.000Z</published>
    <updated>2017-04-16T02:57:38.223Z</updated>
    
    <content type="html"><![CDATA[<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><blockquote>
<p><a href="http://uoj.ac/contest/35/problem/245" target="_blank" rel="external">题目传送门</a></p>
</blockquote>
<h3 id="解题报告"><a href="#解题报告" class="headerlink" title="解题报告"></a>解题报告</h3><blockquote>
<p>首先可以注意到的是，答案一定是单增的。我们再发现，随着1.05指数不断增加，之后肯定会有质的飞跃（毕竟是指数函数），也就是说，到时候一定有一大段区间的答案都是同一个数。所以我们只要分别找出每一个段的答案就好了。段数大概是log的（不会证，凭感觉吧。。。<br>先把2和n的答案计算出来，然后分治下去。如果当前分治的区间，左端点的答案误差范围已经和右边答案的误差范围相交，说明夹在他们中间的数们答案全一样，随便选一个复制给他们就好了。<br>时间复杂度O（nlogn）。跪烂。。</p>
</blockquote>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1e9</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-5</span></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>; <span class="keyword">char</span> a=getchar();</div><div class="line">    <span class="keyword">while</span>(a&lt;<span class="string">'0'</span> || a&gt;<span class="string">'9'</span>) &#123;<span class="keyword">if</span>(a==<span class="string">'-'</span>) f=<span class="number">-1</span>; a=getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(a&gt;=<span class="string">'0'</span> &amp;&amp; a&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+a-<span class="string">'0'</span>,a=getchar();</div><div class="line">    <span class="keyword">return</span> x*f;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> n,mx[N][<span class="number">20</span>],mn[N][<span class="number">20</span>],ans[N],Log[N];</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Max</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> (<span class="keyword">int</span>)((<span class="keyword">double</span>)x*<span class="number">1.05</span>+eps);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Min</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> (<span class="keyword">int</span>)((<span class="keyword">double</span>)x*<span class="number">0.95</span>+<span class="number">1</span>-eps);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pre</span><span class="params">()</span></span>&#123;</div><div class="line">    Log[<span class="number">0</span>]=<span class="number">-1</span>; <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) Log[i]=Log[i&gt;&gt;<span class="number">1</span>]+<span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">18</span>;i++)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</div><div class="line">            mx[j][i]=max(mx[j][i<span class="number">-1</span>],mx[min(n,j+(<span class="number">1</span>&lt;&lt;(i<span class="number">-1</span>)))][i<span class="number">-1</span>]);</div><div class="line">            mn[j][i]=min(mn[j][i<span class="number">-1</span>],mn[min(n,j+(<span class="number">1</span>&lt;&lt;(i<span class="number">-1</span>)))][i<span class="number">-1</span>]);</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">qmx</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> max(mx[l][Log[r-l+<span class="number">1</span>]],mx[r-(<span class="number">1</span>&lt;&lt;Log[r-l+<span class="number">1</span>])+<span class="number">1</span>][Log[r-l+<span class="number">1</span>]]);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">qmn</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> min(mn[l][Log[r-l+<span class="number">1</span>]],mn[r-(<span class="number">1</span>&lt;&lt;Log[r-l+<span class="number">1</span>])+<span class="number">1</span>][Log[r-l+<span class="number">1</span>]]);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    ans[x]=INF;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n-x+<span class="number">1</span>;i++) ans[x]=min(ans[x],qmx(i,i+x<span class="number">-1</span>)-qmn(i,i+x<span class="number">-1</span>));</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dc</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(r-l&lt;=<span class="number">1</span>) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">if</span>(Max(ans[l])&gt;=Min(ans[r]))&#123;</div><div class="line">        <span class="keyword">int</span> tmp=Max(ans[l]);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=l+<span class="number">1</span>;i&lt;r;i++) ans[i]=tmp;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</div><div class="line">    cal(mid);</div><div class="line">    dc(l,mid); dc(mid,r);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    n=read(); <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) mx[i][<span class="number">0</span>]=mn[i][<span class="number">0</span>]=read();</div><div class="line">    pre();</div><div class="line">    cal(<span class="number">2</span>); cal(n); dc(<span class="number">2</span>,n);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans[i]);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;相关链接&quot;&gt;&lt;a href=&quot;#相关链接&quot; class=&quot;headerlink&quot; title=&quot;相关链接&quot;&gt;&lt;/a&gt;相关链接&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://uoj.ac/contest/35/problem/245&quot; ta
    
    </summary>
    
      <category term="题目精选" scheme="http://yoursite.com/categories/%E9%A2%98%E7%9B%AE%E7%B2%BE%E9%80%89/"/>
    
    
      <category term="近似算法" scheme="http://yoursite.com/tags/%E8%BF%91%E4%BC%BC%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>「51nod 1737」配对</title>
    <link href="http://yoursite.com/2017/01/11/51nod1737/"/>
    <id>http://yoursite.com/2017/01/11/51nod1737/</id>
    <published>2017-01-10T16:00:00.000Z</published>
    <updated>2017-04-16T02:52:44.647Z</updated>
    
    <content type="html"><![CDATA[<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><blockquote>
<p><a href="https://www.51nod.com/onlineJudge/questionCode.html#!problemId=1737" target="_blank" rel="external">题目传送门</a></p>
</blockquote>
<h3 id="解题报告"><a href="#解题报告" class="headerlink" title="解题报告"></a>解题报告</h3><blockquote>
<p>其实是个很简单的题，但还是被绊了。这充分说明现在连简单题都做不来了555<br>单独考虑每条边。每个点对答案的贡献就是它被使用的次数乘以权值，而每条边的系数其实是互不影响的，而系数最大值就是它两端的点个数的min，把这个算出来加起来就完了。<br>为什么这样是对的，即为什么每个系数互不影响，因为完全可以构建一个以重心为中心的菊花图，那样构建完全可以满足每个点系数最大化。<br>感觉这个思维方式硬伤啊。。多做点题吧。。</p>
</blockquote>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>; <span class="keyword">char</span> a=getchar();</div><div class="line">    <span class="keyword">while</span>(a&lt;<span class="string">'0'</span> || a&gt;<span class="string">'9'</span>) &#123;<span class="keyword">if</span>(a==<span class="string">'-'</span>) f=<span class="number">-1</span>; a=getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(a&gt;=<span class="string">'0'</span> &amp;&amp; a&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+a-<span class="string">'0'</span>,a=getchar();</div><div class="line">    <span class="keyword">return</span> x*f;</div><div class="line">&#125;</div><div class="line"><span class="keyword">struct</span> edges&#123;</div><div class="line">    <span class="keyword">int</span> to,v,next;</div><div class="line">&#125;e[<span class="number">2</span>*N];</div><div class="line"><span class="keyword">int</span> n,head[N],cnt=<span class="number">1</span>,son[N];</div><div class="line">LL ans;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> u=read(),v=read(),c=read();</div><div class="line">    e[++cnt]=(edges)&#123;v,c,head[u]&#125;;head[u]=cnt;</div><div class="line">    e[++cnt]=(edges)&#123;u,c,head[v]&#125;;head[v]=cnt;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> fa)</span></span>&#123;</div><div class="line">    son[x]=<span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=e[i].next)&#123;</div><div class="line">        <span class="keyword">if</span>(e[i].to==fa) <span class="keyword">continue</span>;</div><div class="line">        dfs(e[i].to,x); son[x]+=son[e[i].to];</div><div class="line">        ans+=(LL)min(son[e[i].to],n-son[e[i].to])*e[i].v;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    n=read();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++) insert();</div><div class="line">    dfs(<span class="number">1</span>,<span class="number">0</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;相关链接&quot;&gt;&lt;a href=&quot;#相关链接&quot; class=&quot;headerlink&quot; title=&quot;相关链接&quot;&gt;&lt;/a&gt;相关链接&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.51nod.com/onlineJudge/questi
    
    </summary>
    
      <category term="题目精选" scheme="http://yoursite.com/categories/%E9%A2%98%E7%9B%AE%E7%B2%BE%E9%80%89/"/>
    
    
      <category term="贪心" scheme="http://yoursite.com/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>「UTR#2」T1</title>
    <link href="http://yoursite.com/2017/01/09/UTRT1/"/>
    <id>http://yoursite.com/2017/01/09/UTRT1/</id>
    <published>2017-01-08T16:00:00.000Z</published>
    <updated>2017-04-16T02:48:09.383Z</updated>
    
    <content type="html"><![CDATA[<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><blockquote>
<p><a href="http://uoj.ac/contest/36/problem/278" target="_blank" rel="external">题目传送门</a></p>
</blockquote>
<h3 id="解题报告"><a href="#解题报告" class="headerlink" title="解题报告"></a>解题报告</h3><blockquote>
<p>题意：给定一个n，以下n个数（假定为fi），要求构造一个n个数的序列，使得这个序列每一个位置的最大上升子序列的长度等于对应的fi。<br>其实这道题是个很简单的题，之前7月也在BC上做到过，为什么要写呢，因为思维过程还是挺好的。<br>考虑我们要构造这么一个序列，每个位置要满足什么条件呢？首先，对于一个位置，这个位置之前的那些位置，如果它们的fi大于等于这个位置上的fi，那么我们给这个位置放的数一定要小于前面那些位置上的数，而对于小于这个位置的fi的那些位置，我们的值又要大于它们的值，也就是说安排后我们要保证fi大的位置分配给它的数一定要大。那么对于两个fi相同的位置，怎么办呢？一定是位置靠后的那个分配的小。为什么呢，很显然，如果大了的话，就可以使最大上升子序列的长度加1了。<br>所以这道题做法就出来了：以fi为第一关键字升序，下标为第二关键字降序，排一道序，然后对应地填上1-n这些数就好了。</p>
</blockquote>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100005</span></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>; <span class="keyword">char</span> a=getchar();</div><div class="line">    <span class="keyword">while</span>(a&lt;<span class="string">'0'</span> || a&gt;<span class="string">'9'</span>) &#123;<span class="keyword">if</span>(a==<span class="string">'-'</span>) f=<span class="number">-1</span>; a=getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(a&gt;=<span class="string">'0'</span> &amp;&amp; a&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+a-<span class="string">'0'</span>,a=getchar();</div><div class="line">    <span class="keyword">return</span> x*f;</div><div class="line">&#125;</div><div class="line"><span class="keyword">struct</span> data&#123;</div><div class="line">    <span class="keyword">int</span> num,pos;</div><div class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> data&amp; w)<span class="keyword">const</span>&#123;</div><div class="line">        <span class="keyword">if</span>(num==w.num) <span class="keyword">return</span> pos&gt;w.pos;</div><div class="line">        <span class="keyword">return</span> num&lt;w.num;</div><div class="line">    &#125;</div><div class="line">&#125;a[N];</div><div class="line"><span class="keyword">int</span> n,ans[N];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    n=read();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line">    a[i].num=read(),a[i].pos=i;</div><div class="line">    sort(a+<span class="number">1</span>,a+<span class="number">1</span>+n);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line">    ans[a[i].pos]=i;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d "</span>,ans[i]);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;相关链接&quot;&gt;&lt;a href=&quot;#相关链接&quot; class=&quot;headerlink&quot; title=&quot;相关链接&quot;&gt;&lt;/a&gt;相关链接&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://uoj.ac/contest/36/problem/278&quot; ta
    
    </summary>
    
      <category term="题目精选" scheme="http://yoursite.com/categories/%E9%A2%98%E7%9B%AE%E7%B2%BE%E9%80%89/"/>
    
    
      <category term="构造" scheme="http://yoursite.com/tags/%E6%9E%84%E9%80%A0/"/>
    
  </entry>
  
  <entry>
    <title>「BZOJ2006」「NOI2010」超级钢琴</title>
    <link href="http://yoursite.com/2017/01/04/bzoj2006/"/>
    <id>http://yoursite.com/2017/01/04/bzoj2006/</id>
    <published>2017-01-03T16:00:00.000Z</published>
    <updated>2017-04-16T02:37:05.542Z</updated>
    
    <content type="html"><![CDATA[<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><blockquote>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=2006" target="_blank" rel="external">题目传送门</a></p>
</blockquote>
<h3 id="解题报告"><a href="#解题报告" class="headerlink" title="解题报告"></a>解题报告</h3><blockquote>
<p>刚拿到题的时候想的是，对于每个点，如果以它开头，那么之后的L-1个一定被选，剩下的R-L个可选，对这一部分进行最大前缀和就好啦！用主席树搞搞，建树的时候维护下就好了。<br>但有个问题，以这个区间为开头的情况不止一种，这种做法确实能求出以它开头的最大值，那次大值，k大值呢？这也是有可能计入答案的。所以不行。<br>正解是，对于一个位置，如果我们考虑以它结尾，这个区间等于它的前缀和减去前面一个位置的前缀和，其中位置i满足i离这个位置不小于L不超过R。对于这个位置，我们只需要找这个区间内的区间k大，用这个位置前缀和减掉就好了，然后去求区间k+1大。放入一个堆中取k次就好。</p>
</blockquote>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 500005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>; <span class="keyword">char</span> a=getchar();</div><div class="line">    <span class="keyword">while</span>(a&lt;<span class="string">'0'</span> || a&gt;<span class="string">'9'</span>) &#123;<span class="keyword">if</span>(a==<span class="string">'-'</span>) f=<span class="number">-1</span>; a=getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(a&gt;=<span class="string">'0'</span> &amp;&amp; a&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+a-<span class="string">'0'</span>,a=getchar();</div><div class="line">    <span class="keyword">return</span> x*f;</div><div class="line">&#125;</div><div class="line">LL sum[N];</div><div class="line"><span class="keyword">struct</span> data&#123;</div><div class="line">    <span class="keyword">int</span> num,k;LL val;</div><div class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> data&amp; w)<span class="keyword">const</span>&#123;</div><div class="line">        <span class="keyword">return</span> val&lt;w.val;</div><div class="line">    &#125;</div><div class="line">&#125;t;</div><div class="line">priority_queue&lt;data&gt;q;</div><div class="line"><span class="keyword">namespace</span> Chairman_Tree&#123;</div><div class="line">    <span class="keyword">int</span> root[N],size;</div><div class="line">    <span class="keyword">struct</span> ct&#123;</div><div class="line">        <span class="keyword">int</span> son[<span class="number">2</span>],sz;</div><div class="line">    &#125;tr[<span class="number">20000005</span>];</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span>&amp; y,LL l,LL r,LL v)</span></span>&#123;</div><div class="line">        y=++size; tr[y].sz=tr[x].sz+<span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span>(l==r) <span class="keyword">return</span>;</div><div class="line">        <span class="built_in">memcpy</span>(tr[y].son,tr[x].son,<span class="keyword">sizeof</span>(tr[y].son));</div><div class="line">        <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span>(mid&gt;=v) insert(tr[x].son[<span class="number">0</span>],tr[y].son[<span class="number">0</span>],l,mid,v);</div><div class="line">        <span class="keyword">else</span> insert(tr[x].son[<span class="number">1</span>],tr[y].son[<span class="number">1</span>],mid+<span class="number">1</span>,r,v);</div><div class="line">    &#125;</div><div class="line">    <span class="function">LL <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,LL l,LL r,<span class="keyword">int</span> k)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(tr[y].sz-tr[x].sz&lt;k) <span class="keyword">return</span> <span class="number">1e9</span>;</div><div class="line">        <span class="keyword">if</span>(l==r) <span class="keyword">return</span> l;</div><div class="line">        <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>,s=tr[tr[y].son[<span class="number">0</span>]].sz-tr[tr[x].son[<span class="number">0</span>]].sz;</div><div class="line">        <span class="keyword">if</span>(k&lt;=s) <span class="keyword">return</span> query(tr[x].son[<span class="number">0</span>],tr[y].son[<span class="number">0</span>],l,mid,k);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">return</span> query(tr[x].son[<span class="number">1</span>],tr[y].son[<span class="number">1</span>],mid+<span class="number">1</span>,r,k-s);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CT Chairman_Tree</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> L -500000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> R 500000005</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> n=read(),k=read(),l=read(),r=read();</div><div class="line">    LL ans=<span class="number">0</span>; CT::insert(<span class="number">0</span>,CT::root[<span class="number">0</span>],L,R,<span class="number">0</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) sum[i]=sum[i<span class="number">-1</span>]+read();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) CT::insert(CT::root[i<span class="number">-1</span>],CT::root[i],L,R,sum[i]);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;=n;i++)&#123;</div><div class="line">        <span class="keyword">int</span> ri=i-l,le=i-r<span class="number">-1</span>;</div><div class="line">        LL tmp;</div><div class="line">        <span class="keyword">if</span>(le&lt;<span class="number">0</span>) tmp=CT::query(<span class="number">0</span>,CT::root[ri],L,R,<span class="number">1</span>);</div><div class="line">        <span class="keyword">else</span> tmp=CT::query(CT::root[le],CT::root[ri],L,R,<span class="number">1</span>);</div><div class="line">        q.push((data)&#123;i,<span class="number">1</span>,sum[i]-tmp&#125;);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span>(k--)&#123;</div><div class="line">        t=q.top(); q.pop();</div><div class="line">        ans+=t.val;</div><div class="line">        <span class="keyword">int</span> ri=t.num-l,le=t.num-r<span class="number">-1</span>; LL tmp;</div><div class="line">        <span class="keyword">if</span>(le&lt;<span class="number">0</span>) tmp=CT::query(<span class="number">0</span>,CT::root[ri],L,R,t.k+<span class="number">1</span>);</div><div class="line">        <span class="keyword">else</span> tmp=CT::query(CT::root[le],CT::root[ri],L,R,t.k+<span class="number">1</span>);</div><div class="line">        q.push((data)&#123;t.num,t.k+<span class="number">1</span>,sum[t.num]-tmp&#125;);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;ans;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;相关链接&quot;&gt;&lt;a href=&quot;#相关链接&quot; class=&quot;headerlink&quot; title=&quot;相关链接&quot;&gt;&lt;/a&gt;相关链接&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.lydsy.com/JudgeOnline/problem
    
    </summary>
    
      <category term="题目精选" scheme="http://yoursite.com/categories/%E9%A2%98%E7%9B%AE%E7%B2%BE%E9%80%89/"/>
    
    
      <category term="堆" scheme="http://yoursite.com/tags/%E5%A0%86/"/>
    
      <category term="可持久化线段树" scheme="http://yoursite.com/tags/%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>「BZOJ4571」「SCOI2016」美味</title>
    <link href="http://yoursite.com/2017/01/04/bzoj4571/"/>
    <id>http://yoursite.com/2017/01/04/bzoj4571/</id>
    <published>2017-01-03T16:00:00.000Z</published>
    <updated>2017-04-16T02:42:51.018Z</updated>
    
    <content type="html"><![CDATA[<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><blockquote>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=4571" target="_blank" rel="external">题目传送门</a></p>
</blockquote>
<h3 id="解题报告"><a href="#解题报告" class="headerlink" title="解题报告"></a>解题报告</h3><blockquote>
<p>如果没有加法的话，这就是裸的可持久化trie，但是有加法后就很恶心了，怎么办？<br>一般来说异或总是每位独立，然后就进行贪心。这道题我们单独考虑每一位能否为1，贪心去搞。<br>具体来说，如果x当前一位上是1，那么我们能使这位为1的数的取值区间在a，a|（（i&lt;&lt;1）-1）中（其中a是已经确定了的高位，i为当前位），我们只要看是否存在有这么一个数，就能知道能否使得这个位置为1了。0的情况类似，不多加赘述。<br>别忘了最后a要异或x输出，被坑了一发。</p>
</blockquote>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 200005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M 1000005</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="keyword">inline</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>; <span class="keyword">char</span> a=getchar();</div><div class="line">    <span class="keyword">while</span>(a&lt;<span class="string">'0'</span> || a&gt;<span class="string">'9'</span>) &#123;<span class="keyword">if</span>(a==<span class="string">'-'</span>) f=<span class="number">-1</span>; a=getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(a&gt;=<span class="string">'0'</span> &amp;&amp; a&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+a-<span class="string">'0'</span>,a=getchar();</div><div class="line">    <span class="keyword">return</span> x*f;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> n,m;</div><div class="line"><span class="keyword">namespace</span> Chairman_Tree&#123;</div><div class="line">    <span class="keyword">struct</span> ct&#123;</div><div class="line">        <span class="keyword">int</span> son[<span class="number">2</span>],sz;</div><div class="line">    &#125;tr[<span class="number">10000005</span>];</div><div class="line">    <span class="keyword">int</span> size,root[N];</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span>&amp; y,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> v)</span></span>&#123;</div><div class="line">        y=++size; tr[y].sz=tr[x].sz+<span class="number">1</span>;</div><div class="line">        <span class="built_in">memcpy</span>(tr[y].son,tr[x].son,<span class="keyword">sizeof</span>(tr[x].son));</div><div class="line">        <span class="keyword">if</span>(l==r) <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span>(v&lt;=mid) insert(tr[x].son[<span class="number">0</span>],tr[y].son[<span class="number">0</span>],l,mid,v);</div><div class="line">        <span class="keyword">else</span> insert(tr[x].son[<span class="number">1</span>],tr[y].son[<span class="number">1</span>],mid+<span class="number">1</span>,r,v);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(l==L &amp;&amp; r==R) <span class="keyword">return</span> tr[y].sz&gt;tr[x].sz;</div><div class="line">        <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span>(mid&gt;=R) <span class="keyword">return</span> query(tr[x].son[<span class="number">0</span>],tr[y].son[<span class="number">0</span>],l,mid,L,R);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(mid&lt;L) <span class="keyword">return</span> query(tr[x].son[<span class="number">1</span>],tr[y].son[<span class="number">1</span>],mid+<span class="number">1</span>,r,L,R);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">return</span> query(tr[x].son[<span class="number">0</span>],tr[y].son[<span class="number">0</span>],l,mid,L,mid) || query(tr[x].son[<span class="number">1</span>],tr[y].son[<span class="number">1</span>],mid+<span class="number">1</span>,r,mid+<span class="number">1</span>,R);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CT Chairman_Tree</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    n=read(); m=read();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) CT::insert(CT::root[i<span class="number">-1</span>],CT::root[i],<span class="number">0</span>,M,read());</div><div class="line">    <span class="keyword">while</span>(m--)&#123;</div><div class="line">        <span class="keyword">int</span> b=read(),x=read(),L=read(),R=read(),l,r,a=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">17</span>;i&gt;=<span class="number">0</span>;i--)</div><div class="line">            <span class="keyword">if</span>(b&amp;(<span class="number">1</span>&lt;&lt;i))&#123;</div><div class="line">                l=max(<span class="number">0</span>,a-x); r=(a|((<span class="number">1</span>&lt;&lt;i)<span class="number">-1</span>))-x;</div><div class="line">                <span class="keyword">if</span>(!r || !CT::query(CT::root[L<span class="number">-1</span>],CT::root[R],<span class="number">0</span>,M,l,r)) a|=(<span class="number">1</span>&lt;&lt;i);</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                a|=(<span class="number">1</span>&lt;&lt;i);</div><div class="line">                l=max(<span class="number">0</span>,a-x); r=(a|((<span class="number">1</span>&lt;&lt;i)<span class="number">-1</span>))-x;</div><div class="line">                <span class="keyword">if</span>(!r || !CT::query(CT::root[L<span class="number">-1</span>],CT::root[R],<span class="number">0</span>,M,l,r)) a^=(<span class="number">1</span>&lt;&lt;i); </div><div class="line">            &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,a^b);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;相关链接&quot;&gt;&lt;a href=&quot;#相关链接&quot; class=&quot;headerlink&quot; title=&quot;相关链接&quot;&gt;&lt;/a&gt;相关链接&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.lydsy.com/JudgeOnline/problem
    
    </summary>
    
      <category term="题目精选" scheme="http://yoursite.com/categories/%E9%A2%98%E7%9B%AE%E7%B2%BE%E9%80%89/"/>
    
    
      <category term="可持久化线段树" scheme="http://yoursite.com/tags/%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>「BZOJ3600」没有人的算术</title>
    <link href="http://yoursite.com/2017/01/03/bzoj3600/"/>
    <id>http://yoursite.com/2017/01/03/bzoj3600/</id>
    <published>2017-01-02T16:00:00.000Z</published>
    <updated>2017-04-16T02:35:02.077Z</updated>
    
    <content type="html"><![CDATA[<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><blockquote>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=3600" target="_blank" rel="external">题目传送门</a></p>
</blockquote>
<h3 id="解题报告"><a href="#解题报告" class="headerlink" title="解题报告"></a>解题报告</h3><blockquote>
<p>膜拜VFK大爷的神题！<br>其实一开始思路挺清楚的，如果我们能做到用一个实数去代表“数”，这就是裸的动态区间最值查询。<br>关键是怎么用实数去表示。如果我们单纯的把两个数进行O（1）运算去得到一个实数，这样很轻松就会被卡掉，因为无论是longlong还是double都是有限度的。怎么做呢？<br>这里有一个技巧：我们维护一个重量平衡树，每个节点管辖一个区间，这个区间的中位数为这个点的权值，而它的左儿子管辖左半边，右儿子管辖右半边。<br>问题来了，这不是差不多吗？并不是这样。因为我们会重构，树高有保证，所以我们肯定能表示出每一个数，而且还是绰绰有余。<br>重量平衡树可以用非旋转treap或替罪羊树。<br>(吐槽一句，第一次写替罪羊树，真的好TM难写啊还套了个线段树而且我常数大的飞起，写了一整天)</p>
</blockquote>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 500005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></div><div class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    LL x=<span class="number">0</span>,f=<span class="number">1</span>; <span class="keyword">char</span> a=getchar();</div><div class="line">    <span class="keyword">while</span>(a&lt;<span class="string">'0'</span> || a&gt;<span class="string">'9'</span>) &#123;<span class="keyword">if</span>(a==<span class="string">'-'</span>) f=<span class="number">-1</span>; a=getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(a&gt;=<span class="string">'0'</span> &amp;&amp; a&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+a-<span class="string">'0'</span>,a=getchar();</div><div class="line">    <span class="keyword">return</span> x*f;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> n,m; <span class="keyword">char</span> st[<span class="number">5</span>];</div><div class="line">LL MX;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SGT Scapegoat_Tree</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ST Segment_Tree</span></div><div class="line"></div><div class="line"><span class="keyword">namespace</span> Scapegoat_Tree&#123;</div><div class="line">    <span class="meta">#<span class="meta-keyword">define</span> eps 1e-12</span></div><div class="line">    <span class="keyword">const</span> <span class="keyword">double</span> alpha=<span class="number">0.75</span>;</div><div class="line">    <span class="keyword">int</span> ltst,wh,size=<span class="number">1</span>,tmp[N],root=<span class="number">1</span>,anew;</div><div class="line">    <span class="keyword">struct</span> sgt&#123;</div><div class="line">        LL l,r,mid; <span class="keyword">int</span> fir,sec;</div><div class="line">        <span class="keyword">int</span> son[<span class="number">2</span>],sz;</div><div class="line">    &#125;tr[N];</div><div class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">dcmp</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="built_in">fabs</span>((<span class="keyword">double</span>)tr[x].sz*alpha-(<span class="keyword">double</span>)tr[y].sz)&lt;eps) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">return</span> (<span class="keyword">double</span>)tr[x].sz*alpha&gt;(<span class="keyword">double</span>)tr[y].sz?<span class="number">1</span>:<span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">        tr[x].sz=tr[tr[x].son[<span class="number">0</span>]].sz+tr[tr[x].son[<span class="number">1</span>]].sz+<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">balance</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> dcmp(x,tr[x].son[<span class="number">0</span>])&gt;=<span class="number">0</span> &amp;&amp; dcmp(x,tr[x].son[<span class="number">1</span>])&gt;=<span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">travel</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(!x) <span class="keyword">return</span>;</div><div class="line">        travel(tr[x].son[<span class="number">0</span>]);</div><div class="line">        tmp[++tmp[<span class="number">0</span>]]=x;</div><div class="line">        travel(tr[x].son[<span class="number">1</span>]);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rebuild</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,LL L,LL R)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(l&gt;r) &#123;x=<span class="number">0</span>; <span class="keyword">return</span>;&#125;</div><div class="line">        <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</div><div class="line">        LL M=(L+R)/<span class="number">2</span>;</div><div class="line">        x=tmp[mid]; tr[x].l=L; tr[x].r=R; tr[x].mid=M;</div><div class="line">        <span class="keyword">if</span>(l==r) &#123;tr[x].sz=<span class="number">1</span>; tr[x].son[<span class="number">0</span>]=<span class="number">0</span>; tr[x].son[<span class="number">1</span>]=<span class="number">0</span>; <span class="keyword">return</span>;&#125;</div><div class="line">        rebuild(tr[x].son[<span class="number">0</span>],l,mid<span class="number">-1</span>,L,M); rebuild(tr[x].son[<span class="number">1</span>],mid+<span class="number">1</span>,r,M,R);</div><div class="line">        update(x);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span>&amp; x,LL L,LL R,<span class="keyword">int</span> fir,<span class="keyword">int</span> sec)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(!x) &#123;x=++size; anew=x;tr[x]=(sgt)&#123;L,R,(L+R)/<span class="number">2</span>,fir,sec,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;; <span class="keyword">return</span>;&#125;</div><div class="line">        <span class="keyword">if</span>(tr[tr[x].fir].mid==tr[fir].mid &amp;&amp; tr[tr[x].sec].mid==tr[sec].mid) &#123;anew=x; <span class="keyword">return</span>;&#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(tr[tr[x].fir].mid==tr[fir].mid)&#123;</div><div class="line">            <span class="keyword">if</span>(tr[tr[x].sec].mid&gt;tr[sec].mid) insert(tr[x].son[<span class="number">0</span>],tr[x].l,tr[x].mid,fir,sec);</div><div class="line">            <span class="keyword">else</span> insert(tr[x].son[<span class="number">1</span>],tr[x].mid,tr[x].r,fir,sec);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">if</span>(tr[tr[x].fir].mid&gt;tr[fir].mid) insert(tr[x].son[<span class="number">0</span>],tr[x].l,tr[x].mid,fir,sec);</div><div class="line">            <span class="keyword">else</span> insert(tr[x].son[<span class="number">1</span>],tr[x].mid,tr[x].r,fir,sec);</div><div class="line">        &#125;</div><div class="line">        update(x);</div><div class="line">        <span class="keyword">if</span>(tr[x].son[<span class="number">0</span>] &amp;&amp; !balance(tr[x].son[<span class="number">0</span>])) ltst=x,wh=<span class="number">0</span>;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(tr[x].son[<span class="number">1</span>] &amp;&amp; !balance(tr[x].son[<span class="number">1</span>])) ltst=x,wh=<span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span>(x==root &amp;&amp; !balance(x)) tmp[<span class="number">0</span>]=<span class="number">0</span>,travel(root),rebuild(root,<span class="number">1</span>,tmp[<span class="number">0</span>],<span class="number">1</span>,MX);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">namespace</span> Segment_Tree&#123;</div><div class="line">    <span class="keyword">int</span> a[N];</div><div class="line">    <span class="keyword">struct</span> seg&#123;</div><div class="line">        <span class="keyword">int</span> l,r,son[<span class="number">2</span>],mx_pos,num;         </div><div class="line">    &#125;tr[N];</div><div class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(SGT::tr[tr[tr[tr[x].son[<span class="number">0</span>]].mx_pos].num].mid==SGT::tr[tr[tr[tr[x].son[<span class="number">1</span>]].mx_pos].num].mid)&#123;</div><div class="line">            <span class="keyword">int</span> le=tr[tr[x].son[<span class="number">0</span>]].mx_pos,ri=tr[tr[x].son[<span class="number">1</span>]].mx_pos;</div><div class="line">            tr[x].mx_pos=tr[le].l&lt;tr[ri].l?le:ri;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(SGT::tr[tr[tr[tr[x].son[<span class="number">0</span>]].mx_pos].num].mid&gt;SGT::tr[tr[tr[tr[x].son[<span class="number">1</span>]].mx_pos].num].mid) </div><div class="line">        tr[x].mx_pos=tr[tr[x].son[<span class="number">0</span>]].mx_pos;</div><div class="line">        <span class="keyword">else</span> tr[x].mx_pos=tr[tr[x].son[<span class="number">1</span>]].mx_pos;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(l==r) &#123;tr[x]=(seg)&#123;l,r,<span class="number">0</span>,<span class="number">0</span>,x,<span class="number">1</span>&#125;;<span class="keyword">return</span>;&#125;</div><div class="line">        <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>; tr[x].l=l; tr[x].r=r;</div><div class="line">        tr[x].son[<span class="number">0</span>]=x&lt;&lt;<span class="number">1</span>; build(tr[x].son[<span class="number">0</span>],l,mid);</div><div class="line">        tr[x].son[<span class="number">1</span>]=x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>; build(tr[x].son[<span class="number">1</span>],mid+<span class="number">1</span>,r);</div><div class="line">        update(x);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> ai,<span class="keyword">int</span> v)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> l=tr[x].l,r=tr[x].r;</div><div class="line">        <span class="keyword">if</span>(l==r) &#123;tr[x].num=v; <span class="keyword">return</span>;&#125;</div><div class="line">        <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span>(ai&lt;=mid) modify(tr[x].son[<span class="number">0</span>],ai,v);</div><div class="line">        <span class="keyword">else</span> modify(tr[x].son[<span class="number">1</span>],ai,v);</div><div class="line">        update(x);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> l=tr[x].l,r=tr[x].r;</div><div class="line">        <span class="keyword">if</span>(l==L &amp;&amp; r==R) <span class="keyword">return</span> tr[x].mx_pos;</div><div class="line">        <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span>(R&lt;=mid) <span class="keyword">return</span> query(tr[x].son[<span class="number">0</span>],L,R);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(mid&lt;L) <span class="keyword">return</span> query(tr[x].son[<span class="number">1</span>],L,R);</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">int</span> le=query(tr[x].son[<span class="number">0</span>],L,mid),ri=query(tr[x].son[<span class="number">1</span>],mid+<span class="number">1</span>,R);</div><div class="line">            <span class="keyword">if</span>(SGT::tr[tr[le].num].mid==SGT::tr[tr[ri].num].mid) <span class="keyword">return</span> tr[le].l&lt;tr[ri].l?le:ri;</div><div class="line">            <span class="keyword">return</span> SGT::tr[tr[le].num].mid&gt;SGT::tr[tr[ri].num].mid?le:ri;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    n=read(); m=read(); MX=<span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">60</span>;i++) MX*=<span class="number">2</span>;</div><div class="line">    ST::build(<span class="number">1</span>,<span class="number">1</span>,n); SGT::tr[<span class="number">1</span>]=(SGT::sgt)&#123;<span class="number">1</span>,MX,(<span class="number">1</span>+MX)/<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) ST::a[i]=<span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(m--)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,st); <span class="keyword">int</span> k,l=read(),r=read();</div><div class="line">        <span class="keyword">if</span>(st[<span class="number">0</span>]==<span class="string">'C'</span>)&#123;</div><div class="line">            k=read(); </div><div class="line">            l=ST::a[l]; r=ST::a[r]; SGT::ltst=<span class="number">0</span>; SGT::insert(SGT::root,<span class="number">1</span>,MX,l,r);</div><div class="line">            <span class="keyword">if</span>(SGT::ltst) &#123;</div><div class="line">                SGT::tmp[<span class="number">0</span>]=<span class="number">0</span>; SGT::travel(SGT::tr[SGT::ltst].son[SGT::wh]); </div><div class="line">                LL L=SGT::tr[SGT::tr[SGT::ltst].son[SGT::wh]].l,R=SGT::tr[SGT::tr[SGT::ltst].son[SGT::wh]].r;</div><div class="line">                SGT::rebuild(SGT::tr[SGT::ltst].son[SGT::wh],<span class="number">1</span>,SGT::tmp[<span class="number">0</span>],L,R);</div><div class="line">            &#125;</div><div class="line">            ST::modify(<span class="number">1</span>,k,SGT::anew),ST::a[k]=SGT::anew;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">int</span> ans=ST::query(<span class="number">1</span>,l,r);</div><div class="line">            ans=ST::tr[ans].l;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;相关链接&quot;&gt;&lt;a href=&quot;#相关链接&quot; class=&quot;headerlink&quot; title=&quot;相关链接&quot;&gt;&lt;/a&gt;相关链接&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.lydsy.com/JudgeOnline/problem
    
    </summary>
    
      <category term="题目精选" scheme="http://yoursite.com/categories/%E9%A2%98%E7%9B%AE%E7%B2%BE%E9%80%89/"/>
    
    
      <category term="线段树" scheme="http://yoursite.com/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="平衡树_替罪羊树" scheme="http://yoursite.com/tags/%E5%B9%B3%E8%A1%A1%E6%A0%91-%E6%9B%BF%E7%BD%AA%E7%BE%8A%E6%A0%91/"/>
    
  </entry>
  
</feed>
