<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[「Codeforces703D」Mishka and Interesting sum]]></title>
      <url>/2017/04/13/CF703D/</url>
      <content type="html"><![CDATA[<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><blockquote>
<p><a href="http://codeforces.com/contest/703/problem/D" target="_blank" rel="external">题目传送门</a></p>
</blockquote>
<h3 id="解题报告"><a href="#解题报告" class="headerlink" title="解题报告"></a>解题报告</h3><blockquote>
<p>首先很显然，每一次询问的答案，等于这个区间所有不同元素异或和异或上区间异或和。（因为出现偶数次的对区间异或和贡献为0，此时剩下的是出现奇数次的数，在取个补集即为答案）<br>区间异或和前缀和就好了，那问题转化为求区间不同元素异或和。由于这个东西区间合并很困难，所以在线算法是比较不优雅的。那我们考虑离线算法。我们按询问的右端点为第一关键字排序，然后处理到目前这个右端点位置的last数组，last数组定义为每个数最后出现的位置，然后给每个值对应的last附上它的值，这样我们一个区间求异或和可以得到区间不同元素异或和。树状数组一发就好了。</p>
</blockquote>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 1000000</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) ((x) &amp; -(x))</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">read</span><span class="params">()</span> </span>&#123;</div><div class="line">    LL x = <span class="number">0</span>, f = <span class="number">1</span>; <span class="keyword">char</span> a = getchar();</div><div class="line">    <span class="keyword">while</span>(a &lt; <span class="string">'0'</span> || a &gt; <span class="string">'9'</span>) &#123; <span class="keyword">if</span>(a == <span class="string">'-'</span>) f = <span class="number">-1</span>; a = getchar(); &#125;</div><div class="line">    <span class="keyword">while</span>(a &gt;= <span class="string">'0'</span> &amp;&amp; a &lt;= <span class="string">'9'</span>) x = x * <span class="number">10</span> + a - <span class="string">'0'</span>, a = getchar();</div><div class="line">    <span class="keyword">return</span> x * f;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, a[N + <span class="number">5</span>], ans[N + <span class="number">5</span>], sum[N + <span class="number">5</span>], Q;</div><div class="line"><span class="keyword">int</span> fen[N + <span class="number">5</span>];</div><div class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; last;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> query &#123;</div><div class="line">    <span class="keyword">int</span> id, l, r;</div><div class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> query &amp; w) <span class="keyword">const</span> &#123;</div><div class="line">        <span class="keyword">return</span> r &lt; w.r;</div><div class="line">    &#125;</div><div class="line">&#125; q[N + <span class="number">5</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> val)</span> </span>&#123; <span class="keyword">if</span>(!pos) <span class="keyword">return</span>; <span class="keyword">for</span>(<span class="keyword">int</span> i = pos; i &lt;= n; i += lowbit(i)) fen[i] ^= val; &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">querysum</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = r; i; i -= lowbit(i)) ret ^= fen[i];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = l - <span class="number">1</span>; i; i -= lowbit(i)) ret ^= fen[i];</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    n = read();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) a[i] = read();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) sum[i] = sum[i - <span class="number">1</span>] ^ a[i];</div><div class="line">    Q = read();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= Q; i++) q[i].id = i, q[i].l = read(), q[i].r = read();</div><div class="line">    sort(q + <span class="number">1</span>, q + <span class="number">1</span> + Q);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> pos = <span class="number">1</span>, i = <span class="number">1</span>; i &lt;= Q; i++) &#123;</div><div class="line">        <span class="keyword">for</span>(; pos &lt;= q[i].r; pos++) &#123;</div><div class="line">            add(last[a[pos]], a[pos]);</div><div class="line">            last[a[pos]] = pos;</div><div class="line">            add(pos, a[pos]);</div><div class="line">        &#125;</div><div class="line">        ans[q[i].id] = querysum(q[i].l, q[i].r) ^ sum[q[i].l<span class="number">-1</span>] ^ sum[q[i].r];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= Q; i++) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans[i]);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题目精选 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 树状数组 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「Codeforces697D」Puzzle]]></title>
      <url>/2017/04/12/CF697D/</url>
      <content type="html"><![CDATA[<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><blockquote>
<p><a href="http://codeforces.com/contest/697/problem/D" target="_blank" rel="external">题目传送门</a></p>
</blockquote>
<h3 id="解题报告"><a href="#解题报告" class="headerlink" title="解题报告"></a>解题报告</h3><blockquote>
<p>考虑一个节点，其他兄弟节点对它有贡献当且仅当其他节点在它之前被遍历，概率是1/2的。<br>所以ans[x] = ans[fa] + 1 + sz[brother]  / 2;</p>
</blockquote>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100000</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">read</span><span class="params">()</span> </span>&#123;</div><div class="line">    LL x = <span class="number">0</span>, f = <span class="number">1</span>; <span class="keyword">char</span> a = getchar();</div><div class="line">    <span class="keyword">while</span>(a &lt; <span class="string">'0'</span> || a &gt; <span class="string">'9'</span>) &#123; <span class="keyword">if</span>(a == <span class="string">'-'</span>) f = <span class="number">-1</span>; a = getchar(); &#125;</div><div class="line">    <span class="keyword">while</span>(a &gt;= <span class="string">'0'</span> &amp;&amp; a &lt;= <span class="string">'9'</span>) x = x *<span class="number">10</span> + a - <span class="string">'0'</span>, a = getchar();</div><div class="line">    <span class="keyword">return</span> x * f;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, head[N + <span class="number">5</span>], sz[N + <span class="number">5</span>], cnt = <span class="number">1</span>;</div><div class="line"><span class="keyword">double</span> ans[N + <span class="number">5</span>];</div><div class="line"></div><div class="line"><span class="keyword">struct</span> edges&#123;</div><div class="line">    <span class="keyword">int</span> to, next;</div><div class="line">&#125;e[<span class="number">2</span> * N + <span class="number">5</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> u = x, v = read();</div><div class="line">    e[++cnt] = (edges) &#123;u, head[v]&#125;; head[v] = cnt;</div><div class="line">    e[++cnt] = (edges) &#123;v, head[u]&#125;; head[u] = cnt;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa)</span></span>&#123;</div><div class="line">    sz[x] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = head[x]; i; i = e[i].next) &#123;</div><div class="line">        <span class="keyword">if</span>(e[i].to == fa) <span class="keyword">continue</span>;</div><div class="line">        dfs(e[i].to, x)    ;</div><div class="line">        sz[x] += sz[e[i].to];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = head[x]; i; i = e[i].next) &#123;</div><div class="line">        <span class="keyword">if</span>(e[i].to == fa) <span class="keyword">continue</span>;        </div><div class="line">        ans[e[i].to] = <span class="number">1.0</span> * (sz[x] - <span class="number">1</span> - sz[e[i].to]) / <span class="number">2.0</span> + <span class="number">1.0</span> + ans[x];</div><div class="line">        Dfs(e[i].to, x);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    n = read();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) insert(i);</div><div class="line">    dfs(<span class="number">1</span>, <span class="number">0</span>);</div><div class="line">    ans[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    Dfs(<span class="number">1</span>, <span class="number">0</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">printf</span>(<span class="string">"%.7lf\n"</span>,ans[i]);</div><div class="line">    <span class="keyword">return</span>  <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题目精选 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 概率与期望 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SCOI2017酱油记]]></title>
      <url>/2017/04/07/scoi2017jyj/</url>
      <content type="html"><![CDATA[<h3 id="Day0"><a href="#Day0" class="headerlink" title="Day0"></a>Day0</h3><blockquote>
<p>虽然是8点30开始模拟赛，还是设了个7点的闹钟调节生物钟。结果硬生生睡到7点40。。。<br>打开题目：T1期望，直接弃掉（到现在都不会期望已经可以滚粗了。。）<br>T2一眼可做，恩，先写个暴力。然后写完，发现这狗东西不能调试（wuvin说可以编译选项里加-g，好吧学到了），然后输出调试，简直哔了狗了。。调了半天，恩，写正解线段树合并去了。。<br>T3看了一会，1e6怎么都要带2个log，发现可以离线，那就1个log吧。。但怎么都不可能做到线性啊！绝壁出题人的锅。。<br>时间不够了，不写了。。直接回酒店收拾东西准备撤退。。<br>本来说和曾老住一个酒店的，文老强制要求母上大人要全程陪同（文老：亲子互动的好时机啊！）于是在酒店大堂愉悦的水了一下午知乎等母上大人从都江堰过来。<br>和母上大人吃了晚饭后在神大兜了一圈，感觉心情变好了些，回来又遇到学妹（弟）加油，瞬间感觉BUFF（奶）上满，看看Modern family写一道题就准备着睡了吧。</p>
</blockquote>
<h3 id="Day1"><a href="#Day1" class="headerlink" title="Day1"></a>Day1</h3><blockquote>
<p>6点50起床吃早饭，来到神大，骑个小黄车呼哧呼哧到实验大楼，已经7点30。有点气紧，有点紧张，和noip一样。<br>走进考场，试了下机子，发现还是调试不起。。场外小哥来调了半天，最后告诉我只有开项目。。这哔狗的操作。。<br>T1看到有点慌，因为题意有点差错。然后看T2，好尼玛长啊。。不想写系列。。再看T3。。恩，我会写暴力。。<br>T1读懂之后就好说了，一个简单贪心，拿个堆搞搞就好了。T2太长真不想看，啃完题意写了个暴力不管了。T3研究了一会没啥思路，那写个暴力就行了吧。结果最后发现暴力很卡，随机数据都特么卡出屎，我卡了半天最后才卡到3.2秒，内心是极度悲伤的。。感觉只有130了。<br>到星巴克和wuvin和ZYQN大佬吃了点东西（考场上巧克力吃饱了），然而内心并不好受。这就是个中规中矩的分，真不算有竞争力。本来想回酒店睡一会，想想还是回神大等成绩吧。（毕竟这种像等高考一样的经历是少有的）回到神大自己绕着湖边一直走，内心挺煎熬的。这个时候有学妹安慰我，瞬间感觉人间真的温暖。感谢那些陪伴我在意我支持我的人。<br>回到实验楼，16点40左右出了成绩（贼TM慢）。一看，瞬间吃惊。<br>wuvin大佬很稳的220，算上noip就rank4了。<br>ihopenot大佬逆风翻盘系列，230强势扭转noip劣势<br>ZYQN大佬有点悲伤，有点炸。点个蜡烛。。<br>我中规中矩，不过T3很良心的没卡我暴力，最后烂大街的150。<br>感觉稍微歇了口气。不过仍然是任重道远。算了noip分之后我rank17，还是悬，只有靠后面翻盘了。<br>回来睡了一会，和母上大人出去吃饭了，打算回来写写题就睡了，希望明天好运吧。</p>
</blockquote>
<h3 id="Day2"><a href="#Day2" class="headerlink" title="Day2"></a>Day2</h3><blockquote>
<p>晚上没睡好。。还是7点30到实验大楼下。。<br>领取装备巧克力X2,矿泉水X1，准备上机（这是怪物猎人吗）<br>T1期望。。。完了完了死穴被考了（后来发现是普及组难度内心是狂喜的。。。）<br>T2 RMQ+并查集。。。然而考场上抽掉了，最后玄学的挂0（自己弱啊）<br>T3 自己瞎YY了个广义回文树。。然而完全是瞎整系列。。。最后好像全场都没什么人写。。<br>最后D2 100分滚粗，翻盘无望。。。</p>
</blockquote>
<h3 id="Final"><a href="#Final" class="headerlink" title="Final"></a>Final</h3><blockquote>
<p>在这里恭喜rank4的wuvin大爷，以及惊险卡线但是仍然实现翻盘，经历可以写成跌宕起伏一波三折小说的ihopenot大佬。<br>给ZYQN大爷点个蜡烛。。虽然D2 160正常发挥但是D1比较可惜。。<br>以及致垃圾的不行的自己，就你这智商连文化课都不要读，滚去种田吧。<br>滚粗啦滚粗啦！SCOI2017滚粗啦！</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> OI相关 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[「BZOJ4730」「清华集训2016」「UOJ266」 Alice和Bob又在玩游戏]]></title>
      <url>/2017/03/22/bzoj4730/</url>
      <content type="html"><![CDATA[<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><blockquote>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=4730" target="_blank" rel="external">题目传送门</a></p>
</blockquote>
<h3 id="解题报告"><a href="#解题报告" class="headerlink" title="解题报告"></a>解题报告</h3><blockquote>
<p>比较神的一道题。<br>我们现在要解决的问题是怎么求解一棵子树的SG值，首先把根删掉的情况考虑，这很好办，直接把子树的sg异或起来就好，关键是如果删除点在子树里怎么办。<br>这里用到了一个巧妙的东西，trie。怎么会用这个呢？因为删除子树里的节点就相当于是子树里这种对应的情况再异或上外边子树的sg。但是我们不可能用一般的方法来存一棵子树里所有的sg。这个时候trie应运而生。我们处理子树之后，把它合并上来，就能得到当前节点的所有拓展局面的sg了。这里注意，合并子树前要先在子树上打一个tag（因为它是要异或上外面所有子树sg的）。<br>算法很清晰了，dfs下去，合并上来。这里的trie还要打tag。所有细节就这么多。</p>
</blockquote>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100005</span></div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">       LL x=<span class="number">0</span>,f=<span class="number">1</span>; <span class="keyword">char</span> a=getchar();</div><div class="line">       <span class="keyword">while</span>(a&lt;<span class="string">'0'</span> || a&gt;<span class="string">'9'</span>) &#123;<span class="keyword">if</span>(a==<span class="string">'-'</span>) f=<span class="number">-1</span>; a=getchar();&#125;</div><div class="line">       <span class="keyword">while</span>(a&gt;=<span class="string">'0'</span> &amp;&amp; a&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+a-<span class="string">'0'</span>,a=getchar();</div><div class="line">       <span class="keyword">return</span> x*f;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">int</span> n,m,T,bin[<span class="number">25</span>],head[N],cnt,id,tag[N*<span class="number">20</span>],rt[N],ls[N*<span class="number">20</span>],rs[N*<span class="number">20</span>],sg[N],sz[N*<span class="number">20</span>];</div><div class="line"><span class="keyword">bool</span> vis[N];</div><div class="line"> </div><div class="line"><span class="keyword">struct</span> edges&#123;</div><div class="line">    <span class="keyword">int</span> to,next;</div><div class="line">&#125;e[<span class="number">2</span>*N];</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> u=read(),v=read();</div><div class="line">    e[++cnt]=(edges)&#123;v,head[u]&#125;;head[u]=cnt;</div><div class="line">    e[++cnt]=(edges)&#123;u,head[v]&#125;;head[v]=cnt;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    bin[<span class="number">0</span>]=<span class="number">1</span>; <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">19</span>;i++) bin[i]=bin[i<span class="number">-1</span>]&lt;&lt;<span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> level)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(!tag[k]) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">if</span>(bin[level<span class="number">-1</span>]&amp;tag[k]) swap(ls[k],rs[k]);</div><div class="line">    tag[ls[k]]^=tag[k]; tag[rs[k]]^=tag[k];</div><div class="line">    tag[k]=<span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">reset</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) head[i]=sg[i]=rt[i]=<span class="number">0</span>,vis[i]=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=id;i++) tag[i]=ls[i]=rs[i]=sz[i]=<span class="number">0</span>;</div><div class="line">    cnt=<span class="number">1</span>; id=<span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span>&amp; k,<span class="keyword">int</span> x,<span class="keyword">int</span> level)</span></span>&#123; <span class="comment">// 0 is on the left</span></div><div class="line">    k=++id; sz[k]=<span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span>(!level) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">if</span>(x&amp;bin[level<span class="number">-1</span>]) ins(rs[k],x,level<span class="number">-1</span>);</div><div class="line">    <span class="keyword">else</span> ins(ls[k],x,level<span class="number">-1</span>);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> level)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(!x || !y) <span class="keyword">return</span> x|y;</div><div class="line">    pushdown(x,level); pushdown(y,level);</div><div class="line">    ls[x]=merge(ls[x],ls[y],level<span class="number">-1</span>); rs[x]=merge(rs[x],rs[y],level<span class="number">-1</span>);</div><div class="line">    sz[x]=sz[ls[x]]+sz[rs[x]]+(level?<span class="number">0</span>:<span class="number">1</span>);</div><div class="line">    <span class="keyword">return</span> x;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> fa)</span></span>&#123;</div><div class="line">    vis[x]=<span class="number">1</span>; <span class="keyword">int</span> t=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=e[i].next)&#123;</div><div class="line">        <span class="keyword">if</span>(fa==e[i].to) <span class="keyword">continue</span>;</div><div class="line">        dfs(e[i].to,x); t^=sg[e[i].to];</div><div class="line">    &#125;</div><div class="line">    ins(rt[x],t,<span class="number">19</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=e[i].next)&#123;</div><div class="line">        <span class="keyword">if</span>(fa==e[i].to) <span class="keyword">continue</span>;</div><div class="line">        tag[rt[e[i].to]]^=t^sg[e[i].to];</div><div class="line">        rt[x]=merge(rt[x],rt[e[i].to],<span class="number">19</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> now=rt[x],i=<span class="number">19</span>;i;i--)&#123; <span class="comment">// i is the i th digit int binary system</span></div><div class="line">        pushdown(now,i);</div><div class="line">        <span class="keyword">if</span>(sz[ls[now]]&lt;bin[i<span class="number">-1</span>]) now=ls[now];</div><div class="line">        <span class="keyword">else</span> sg[x]|=bin[i<span class="number">-1</span>],now=rs[now];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</div><div class="line">    n=read(); m=read(); <span class="keyword">int</span> ans=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) insert();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="keyword">if</span>(!vis[i]) dfs(i,<span class="number">0</span>),ans^=sg[i];</div><div class="line">    <span class="built_in">puts</span>(ans?<span class="string">"Alice"</span>:<span class="string">"Bob"</span>);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    init(); T=read();</div><div class="line">    <span class="keyword">while</span>(T--)&#123;</div><div class="line">        solve();</div><div class="line">        reset();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题目精选 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 博弈论 </tag>
            
            <tag> 可持久化Trie </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「BZOJ4311」向量]]></title>
      <url>/2017/03/21/bzoj4311/</url>
      <content type="html"><![CDATA[<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><blockquote>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=4311" target="_blank" rel="external">题目传送门</a></p>
</blockquote>
<h3 id="解题报告"><a href="#解题报告" class="headerlink" title="解题报告"></a>解题报告</h3><blockquote>
<p>线段树时间分治，每个区间做一个凸包，查询的时候到对应区间的凸包上三分。<br>(话说我这个可能有点问题，三分那一块R-L&gt;=20我才过的。。)</p>
</blockquote>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 300005</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">       LL x=<span class="number">0</span>,f=<span class="number">1</span>; <span class="keyword">char</span> a=getchar();</div><div class="line">       <span class="keyword">while</span>(a&lt;<span class="string">'0'</span> || a&gt;<span class="string">'9'</span>) &#123;<span class="keyword">if</span>(a==<span class="string">'-'</span>) f=<span class="number">-1</span>; a=getchar();&#125;</div><div class="line">       <span class="keyword">while</span>(a&gt;=<span class="string">'0'</span> &amp;&amp; a&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+a-<span class="string">'0'</span>,a=getchar();</div><div class="line">       <span class="keyword">return</span> x*f;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n,cnt,st[N],ed[N],qnum,root,ti[N];</div><div class="line">LL ans;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> point&#123;</div><div class="line">    LL x,y;</div><div class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> point&amp; w)<span class="keyword">const</span>&#123;</div><div class="line">        <span class="keyword">if</span>(x==w.x) <span class="keyword">return</span> y&lt;w.y;</div><div class="line">        <span class="keyword">return</span> x&lt;w.x;</div><div class="line">    &#125;</div><div class="line">&#125;p[N],Q[N],tmp[N];</div><div class="line"></div><div class="line">point <span class="keyword">operator</span> - (<span class="keyword">const</span> point&amp; a,<span class="keyword">const</span> point&amp; b)&#123;<span class="keyword">return</span> (point)&#123;a.x-b.x,a.y-b.y&#125;;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">cross</span><span class="params">(point a,point b)</span></span>&#123;<span class="keyword">return</span> a.x*b.y-a.y*b.x;&#125;</div><div class="line"></div><div class="line">LL <span class="keyword">operator</span> * (<span class="keyword">const</span> point&amp; a,<span class="keyword">const</span> point&amp; b)&#123;</div><div class="line">    <span class="keyword">return</span> a.x*b.x+a.y*b.y;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> segment&#123;</div><div class="line">    <span class="keyword">int</span> l,r;</div><div class="line">    <span class="built_in">vector</span>&lt;point&gt;s;</div><div class="line">&#125;a[<span class="number">4</span>*N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</div><div class="line">    a[k].l=l; a[k].r=r;</div><div class="line">    <span class="keyword">if</span>(l==r) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</div><div class="line">    build(k&lt;&lt;<span class="number">1</span>,l,mid); build(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> l=a[k].l,r=a[k].r;</div><div class="line">    <span class="keyword">if</span>(l==L &amp;&amp; r==R) &#123;a[k].s.push_back(p[x]); <span class="keyword">return</span>;&#125;</div><div class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span>(R&lt;=mid) insert(k&lt;&lt;<span class="number">1</span>,L,R,x);</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(mid&lt;L) insert(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,L,R,x);</div><div class="line">    <span class="keyword">else</span> insert(k&lt;&lt;<span class="number">1</span>,L,mid,x),insert(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,R,x);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">convexhull</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(!a[k].l) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">int</span> len=a[k].s.size();</div><div class="line">    sort(a[k].s.begin(),a[k].s.end());</div><div class="line">    <span class="keyword">int</span> top=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</div><div class="line">        <span class="keyword">while</span>(top&gt;<span class="number">1</span> &amp;&amp; cross(a[k].s[i]-tmp[top<span class="number">-1</span>],tmp[top]-tmp[top<span class="number">-1</span>])&gt;=<span class="number">0</span>) top--;</div><div class="line">        tmp[++top]=a[k].s[i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> tt=top;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=len<span class="number">-2</span>;i&gt;=<span class="number">0</span>;i--)&#123;</div><div class="line">        <span class="keyword">while</span>(top&gt;tt &amp;&amp; cross(a[k].s[i]-tmp[top<span class="number">-1</span>],tmp[top]-tmp[top<span class="number">-1</span>])&gt;=<span class="number">0</span>) top--;</div><div class="line">        tmp[++top]=a[k].s[i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(len&gt;<span class="number">1</span>) top--;</div><div class="line">    a[k].s.clear();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=top;i++) a[k].s.push_back(tmp[i]);</div><div class="line">    convexhull(k&lt;&lt;<span class="number">1</span>); convexhull(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> pos,<span class="keyword">int</span> num)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> l=a[k].l,r=a[k].r;</div><div class="line">    <span class="keyword">int</span> L=<span class="number">0</span>,R=a[k].s.size()<span class="number">-1</span>;</div><div class="line">    <span class="keyword">while</span>(R-L&gt;=<span class="number">3</span>)&#123;</div><div class="line">        <span class="keyword">int</span> ll=L+(R-L)/<span class="number">3</span>,rr=R-(R-L)/<span class="number">3</span>;</div><div class="line">        <span class="keyword">if</span>(Q[num]*a[k].s[ll]&gt;Q[num]*a[k].s[rr]) R=rr;</div><div class="line">        <span class="keyword">else</span> L=ll;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=L;i&lt;=R;i++)</div><div class="line">    ans=max(ans,Q[num]*a[k].s[i]);</div><div class="line">    <span class="keyword">if</span>(l==r) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span>(pos&lt;=mid) query(k&lt;&lt;<span class="number">1</span>,pos,num);</div><div class="line">    <span class="keyword">else</span> query(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,pos,num);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    n=read();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</div><div class="line">        <span class="keyword">int</span> type=read();</div><div class="line">        <span class="keyword">if</span>(type==<span class="number">1</span>) p[++cnt].x=read(),p[cnt].y=read(),st[cnt]=i;        </div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(type==<span class="number">2</span>) ed[read()]=i;</div><div class="line">        <span class="keyword">else</span> Q[++qnum].x=read(),Q[qnum].y=read(),ti[qnum]=i;</div><div class="line">    &#125;</div><div class="line">    build(<span class="number">1</span>,<span class="number">1</span>,n);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++) <span class="keyword">if</span>(!ed[i]) ed[i]=n;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++) insert(<span class="number">1</span>,st[i],ed[i],i);</div><div class="line">    convexhull(<span class="number">1</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=qnum;i++) ans=<span class="number">0</span>,query(<span class="number">1</span>,ti[i],i),<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题目精选 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 线段树 </tag>
            
            <tag> 凸包 </tag>
            
            <tag> 三分 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「BZOJ4520」「CQOI2016」K远点对]]></title>
      <url>/2017/03/21/bzoj4520/</url>
      <content type="html"><![CDATA[<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><blockquote>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=4520" target="_blank" rel="external">题目传送门</a></p>
</blockquote>
<h3 id="解题报告"><a href="#解题报告" class="headerlink" title="解题报告"></a>解题报告</h3><blockquote>
<p>做法很多，可以旋转卡壳，也可以三分，还能KD_Tree。这里写的是KD_Tree。<br>用一个一开始装了2*K个0的优先队列记录答案，对于每一个点丢进去查，多的弹出来，再加进去。<br>巨TM有毒，调了2h，原因是对于每一个平面的划分点，我是在nth_element之前就选定了。但这样是不行的，排了之后它就跑掉了。。所以要么排了之后再选要么找划分点的时候直接根据l,r求出mid。</p>
</blockquote>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> sqr(x) ((x)*(x))</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF ((LL)1&lt;&lt;62)</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">       LL x=<span class="number">0</span>,f=<span class="number">1</span>; <span class="keyword">char</span> a=getchar();</div><div class="line">       <span class="keyword">while</span>(a&lt;<span class="string">'0'</span> || a&gt;<span class="string">'9'</span>) &#123;<span class="keyword">if</span>(a==<span class="string">'-'</span>) f=<span class="number">-1</span>; a=getchar();&#125;</div><div class="line">       <span class="keyword">while</span>(a&gt;=<span class="string">'0'</span> &amp;&amp; a&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+a-<span class="string">'0'</span>,a=getchar();</div><div class="line">       <span class="keyword">return</span> x*f;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n,K;</div><div class="line">priority_queue&lt;LL&gt;q;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> point&#123;</div><div class="line">    LL x,y;</div><div class="line">&#125;p[N],v;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmpx</span><span class="params">(<span class="keyword">const</span> point&amp; a,<span class="keyword">const</span> point&amp; b)</span></span>&#123;<span class="keyword">return</span> a.x&lt;b.x;&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmpy</span><span class="params">(<span class="keyword">const</span> point&amp; a,<span class="keyword">const</span> point&amp; b)</span></span>&#123;<span class="keyword">return</span> a.y&lt;b.y;&#125;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> KDT&#123;</div><div class="line">    <span class="keyword">int</span> root,cnt;</div><div class="line">    </div><div class="line">    <span class="keyword">struct</span> kd&#123;</div><div class="line">        <span class="keyword">int</span> l,r,son[<span class="number">2</span>],kind;</div><div class="line">        LL xl,xr,yt,yb;</div><div class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">            xl=yb=INF; xr=yt=<span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;a[<span class="number">2</span>*N];</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">inline</span> LL <span class="title">dis</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">        point mid=p[(a[x].l+a[x].r)&gt;&gt;<span class="number">1</span>];</div><div class="line">        <span class="keyword">return</span> sqr(mid.x-v.x)+sqr(mid.y-v.y);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">inline</span> LL <span class="title">get</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(!k) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        LL t1=max(sqr(a[k].xl-v.x),sqr(a[k].xr-v.x));</div><div class="line">        LL t2=max(sqr(a[k].yb-v.y),sqr(a[k].yt-v.y));</div><div class="line">        <span class="keyword">return</span> t1+t2;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span>&amp; k,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(l&gt;r) <span class="keyword">return</span>;</div><div class="line">        k=++cnt;    </div><div class="line">        a[k].l=l; a[k].r=r; a[k].init();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;=r;i++)&#123;</div><div class="line">            a[k].xl=min(a[k].xl,p[i].x);</div><div class="line">            a[k].xr=max(a[k].xr,p[i].x);</div><div class="line">            a[k].yb=min(a[k].yb,p[i].y);</div><div class="line">            a[k].yt=max(a[k].yt,p[i].y);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>,F;</div><div class="line">        <span class="keyword">if</span>(l==r) <span class="keyword">return</span>;</div><div class="line">        a[k].kind=F=a[k].xr-a[k].xl&gt;a[k].yt-a[k].yb?<span class="number">0</span>:<span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span>(!F) nth_element(p+l,p+mid,p+r+<span class="number">1</span>,cmpx);</div><div class="line">        <span class="keyword">else</span> nth_element(p+l,p+mid,p+r+<span class="number">1</span>,cmpy);</div><div class="line">        build(a[k].son[<span class="number">0</span>],l,mid<span class="number">-1</span>); build(a[k].son[<span class="number">1</span>],mid+<span class="number">1</span>,r);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</div><div class="line">        LL d=dis(k),d1=get(a[k].son[<span class="number">0</span>]),d2=get(a[k].son[<span class="number">1</span>]);</div><div class="line">        <span class="keyword">if</span>(-d&lt;q.top()) q.pop(),q.push(-d);</div><div class="line">        <span class="keyword">if</span>(d1&gt;d2)&#123;</div><div class="line">            <span class="keyword">if</span>(-d1&lt;q.top()) query(a[k].son[<span class="number">0</span>]);</div><div class="line">            <span class="keyword">if</span>(-d2&lt;q.top()) query(a[k].son[<span class="number">1</span>]);</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">if</span>(-d2&lt;q.top()) query(a[k].son[<span class="number">1</span>]);</div><div class="line">            <span class="keyword">if</span>(-d1&lt;q.top()) query(a[k].son[<span class="number">0</span>]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    n=read(); K=read();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">2</span>*K;i++) q.push(<span class="number">0</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) p[i].x=read(),p[i].y=read();</div><div class="line">    KDT::build(KDT::root,<span class="number">1</span>,n);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) v=p[i],KDT::query(KDT::root);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,-q.top());</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题目精选 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> KD_Tree </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「Codechef Nov Challenge 2012」Arithmetic Progressions]]></title>
      <url>/2017/03/18/codechef_Nov/</url>
      <content type="html"><![CDATA[<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><blockquote>
<p><a href="https://www.codechef.com/NOV12/problems/COUNTARI/" target="_blank" rel="external">题目传送门</a></p>
</blockquote>
<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote>
<p>给定一个序列，求多少个三元组满足ai+ak=2*aj(i&lt;j&lt;k)。</p>
</blockquote>
<h3 id="解题报告"><a href="#解题报告" class="headerlink" title="解题报告"></a>解题报告</h3><blockquote>
<p>原来叉姐的讲义上有啊。。完全忘掉了。。<br>首先这个式子很明显是一个卷积。我们有了FFT的思路。但是肯定不能每一个数都去做一次。那怎么办呢？我们分块吧！（分块大法好）<br>对于每一个块我们统计出前面块的桶，同理我们也有后面块的桶，两个桶FFT一下我们就得到了以这个块内元素为j,i和k分别在前面的块与后面的块的方案了。然后我们还要解决两个在一个块，三个在一个块的问题。两个在一个块的我们直接去前后的桶里找，同一个块的直接n*n暴力。然后就做完啦！好妙啊！<br>这题被坑了好久。。因为空间莫名其妙的问题怎么都算不对（块开极端都可以，就是开中间不行），然后一个下午没有了。。</p>
</blockquote>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 205005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1e9</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> Bl 70</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LIM 60000</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI=<span class="built_in">acos</span>(<span class="number">-1</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">       LL x=<span class="number">0</span>,f=<span class="number">1</span>; <span class="keyword">char</span> a=getchar();</div><div class="line">       <span class="keyword">while</span>(a&lt;<span class="string">'0'</span> || a&gt;<span class="string">'9'</span>) &#123;<span class="keyword">if</span>(a==<span class="string">'-'</span>) f=<span class="number">-1</span>; a=getchar();&#125;</div><div class="line">       <span class="keyword">while</span>(a&gt;=<span class="string">'0'</span> &amp;&amp; a&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+a-<span class="string">'0'</span>,a=getchar();</div><div class="line">       <span class="keyword">return</span> x*f;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> FFT&#123;</div><div class="line">    <span class="keyword">int</span> rev[N];</div><div class="line">    </div><div class="line">    <span class="keyword">struct</span> vec&#123;</div><div class="line">        <span class="keyword">double</span> r,i;</div><div class="line">        vec <span class="keyword">operator</span> * (<span class="keyword">const</span> vec&amp; w)&#123;<span class="keyword">return</span> (vec)&#123;r*w.r-i*w.i,i*w.r+r*w.i&#125;;&#125;</div><div class="line">        vec <span class="keyword">operator</span> + (<span class="keyword">const</span> vec&amp; w)&#123;<span class="keyword">return</span> (vec)&#123;r+w.r,i+w.i&#125;;&#125;</div><div class="line">        vec <span class="keyword">operator</span> - (<span class="keyword">const</span> vec&amp; w)&#123;<span class="keyword">return</span> (vec)&#123;r-w.r,i-w.i&#125;;&#125;</div><div class="line">    &#125;A[N],B[N];</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">fft</span><span class="params">(vec* x,<span class="keyword">int</span> len,<span class="keyword">int</span> f)</span></span>&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len;i++) <span class="keyword">if</span>(i&lt;rev[i]) swap(x[i],x[rev[i]]);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> lnow=<span class="number">2</span>;lnow&lt;=len;lnow&lt;&lt;=<span class="number">1</span>)&#123;</div><div class="line">            vec w,w0=(vec)&#123;<span class="built_in">cos</span>(<span class="number">2.0</span>*PI/lnow*f),<span class="built_in">sin</span>(<span class="number">2.0</span>*PI/lnow*f)&#125;,t1,t2;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i+=lnow)&#123;</div><div class="line">                w=(vec)&#123;<span class="number">1</span>,<span class="number">0</span>&#125;;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;i+lnow/<span class="number">2</span>;j++)&#123;</div><div class="line">                    t1=x[j]; t2=w*x[j+lnow/<span class="number">2</span>];</div><div class="line">                    x[j]=t1+t2; x[j+lnow/<span class="number">2</span>]=t1-t2;</div><div class="line">                    w=w*w0;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> b[],<span class="keyword">int</span> l1,<span class="keyword">int</span> l2,LL s[])</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> len,t;</div><div class="line">        <span class="keyword">for</span>(len=<span class="number">1</span>,t=<span class="number">0</span>;len&lt;=(l1+l2+<span class="number">1</span>);len&lt;&lt;=<span class="number">1</span>,t++); t=<span class="number">1</span>&lt;&lt;(t<span class="number">-1</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=len;i++) rev[i]=rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>|(i&amp;<span class="number">1</span>?t:<span class="number">0</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=len;i++) B[i]=A[i]=(vec)&#123;<span class="number">0</span>,<span class="number">0</span>&#125;;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=l1;i++) A[i].r=a[i];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=l2;i++) B[i].r=b[i];</div><div class="line">        fft(A,len,<span class="number">1</span>); fft(B,len,<span class="number">1</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=len;i++) A[i]=A[i]*B[i];</div><div class="line">        fft(A,len,<span class="number">-1</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=l1+l2;i++)</div><div class="line">        s[i]=(LL)(<span class="number">1.0</span>*A[i].r/len+<span class="number">0.5</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n,block_size,block_num;</div><div class="line"><span class="keyword">int</span> bel[N],l[Bl+<span class="number">5</span>],r[Bl+<span class="number">5</span>],a[N];</div><div class="line">LL tot,ans[<span class="number">2</span>*LIM+<span class="number">6000</span>];</div><div class="line"><span class="keyword">int</span> lsum[LIM+<span class="number">5</span>],rsum[LIM+<span class="number">5</span>],cnt[<span class="number">2</span>*LIM+<span class="number">5</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">brutal_force</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=l[x];i&lt;=r[x];i++) rsum[a[i]]--;</div><div class="line">    <span class="built_in">memset</span>(ans,<span class="number">0</span>,<span class="keyword">sizeof</span>(ans));</div><div class="line">    FFT::work(lsum,rsum,<span class="number">30000</span>,<span class="number">30000</span>,ans);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=l[x];i&lt;=r[x];i++)&#123;</div><div class="line">        tot+=ans[<span class="number">2</span>*a[i]];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=l[x];j&lt;i;j++)</div><div class="line">        <span class="keyword">if</span>(<span class="number">2</span>*a[i]-a[j]&gt;<span class="number">0</span>) tot+=rsum[<span class="number">2</span>*a[i]-a[j]];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=r[x];j++)</div><div class="line">        <span class="keyword">if</span>(<span class="number">2</span>*a[i]-a[j]&gt;<span class="number">0</span>) tot+=lsum[<span class="number">2</span>*a[i]-a[j]];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=l[x];i&lt;=r[x];i++) lsum[a[i]]++;</div><div class="line">    <span class="built_in">memset</span>(cnt,<span class="number">0</span>,<span class="keyword">sizeof</span>(cnt));</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=l[x];i&lt;=r[x];i++)&#123;</div><div class="line">        tot+=cnt[a[i]];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=l[x];j&lt;i;j++)</div><div class="line">        <span class="keyword">if</span>(<span class="number">2</span>*a[i]-a[j]&gt;<span class="number">0</span>) cnt[<span class="number">2</span>*a[i]-a[j]]++;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    n=read(); block_size=<span class="number">1500</span>;</div><div class="line">    block_num=(n<span class="number">-1</span>)/block_size+<span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) a[i]=read(),bel[i]=(i<span class="number">-1</span>)/block_size+<span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=block_num;i++) l[i]=(i<span class="number">-1</span>)*block_size+<span class="number">1</span>,r[i]=min(n,i*block_size);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) rsum[a[i]]++;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=block_num;i++) brutal_force(i);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,tot);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题目精选 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> FFT </tag>
            
            <tag> 分块 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「BZOJ4502」串]]></title>
      <url>/2017/03/14/bzoj4502/</url>
      <content type="html"><![CDATA[<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><blockquote>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=4502" target="_blank" rel="external">题目传送门</a></p>
</blockquote>
<h3 id="解题报告"><a href="#解题报告" class="headerlink" title="解题报告"></a>解题报告</h3><blockquote>
<p>首先直接弄肯定不行，会算重。所以要么除掉相同方案或者找到一种不重不漏的计算方式。这里提供一种不重不漏的dp。<br>AC自动机上dp。我们定义dp状态dp[i][j]表示第一次失配之后我们加了i个字符，当前在j节点的方案数。<br>转移如下：dp[i][j]-&gt;dp[i+1][next[j][a]]其中a为我们当前枚举的转移字符，并且要满足条件：状态next[j][a]的长度要大于i。<br>现在来解释这样为什么能做到不重不漏。dp状态里的这个i其实并不能完全说是加了i个字符，也许说走了i步更加合适，因为我们dp完后去看对应的方案其实不一定就是在分割点后加了i个字符。我们基于的思想是这样的：我们在初始化的时候，枚举AC自动机上哪些节点没有当前枚举字符的转移，但是fail指向的又不是root，这些作为我们的第一“切割点”（待会解释为什么这里是打引号）。然后我们开始往里面丢字符，也许我们丢了之后转移到的状态对应的长度是大于我们目前加的这后面一段总长度的，但这不要紧，我们可以把多的那一部分前缀补到分割点前面去，也就是说分割点前移，所以说为什么前面要打引号，是这个原因。<br>举个例子，我们在前面一部分串为ABC，我们在这个C后面断开开始找第二段。此时第一“切割点”就是这个C。假如我们枚举一个D，而后缀自动机把它转移到了BCD状态上，我们可以视作将切割点迁移至了A后面，最后对应的分割方式就是A|BCD。<br>好，那么为什么要满足那个长度要大于i的条件呢？因为一旦小等i，就说明没有一个对应的方案可以实现，这是不存在的。<br>再回到本质问题上来，为什么能不重不漏。经过多番讨论，我想到一个较为准确的表述：我们发现，我们用这种分割方式，第一“分割点”一定会选择一个位置，使得实际分割点到第一分割点尽可能的长，这就使得每个串有一个唯一的划分方式，使得不重不漏。<br>上面说了不重，还要注意不漏。有一些串在我们初始化的时候是断不开的，对于这些串我们要特判一下，一开始就计入答案。</p>
</blockquote>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 300005</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">       LL x=<span class="number">0</span>,f=<span class="number">1</span>; <span class="keyword">char</span> a=getchar();</div><div class="line">       <span class="keyword">while</span>(a&lt;<span class="string">'0'</span> || a&gt;<span class="string">'9'</span>) &#123;<span class="keyword">if</span>(a==<span class="string">'-'</span>) f=<span class="number">-1</span>; a=getchar();&#125;</div><div class="line">       <span class="keyword">while</span>(a&gt;=<span class="string">'0'</span> &amp;&amp; a&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+a-<span class="string">'0'</span>,a=getchar();</div><div class="line">       <span class="keyword">return</span> x*f;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n,cnt,next[N][<span class="number">26</span>],f[N],root,lim,dep[N];</div><div class="line"><span class="keyword">bool</span> tr[N][<span class="number">26</span>];</div><div class="line">LL ans,dp[<span class="number">100</span>][N];</div><div class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">char</span> tmp[<span class="number">35</span>]; <span class="built_in">memset</span>(tmp,<span class="number">0</span>,<span class="keyword">sizeof</span>(tmp)); <span class="built_in">scanf</span>(<span class="string">"%s"</span>,tmp+<span class="number">1</span>);</div><div class="line">    <span class="keyword">int</span> len=<span class="built_in">strlen</span>(tmp+<span class="number">1</span>),now=root;lim=max(lim,<span class="number">2</span>*len);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len;i++)&#123;</div><div class="line">        <span class="keyword">int</span> a=tmp[i]-<span class="string">'a'</span>;</div><div class="line">        <span class="keyword">if</span>(!next[now][a]) next[now][a]=++cnt; </div><div class="line">        now=next[now][a];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">getfail</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++) <span class="keyword">if</span>(next[root][i])    dep[next[root][i]]=<span class="number">1</span>,q.push(next[root][i]);</div><div class="line">    <span class="keyword">while</span>(!q.empty())&#123;</div><div class="line">        <span class="keyword">int</span> p=q.front(); q.pop();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)&#123;</div><div class="line">            <span class="keyword">int</span> v=next[p][i];</div><div class="line">            <span class="keyword">if</span>(!v) &#123;next[p][i]=next[f[p]][i];<span class="keyword">continue</span>;&#125;</div><div class="line">            tr[p][i]=<span class="number">1</span>;</div><div class="line">            <span class="keyword">int</span> k=f[p];</div><div class="line">            <span class="keyword">while</span>(k &amp;&amp; !next[k][i]) k=f[k]; k=next[k][i];</div><div class="line">            f[v]=k; dep[v]=dep[p]+<span class="number">1</span>;</div><div class="line">            q.push(v);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    n=read();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) insert(); getfail();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++) <span class="keyword">if</span>(f[i]!=root) ans++;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> a=<span class="number">0</span>;a&lt;<span class="number">26</span>;a++)</div><div class="line">            <span class="keyword">if</span>(!tr[i][a] &amp;&amp; next[i][a]!=root) dp[<span class="number">1</span>][next[i][a]]++;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=lim;i++)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=cnt;j++)</div><div class="line">        <span class="keyword">if</span>(dp[i][j])&#123;</div><div class="line">            ans+=dp[i][j];</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> a=<span class="number">0</span>;a&lt;<span class="number">26</span>;a++)</div><div class="line">                <span class="keyword">if</span>(tr[j][a] || dep[next[j][a]]&gt;=i+<span class="number">1</span>) dp[i+<span class="number">1</span>][next[j][a]]+=dp[i][j];</div><div class="line">        &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题目精选 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> AC自动机 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[日常小测3.4 T1]]></title>
      <url>/2017/03/04/3_4T1/</url>
      <content type="html"><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote>
<p>给定4个字符A,B,C,D的数量（&lt;=1000）求由它们全体组成的满足相邻字符不同的序列个数。</p>
</blockquote>
<h3 id="解题报告"><a href="#解题报告" class="headerlink" title="解题报告"></a>解题报告</h3><blockquote>
<p>首先是$n^4$的暴力。<br>然后我们考虑怎么减少枚举量，我们考虑往已得到的序列中加入字符。<br>我们先只加入A。然后插入B，我们枚举有哪些A被B给插开了，此时我们可以唯一确定，有多少空隙必须要加入字符（因为会有AA、BB这样的，以下称之为必要空隙），而有一些则不必（如AB、BA，称之为不必要空隙），关于这个个数我们需要分类讨论一下B在序列两侧（也就是没被A包住）的情况。我们还要再枚举除了必要空隙，还有哪些不必要空隙我们也会插入字符C、D，再枚举C、D的插入形式，我们就能把这种情况不重不漏的计入答案中。<br>考虑怎么枚举C、D的插入形式。前面的A、B虽然可以有“粘黏”（形如AA，BB），但是后面插入的C、D是不允许的，因为已经没有后续字符来分开他们了。所以只有以下4种形式：1.CDCDC…C  2.DCDCD…D 3.CDCDCD…CD 4.DCDCDC…DC<br>关键在于枚举形式1。为什么呢，因为C与D的字符个数差是恒定的。如果我们把形式1看作一个C加上形式4，形式2也可以这么看待，而形式3、4中的C、D个数相等，C、D之差只由形式1、2决定，所以一旦1确定，2也跟着确定了，确定之后，我们会有若干对CD。只要把他们随便丢到插入位置屁股后面就好了。<br>这么看来好像是3层枚举，但其实我们可以预处理对于每种待插入空隙数量，形式1不同个数的情况的总和。所以我们只用O（M^2）的枚举就可以解决这个问题了。<br>这个问题非常巧妙，通过枚举来减少字符集，尤其是这种不重不漏的统计方法值得学习。<br>然后就是这个很讨厌的int和LL的问题了。切记括号要包严实。</p>
</blockquote>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 4005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 1000000007</span></div><div class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">       LL x=<span class="number">0</span>,f=<span class="number">1</span>; <span class="keyword">char</span> a=getchar();</div><div class="line">       <span class="keyword">while</span>(a&lt;<span class="string">'0'</span> || a&gt;<span class="string">'9'</span>) &#123;<span class="keyword">if</span>(a==<span class="string">'-'</span>) f=<span class="number">-1</span>; a=getchar();&#125;</div><div class="line">       <span class="keyword">while</span>(a&gt;=<span class="string">'0'</span> &amp;&amp; a&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+a-<span class="string">'0'</span>,a=getchar();</div><div class="line">       <span class="keyword">return</span> x*f;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> a,b,c,d,f[N],two[N],F[N][N],C[N][N],ans;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">4000</span>;i++) C[i][<span class="number">0</span>]=<span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">4000</span>;i++) </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=i;j++)</div><div class="line">        C[i][j]=((LL)C[i<span class="number">-1</span>][j]+C[i<span class="number">-1</span>][j<span class="number">-1</span>])%mod;</div><div class="line">    F[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">4000</span>;i++)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">4000</span>;j++)</div><div class="line">        F[i][j]=i?((LL)F[i][j<span class="number">-1</span>]+F[i<span class="number">-1</span>][j])%mod:F[i][j<span class="number">-1</span>];</div><div class="line">    two[<span class="number">0</span>]=<span class="number">1</span>; <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">4000</span>;i++) two[i]=(LL)two[i<span class="number">-1</span>]*<span class="number">2L</span>L%mod;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=c;i++)&#123;</div><div class="line">        <span class="keyword">int</span> s1=i,s2=d-c+s1;</div><div class="line">        <span class="keyword">if</span>(s2&lt;<span class="number">0</span> || s2&gt;d || s1+s2&gt;x) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">int</span> lef=c-s1; lef-=x-s1-s2;</div><div class="line">        <span class="keyword">if</span>(lef&lt;<span class="number">0</span>) <span class="keyword">continue</span>;</div><div class="line">        f[x]=((LL)f[x]+((LL)C[x][s1]*C[x-s1][s2]%mod*two[x-s1-s2]%mod*F[lef][x]%mod))%mod; </div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    a=read(); b=read(); c=read(); d=read();</div><div class="line">    init(); <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=c+d;i++) work(i);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">3</span>;k++)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>;x&lt;=min(b-k,a<span class="number">-1</span>);x++)&#123;</div><div class="line">            <span class="keyword">int</span> num=a<span class="number">-1</span><span class="number">-2</span>*x+b-k,lef=a+b+<span class="number">1</span>-num;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> delta=<span class="number">0</span>;delta&lt;=lef;delta++)</div><div class="line">                <span class="keyword">if</span>(k==<span class="number">1</span>)</div><div class="line">            ans=((LL)ans+<span class="number">2L</span>L*f[delta+num]%mod*C[a<span class="number">-1</span>][x]%mod*C[lef][delta]%mod*F[b-x-k][x+k])%mod;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                ans=((LL)ans+<span class="number">1L</span>L*f[delta+num]*C[a<span class="number">-1</span>][x]%mod*C[lef][delta]%mod*F[b-x-k][x+k])%mod;</div><div class="line">        &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题目精选 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 组合数学 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「51nod 1766」树上最远点对]]></title>
      <url>/2017/01/23/51nod1766/</url>
      <content type="html"><![CDATA[<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><blockquote>
<p><a href="https://www.51nod.com/onlineJudge/questionCode.html#!problemId=1766" target="_blank" rel="external">题目传送门</a></p>
</blockquote>
<h3 id="解题报告"><a href="#解题报告" class="headerlink" title="解题报告"></a>解题报告</h3><blockquote>
<p>首先，我们有一个结论：对于一个集合的直径，如果我们将这个集合分解成两个非空集合，它的端点一定在两个非空集合的两个端这4个端点中。这非常的显然。。。<br>那么我们就可以做到合并两个集合，我们就可以用线段树维护每个区间的直径，就好啦，完全不用复杂的数据结构。<br>这道题卡时间，所以LCA要用欧拉序RMQ做。<br>复杂度O（nlogn）</p>
</blockquote>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 200005</span></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>; <span class="keyword">char</span> a=getchar();</div><div class="line">    <span class="keyword">while</span>(a&lt;<span class="string">'0'</span> || a&gt;<span class="string">'9'</span>) &#123;<span class="keyword">if</span>(a==<span class="string">'-'</span>) f=<span class="number">-1</span>; a=getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(a&gt;=<span class="string">'0'</span> &amp;&amp; a&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+a-<span class="string">'0'</span>,a=getchar();</div><div class="line">    <span class="keyword">return</span> x*f;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> n,m,cnt=<span class="number">1</span>,euler[<span class="number">2</span>*N],dep[N],head[N],fi[N],dis[N],st[N][<span class="number">20</span>],mn[N][<span class="number">20</span>],Log[<span class="number">2</span>*N];</div><div class="line"><span class="keyword">struct</span> edges&#123;</div><div class="line">    <span class="keyword">int</span> to,c,next;</div><div class="line">&#125;e[N];</div><div class="line"><span class="keyword">struct</span> node&#123;</div><div class="line">    <span class="keyword">int</span> x1,x2,l,r;</div><div class="line">&#125;seg[<span class="number">4</span>*N];</div><div class="line"><span class="keyword">struct</span> data&#123;</div><div class="line">    <span class="keyword">int</span> x1,x2;</div><div class="line">&#125;;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getdis</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(!u || !v) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    u=fi[u]; v=fi[v];</div><div class="line">    <span class="keyword">if</span>(u&gt;v) swap(u,v);</div><div class="line">    <span class="keyword">int</span> p,len=Log[v-u+<span class="number">1</span>];</div><div class="line">    p=mn[u][len]&lt;mn[v-(<span class="number">1</span>&lt;&lt;len)+<span class="number">1</span>][len]?st[u][len]:st[v-(<span class="number">1</span>&lt;&lt;len)+<span class="number">1</span>][len];</div><div class="line">    <span class="keyword">return</span> dis[euler[u]]+dis[euler[v]]<span class="number">-2</span>*dis[p];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> mx=<span class="number">0</span>,x1=seg[x&lt;&lt;<span class="number">1</span>].x1,x2=seg[x&lt;&lt;<span class="number">1</span>].x2,x3=seg[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].x1,x4=seg[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].x2,f;</div><div class="line"><span class="keyword">if</span>((f=getdis(x1,x2))&gt;mx) seg[x].x1=x1,seg[x].x2=x2,mx=f; <span class="keyword">if</span>((f=getdis(x1,x3))&gt;mx) seg[x].x1=x1,seg[x].x2=x3,mx=f;</div><div class="line"><span class="keyword">if</span>((f=getdis(x1,x4))&gt;mx) seg[x].x1=x1,seg[x].x2=x4,mx=f; <span class="keyword">if</span>((f=getdis(x2,x3))&gt;mx) seg[x].x1=x2,seg[x].x2=x3,mx=f;</div><div class="line"><span class="keyword">if</span>((f=getdis(x2,x4))&gt;mx) seg[x].x1=x2,seg[x].x2=x4,mx=f; <span class="keyword">if</span>((f=getdis(x3,x4))&gt;mx) seg[x].x1=x3,seg[x].x2=x4,mx=f;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> u=read(),v=read(),c=read();</div><div class="line">    e[++cnt]=(edges)&#123;v,c,head[u]&#125;;head[u]=cnt;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> fa)</span></span>&#123;</div><div class="line">    dep[x]=dep[fa]+<span class="number">1</span>; fi[x]=euler[<span class="number">0</span>]+<span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=e[i].next)&#123;</div><div class="line">        <span class="keyword">if</span>(fa==e[i].to) <span class="keyword">continue</span>;</div><div class="line">        euler[++euler[<span class="number">0</span>]]=x;</div><div class="line">        dis[e[i].to]=dis[x]+e[i].c; dfs(e[i].to,x);</div><div class="line">    &#125;</div><div class="line">    euler[++euler[<span class="number">0</span>]]=x;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">rmq_pre</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=euler[<span class="number">0</span>];i++) st[i][<span class="number">0</span>]=euler[i],mn[i][<span class="number">0</span>]=dep[euler[i]];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">18</span>;i++)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=euler[<span class="number">0</span>];j++)&#123;</div><div class="line">            <span class="keyword">if</span>(j+(<span class="number">1</span>&lt;&lt;i)<span class="number">-1</span>&gt;euler[<span class="number">0</span>]) <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">if</span>(mn[j][i<span class="number">-1</span>]&lt;mn[j+(<span class="number">1</span>&lt;&lt;(i<span class="number">-1</span>))][i<span class="number">-1</span>]) st[j][i]=st[j][i<span class="number">-1</span>],mn[j][i]=mn[j][i<span class="number">-1</span>];</div><div class="line">            <span class="keyword">else</span> st[j][i]=st[j+(<span class="number">1</span>&lt;&lt;(i<span class="number">-1</span>))][i<span class="number">-1</span>],mn[j][i]=mn[j+(<span class="number">1</span>&lt;&lt;(i<span class="number">-1</span>))][i<span class="number">-1</span>];</div><div class="line">        &#125;</div><div class="line">    Log[<span class="number">0</span>]=<span class="number">-1</span>; <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=euler[<span class="number">0</span>];i++) Log[i]=Log[i&gt;&gt;<span class="number">1</span>]+<span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    seg[x].l=l; seg[x].r=r;</div><div class="line">    <span class="keyword">if</span>(l==r) &#123;seg[x].x1=l; seg[x].x2=<span class="number">0</span>; <span class="keyword">return</span>;&#125;</div><div class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</div><div class="line">    build(l,mid,x&lt;&lt;<span class="number">1</span>);</div><div class="line">    build(mid+<span class="number">1</span>,r,x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</div><div class="line">    update(x);</div><div class="line">&#125;</div><div class="line"><span class="function">data <span class="title">merge</span><span class="params">(data tmp1,data tmp2)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> f,mx=<span class="number">0</span>,x1=tmp1.x1,x2=tmp1.x2,x3=tmp2.x1,x4=tmp2.x2;</div><div class="line">    data ret;</div><div class="line">    <span class="keyword">if</span>((f=getdis(x1,x2))&gt;mx) ret.x1=x1,ret.x2=x2,mx=f; <span class="keyword">if</span>((f=getdis(x1,x3))&gt;mx) ret.x1=x1,ret.x2=x3,mx=f;</div><div class="line">    <span class="keyword">if</span>((f=getdis(x1,x4))&gt;mx) ret.x1=x1,ret.x2=x4,mx=f; <span class="keyword">if</span>((f=getdis(x2,x3))&gt;mx) ret.x1=x2,ret.x2=x3,mx=f;</div><div class="line">    <span class="keyword">if</span>((f=getdis(x2,x4))&gt;mx) ret.x1=x2,ret.x2=x4,mx=f; <span class="keyword">if</span>((f=getdis(x3,x4))&gt;mx) ret.x1=x3,ret.x2=x4,mx=f;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"><span class="function">data <span class="title">query</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> l=seg[x].l,r=seg[x].r;</div><div class="line">    <span class="keyword">if</span>(l==L &amp;&amp; r==R) &#123;<span class="keyword">return</span> (data)&#123;seg[x].x1,seg[x].x2&#125;;&#125;</div><div class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span>(R&lt;=mid) <span class="keyword">return</span> query(L,R,x&lt;&lt;<span class="number">1</span>);</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(mid&lt;L) <span class="keyword">return</span> query(L,R,x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> merge(query(L,mid,x&lt;&lt;<span class="number">1</span>),query(mid+<span class="number">1</span>,R,x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>));</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    n=read();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++) insert();</div><div class="line">    dfs(<span class="number">1</span>,<span class="number">0</span>); rmq_pre(); build(<span class="number">1</span>,n,<span class="number">1</span>);</div><div class="line">    m=read();</div><div class="line">    <span class="keyword">while</span>(m--)&#123;</div><div class="line">        <span class="keyword">int</span> t1,t2,a=read(),b=read(),c=read(),d=read();</div><div class="line">        data tmp1=query(a,b,<span class="number">1</span>),tmp2=query(c,d,<span class="number">1</span>);</div><div class="line">        t1=max(getdis(tmp1.x1,tmp2.x1),getdis(tmp1.x1,tmp2.x2));</div><div class="line">        t2=max(getdis(tmp1.x2,tmp2.x1),getdis(tmp1.x2,tmp2.x2));</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,max(t1,t2));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题目精选 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「51nod 1537」分解]]></title>
      <url>/2017/01/20/51nod1537/</url>
      <content type="html"><![CDATA[<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><blockquote>
<p><a href="https://www.51nod.com/onlineJudge/questionCode.html#!problemId=1537" target="_blank" rel="external">题目传送门</a></p>
</blockquote>
<h3 id="解题报告"><a href="#解题报告" class="headerlink" title="解题报告"></a>解题报告</h3><blockquote>
<p>证明好巧妙，给跪OTZ<br>题目的式子：$ {\left( {1{\rm{ + }}\sqrt 2 } \right)^{\rm{n}}} $，设其乘开之后为　$ {\rm{a + b}}\sqrt 2 $<br>考虑相对的式子：$ {\left( {1{\rm{ - }}\sqrt 2 } \right)^{\rm{n}}}$,则乘开后为 ${\rm{a - b}}\sqrt 2 $<br>两式相乘，得到 $ {( - 1)^n} = {a^2} - 2{b^2} $<br>分奇偶讨论，如果n为偶数，则当 $ m = {a^2} $, $ m - 1 = {a^2} - 1 = 2{b^2} $,$ \sqrt m  + \sqrt {m - 1}  = a + b\sqrt 2 $<br>n为奇数时同理，当 $ m = {a^2} + 1 = 2{b^2} $,$ m - 1 = {a^2} $,$ \sqrt m  + \sqrt {m - 1}  = a + b\sqrt 2 $<br>所以，不存在无解状况。现在问题是怎么求a。如果打表找规律可以知道，n&gt;=2时，a[n]=2*a[n-1]+a[n-2],初始值为a[1]=a[2]=1;</p>
<p>怎么证明呢？网上没看到有证明，所以自己胡扯一下吧。考虑我们已经有了 $ {\left( {1{\rm{ + }}\sqrt 2 } \right)^{n - 2}} = {a_1} + {b_1}\sqrt 2 $<br> $ {a_2} = {a_1} + 2{b_1} $,$ {b_2} = {a_1} + {b_1} $<br>同理,可以推出 $ {a_3} = {a_2} + 2{b_2} $<br>带入a1,a2，可以得到 $ {a_3} = 3{a_1} + 4{b_1} = 2{a_1} + {a_2} $<br>所以满足上面的递推式。<br>然后矩阵快速幂搞一发就过啦！</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 题目精选 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数学 </tag>
            
            <tag> 矩阵快速幂 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「UER#7」T2]]></title>
      <url>/2017/01/12/UER7T2/</url>
      <content type="html"><![CDATA[<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><blockquote>
<p><a href="http://uoj.ac/contest/35/problem/245" target="_blank" rel="external">题目传送门</a></p>
</blockquote>
<h3 id="解题报告"><a href="#解题报告" class="headerlink" title="解题报告"></a>解题报告</h3><blockquote>
<p>首先可以注意到的是，答案一定是单增的。我们再发现，随着1.05指数不断增加，之后肯定会有质的飞跃（毕竟是指数函数），也就是说，到时候一定有一大段区间的答案都是同一个数。所以我们只要分别找出每一个段的答案就好了。段数大概是log的（不会证，凭感觉吧。。。<br>先把2和n的答案计算出来，然后分治下去。如果当前分治的区间，左端点的答案误差范围已经和右边答案的误差范围相交，说明夹在他们中间的数们答案全一样，随便选一个复制给他们就好了。<br>时间复杂度O（nlogn）。跪烂。。</p>
</blockquote>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1e9</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-5</span></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>; <span class="keyword">char</span> a=getchar();</div><div class="line">    <span class="keyword">while</span>(a&lt;<span class="string">'0'</span> || a&gt;<span class="string">'9'</span>) &#123;<span class="keyword">if</span>(a==<span class="string">'-'</span>) f=<span class="number">-1</span>; a=getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(a&gt;=<span class="string">'0'</span> &amp;&amp; a&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+a-<span class="string">'0'</span>,a=getchar();</div><div class="line">    <span class="keyword">return</span> x*f;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> n,mx[N][<span class="number">20</span>],mn[N][<span class="number">20</span>],ans[N],Log[N];</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Max</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> (<span class="keyword">int</span>)((<span class="keyword">double</span>)x*<span class="number">1.05</span>+eps);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Min</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> (<span class="keyword">int</span>)((<span class="keyword">double</span>)x*<span class="number">0.95</span>+<span class="number">1</span>-eps);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pre</span><span class="params">()</span></span>&#123;</div><div class="line">    Log[<span class="number">0</span>]=<span class="number">-1</span>; <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) Log[i]=Log[i&gt;&gt;<span class="number">1</span>]+<span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">18</span>;i++)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</div><div class="line">            mx[j][i]=max(mx[j][i<span class="number">-1</span>],mx[min(n,j+(<span class="number">1</span>&lt;&lt;(i<span class="number">-1</span>)))][i<span class="number">-1</span>]);</div><div class="line">            mn[j][i]=min(mn[j][i<span class="number">-1</span>],mn[min(n,j+(<span class="number">1</span>&lt;&lt;(i<span class="number">-1</span>)))][i<span class="number">-1</span>]);</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">qmx</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> max(mx[l][Log[r-l+<span class="number">1</span>]],mx[r-(<span class="number">1</span>&lt;&lt;Log[r-l+<span class="number">1</span>])+<span class="number">1</span>][Log[r-l+<span class="number">1</span>]]);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">qmn</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> min(mn[l][Log[r-l+<span class="number">1</span>]],mn[r-(<span class="number">1</span>&lt;&lt;Log[r-l+<span class="number">1</span>])+<span class="number">1</span>][Log[r-l+<span class="number">1</span>]]);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    ans[x]=INF;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n-x+<span class="number">1</span>;i++) ans[x]=min(ans[x],qmx(i,i+x<span class="number">-1</span>)-qmn(i,i+x<span class="number">-1</span>));</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dc</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(r-l&lt;=<span class="number">1</span>) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">if</span>(Max(ans[l])&gt;=Min(ans[r]))&#123;</div><div class="line">        <span class="keyword">int</span> tmp=Max(ans[l]);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=l+<span class="number">1</span>;i&lt;r;i++) ans[i]=tmp;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</div><div class="line">    cal(mid);</div><div class="line">    dc(l,mid); dc(mid,r);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    n=read(); <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) mx[i][<span class="number">0</span>]=mn[i][<span class="number">0</span>]=read();</div><div class="line">    pre();</div><div class="line">    cal(<span class="number">2</span>); cal(n); dc(<span class="number">2</span>,n);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans[i]);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题目精选 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 近似算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「51nod 1737」配对]]></title>
      <url>/2017/01/11/51nod1737/</url>
      <content type="html"><![CDATA[<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><blockquote>
<p><a href="https://www.51nod.com/onlineJudge/questionCode.html#!problemId=1737" target="_blank" rel="external">题目传送门</a></p>
</blockquote>
<h3 id="解题报告"><a href="#解题报告" class="headerlink" title="解题报告"></a>解题报告</h3><blockquote>
<p>其实是个很简单的题，但还是被绊了。这充分说明现在连简单题都做不来了555<br>单独考虑每条边。每个点对答案的贡献就是它被使用的次数乘以权值，而每条边的系数其实是互不影响的，而系数最大值就是它两端的点个数的min，把这个算出来加起来就完了。<br>为什么这样是对的，即为什么每个系数互不影响，因为完全可以构建一个以重心为中心的菊花图，那样构建完全可以满足每个点系数最大化。<br>感觉这个思维方式硬伤啊。。多做点题吧。。</p>
</blockquote>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>; <span class="keyword">char</span> a=getchar();</div><div class="line">    <span class="keyword">while</span>(a&lt;<span class="string">'0'</span> || a&gt;<span class="string">'9'</span>) &#123;<span class="keyword">if</span>(a==<span class="string">'-'</span>) f=<span class="number">-1</span>; a=getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(a&gt;=<span class="string">'0'</span> &amp;&amp; a&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+a-<span class="string">'0'</span>,a=getchar();</div><div class="line">    <span class="keyword">return</span> x*f;</div><div class="line">&#125;</div><div class="line"><span class="keyword">struct</span> edges&#123;</div><div class="line">    <span class="keyword">int</span> to,v,next;</div><div class="line">&#125;e[<span class="number">2</span>*N];</div><div class="line"><span class="keyword">int</span> n,head[N],cnt=<span class="number">1</span>,son[N];</div><div class="line">LL ans;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> u=read(),v=read(),c=read();</div><div class="line">    e[++cnt]=(edges)&#123;v,c,head[u]&#125;;head[u]=cnt;</div><div class="line">    e[++cnt]=(edges)&#123;u,c,head[v]&#125;;head[v]=cnt;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> fa)</span></span>&#123;</div><div class="line">    son[x]=<span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=e[i].next)&#123;</div><div class="line">        <span class="keyword">if</span>(e[i].to==fa) <span class="keyword">continue</span>;</div><div class="line">        dfs(e[i].to,x); son[x]+=son[e[i].to];</div><div class="line">        ans+=(LL)min(son[e[i].to],n-son[e[i].to])*e[i].v;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    n=read();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++) insert();</div><div class="line">    dfs(<span class="number">1</span>,<span class="number">0</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题目精选 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 贪心 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「UTR#2」T1]]></title>
      <url>/2017/01/09/UTRT1/</url>
      <content type="html"><![CDATA[<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><blockquote>
<p><a href="http://uoj.ac/contest/36/problem/278" target="_blank" rel="external">题目传送门</a></p>
</blockquote>
<h3 id="解题报告"><a href="#解题报告" class="headerlink" title="解题报告"></a>解题报告</h3><blockquote>
<p>题意：给定一个n，以下n个数（假定为fi），要求构造一个n个数的序列，使得这个序列每一个位置的最大上升子序列的长度等于对应的fi。<br>其实这道题是个很简单的题，之前7月也在BC上做到过，为什么要写呢，因为思维过程还是挺好的。<br>考虑我们要构造这么一个序列，每个位置要满足什么条件呢？首先，对于一个位置，这个位置之前的那些位置，如果它们的fi大于等于这个位置上的fi，那么我们给这个位置放的数一定要小于前面那些位置上的数，而对于小于这个位置的fi的那些位置，我们的值又要大于它们的值，也就是说安排后我们要保证fi大的位置分配给它的数一定要大。那么对于两个fi相同的位置，怎么办呢？一定是位置靠后的那个分配的小。为什么呢，很显然，如果大了的话，就可以使最大上升子序列的长度加1了。<br>所以这道题做法就出来了：以fi为第一关键字升序，下标为第二关键字降序，排一道序，然后对应地填上1-n这些数就好了。</p>
</blockquote>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100005</span></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>; <span class="keyword">char</span> a=getchar();</div><div class="line">    <span class="keyword">while</span>(a&lt;<span class="string">'0'</span> || a&gt;<span class="string">'9'</span>) &#123;<span class="keyword">if</span>(a==<span class="string">'-'</span>) f=<span class="number">-1</span>; a=getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(a&gt;=<span class="string">'0'</span> &amp;&amp; a&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+a-<span class="string">'0'</span>,a=getchar();</div><div class="line">    <span class="keyword">return</span> x*f;</div><div class="line">&#125;</div><div class="line"><span class="keyword">struct</span> data&#123;</div><div class="line">    <span class="keyword">int</span> num,pos;</div><div class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> data&amp; w)<span class="keyword">const</span>&#123;</div><div class="line">        <span class="keyword">if</span>(num==w.num) <span class="keyword">return</span> pos&gt;w.pos;</div><div class="line">        <span class="keyword">return</span> num&lt;w.num;</div><div class="line">    &#125;</div><div class="line">&#125;a[N];</div><div class="line"><span class="keyword">int</span> n,ans[N];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    n=read();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line">    a[i].num=read(),a[i].pos=i;</div><div class="line">    sort(a+<span class="number">1</span>,a+<span class="number">1</span>+n);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line">    ans[a[i].pos]=i;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d "</span>,ans[i]);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题目精选 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 构造 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「BZOJ4571」「SCOI2016」美味]]></title>
      <url>/2017/01/04/bzoj4571/</url>
      <content type="html"><![CDATA[<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><blockquote>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=4571" target="_blank" rel="external">题目传送门</a></p>
</blockquote>
<h3 id="解题报告"><a href="#解题报告" class="headerlink" title="解题报告"></a>解题报告</h3><blockquote>
<p>如果没有加法的话，这就是裸的可持久化trie，但是有加法后就很恶心了，怎么办？<br>一般来说异或总是每位独立，然后就进行贪心。这道题我们单独考虑每一位能否为1，贪心去搞。<br>具体来说，如果x当前一位上是1，那么我们能使这位为1的数的取值区间在a，a|（（i&lt;&lt;1）-1）中（其中a是已经确定了的高位，i为当前位），我们只要看是否存在有这么一个数，就能知道能否使得这个位置为1了。0的情况类似，不多加赘述。<br>别忘了最后a要异或x输出，被坑了一发。</p>
</blockquote>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 200005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M 1000005</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="keyword">inline</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>; <span class="keyword">char</span> a=getchar();</div><div class="line">    <span class="keyword">while</span>(a&lt;<span class="string">'0'</span> || a&gt;<span class="string">'9'</span>) &#123;<span class="keyword">if</span>(a==<span class="string">'-'</span>) f=<span class="number">-1</span>; a=getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(a&gt;=<span class="string">'0'</span> &amp;&amp; a&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+a-<span class="string">'0'</span>,a=getchar();</div><div class="line">    <span class="keyword">return</span> x*f;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> n,m;</div><div class="line"><span class="keyword">namespace</span> Chairman_Tree&#123;</div><div class="line">    <span class="keyword">struct</span> ct&#123;</div><div class="line">        <span class="keyword">int</span> son[<span class="number">2</span>],sz;</div><div class="line">    &#125;tr[<span class="number">10000005</span>];</div><div class="line">    <span class="keyword">int</span> size,root[N];</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span>&amp; y,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> v)</span></span>&#123;</div><div class="line">        y=++size; tr[y].sz=tr[x].sz+<span class="number">1</span>;</div><div class="line">        <span class="built_in">memcpy</span>(tr[y].son,tr[x].son,<span class="keyword">sizeof</span>(tr[x].son));</div><div class="line">        <span class="keyword">if</span>(l==r) <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span>(v&lt;=mid) insert(tr[x].son[<span class="number">0</span>],tr[y].son[<span class="number">0</span>],l,mid,v);</div><div class="line">        <span class="keyword">else</span> insert(tr[x].son[<span class="number">1</span>],tr[y].son[<span class="number">1</span>],mid+<span class="number">1</span>,r,v);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(l==L &amp;&amp; r==R) <span class="keyword">return</span> tr[y].sz&gt;tr[x].sz;</div><div class="line">        <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span>(mid&gt;=R) <span class="keyword">return</span> query(tr[x].son[<span class="number">0</span>],tr[y].son[<span class="number">0</span>],l,mid,L,R);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(mid&lt;L) <span class="keyword">return</span> query(tr[x].son[<span class="number">1</span>],tr[y].son[<span class="number">1</span>],mid+<span class="number">1</span>,r,L,R);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">return</span> query(tr[x].son[<span class="number">0</span>],tr[y].son[<span class="number">0</span>],l,mid,L,mid) || query(tr[x].son[<span class="number">1</span>],tr[y].son[<span class="number">1</span>],mid+<span class="number">1</span>,r,mid+<span class="number">1</span>,R);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CT Chairman_Tree</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    n=read(); m=read();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) CT::insert(CT::root[i<span class="number">-1</span>],CT::root[i],<span class="number">0</span>,M,read());</div><div class="line">    <span class="keyword">while</span>(m--)&#123;</div><div class="line">        <span class="keyword">int</span> b=read(),x=read(),L=read(),R=read(),l,r,a=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">17</span>;i&gt;=<span class="number">0</span>;i--)</div><div class="line">            <span class="keyword">if</span>(b&amp;(<span class="number">1</span>&lt;&lt;i))&#123;</div><div class="line">                l=max(<span class="number">0</span>,a-x); r=(a|((<span class="number">1</span>&lt;&lt;i)<span class="number">-1</span>))-x;</div><div class="line">                <span class="keyword">if</span>(!r || !CT::query(CT::root[L<span class="number">-1</span>],CT::root[R],<span class="number">0</span>,M,l,r)) a|=(<span class="number">1</span>&lt;&lt;i);</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                a|=(<span class="number">1</span>&lt;&lt;i);</div><div class="line">                l=max(<span class="number">0</span>,a-x); r=(a|((<span class="number">1</span>&lt;&lt;i)<span class="number">-1</span>))-x;</div><div class="line">                <span class="keyword">if</span>(!r || !CT::query(CT::root[L<span class="number">-1</span>],CT::root[R],<span class="number">0</span>,M,l,r)) a^=(<span class="number">1</span>&lt;&lt;i); </div><div class="line">            &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,a^b);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题目精选 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 可持久化线段树 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「BZOJ2006」「NOI2010」超级钢琴]]></title>
      <url>/2017/01/04/bzoj2006/</url>
      <content type="html"><![CDATA[<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><blockquote>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=2006" target="_blank" rel="external">题目传送门</a></p>
</blockquote>
<h3 id="解题报告"><a href="#解题报告" class="headerlink" title="解题报告"></a>解题报告</h3><blockquote>
<p>刚拿到题的时候想的是，对于每个点，如果以它开头，那么之后的L-1个一定被选，剩下的R-L个可选，对这一部分进行最大前缀和就好啦！用主席树搞搞，建树的时候维护下就好了。<br>但有个问题，以这个区间为开头的情况不止一种，这种做法确实能求出以它开头的最大值，那次大值，k大值呢？这也是有可能计入答案的。所以不行。<br>正解是，对于一个位置，如果我们考虑以它结尾，这个区间等于它的前缀和减去前面一个位置的前缀和，其中位置i满足i离这个位置不小于L不超过R。对于这个位置，我们只需要找这个区间内的区间k大，用这个位置前缀和减掉就好了，然后去求区间k+1大。放入一个堆中取k次就好。</p>
</blockquote>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 500005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>; <span class="keyword">char</span> a=getchar();</div><div class="line">    <span class="keyword">while</span>(a&lt;<span class="string">'0'</span> || a&gt;<span class="string">'9'</span>) &#123;<span class="keyword">if</span>(a==<span class="string">'-'</span>) f=<span class="number">-1</span>; a=getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(a&gt;=<span class="string">'0'</span> &amp;&amp; a&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+a-<span class="string">'0'</span>,a=getchar();</div><div class="line">    <span class="keyword">return</span> x*f;</div><div class="line">&#125;</div><div class="line">LL sum[N];</div><div class="line"><span class="keyword">struct</span> data&#123;</div><div class="line">    <span class="keyword">int</span> num,k;LL val;</div><div class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> data&amp; w)<span class="keyword">const</span>&#123;</div><div class="line">        <span class="keyword">return</span> val&lt;w.val;</div><div class="line">    &#125;</div><div class="line">&#125;t;</div><div class="line">priority_queue&lt;data&gt;q;</div><div class="line"><span class="keyword">namespace</span> Chairman_Tree&#123;</div><div class="line">    <span class="keyword">int</span> root[N],size;</div><div class="line">    <span class="keyword">struct</span> ct&#123;</div><div class="line">        <span class="keyword">int</span> son[<span class="number">2</span>],sz;</div><div class="line">    &#125;tr[<span class="number">20000005</span>];</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span>&amp; y,LL l,LL r,LL v)</span></span>&#123;</div><div class="line">        y=++size; tr[y].sz=tr[x].sz+<span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span>(l==r) <span class="keyword">return</span>;</div><div class="line">        <span class="built_in">memcpy</span>(tr[y].son,tr[x].son,<span class="keyword">sizeof</span>(tr[y].son));</div><div class="line">        <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span>(mid&gt;=v) insert(tr[x].son[<span class="number">0</span>],tr[y].son[<span class="number">0</span>],l,mid,v);</div><div class="line">        <span class="keyword">else</span> insert(tr[x].son[<span class="number">1</span>],tr[y].son[<span class="number">1</span>],mid+<span class="number">1</span>,r,v);</div><div class="line">    &#125;</div><div class="line">    <span class="function">LL <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,LL l,LL r,<span class="keyword">int</span> k)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(tr[y].sz-tr[x].sz&lt;k) <span class="keyword">return</span> <span class="number">1e9</span>;</div><div class="line">        <span class="keyword">if</span>(l==r) <span class="keyword">return</span> l;</div><div class="line">        <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>,s=tr[tr[y].son[<span class="number">0</span>]].sz-tr[tr[x].son[<span class="number">0</span>]].sz;</div><div class="line">        <span class="keyword">if</span>(k&lt;=s) <span class="keyword">return</span> query(tr[x].son[<span class="number">0</span>],tr[y].son[<span class="number">0</span>],l,mid,k);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">return</span> query(tr[x].son[<span class="number">1</span>],tr[y].son[<span class="number">1</span>],mid+<span class="number">1</span>,r,k-s);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CT Chairman_Tree</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> L -500000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> R 500000005</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> n=read(),k=read(),l=read(),r=read();</div><div class="line">    LL ans=<span class="number">0</span>; CT::insert(<span class="number">0</span>,CT::root[<span class="number">0</span>],L,R,<span class="number">0</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) sum[i]=sum[i<span class="number">-1</span>]+read();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) CT::insert(CT::root[i<span class="number">-1</span>],CT::root[i],L,R,sum[i]);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;=n;i++)&#123;</div><div class="line">        <span class="keyword">int</span> ri=i-l,le=i-r<span class="number">-1</span>;</div><div class="line">        LL tmp;</div><div class="line">        <span class="keyword">if</span>(le&lt;<span class="number">0</span>) tmp=CT::query(<span class="number">0</span>,CT::root[ri],L,R,<span class="number">1</span>);</div><div class="line">        <span class="keyword">else</span> tmp=CT::query(CT::root[le],CT::root[ri],L,R,<span class="number">1</span>);</div><div class="line">        q.push((data)&#123;i,<span class="number">1</span>,sum[i]-tmp&#125;);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span>(k--)&#123;</div><div class="line">        t=q.top(); q.pop();</div><div class="line">        ans+=t.val;</div><div class="line">        <span class="keyword">int</span> ri=t.num-l,le=t.num-r<span class="number">-1</span>; LL tmp;</div><div class="line">        <span class="keyword">if</span>(le&lt;<span class="number">0</span>) tmp=CT::query(<span class="number">0</span>,CT::root[ri],L,R,t.k+<span class="number">1</span>);</div><div class="line">        <span class="keyword">else</span> tmp=CT::query(CT::root[le],CT::root[ri],L,R,t.k+<span class="number">1</span>);</div><div class="line">        q.push((data)&#123;t.num,t.k+<span class="number">1</span>,sum[t.num]-tmp&#125;);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;ans;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题目精选 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 堆 </tag>
            
            <tag> 可持久化线段树 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「BZOJ3600」没有人的算术]]></title>
      <url>/2017/01/03/bzoj3600/</url>
      <content type="html"><![CDATA[<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><blockquote>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=3600" target="_blank" rel="external">题目传送门</a></p>
</blockquote>
<h3 id="解题报告"><a href="#解题报告" class="headerlink" title="解题报告"></a>解题报告</h3><blockquote>
<p>膜拜VFK大爷的神题！<br>其实一开始思路挺清楚的，如果我们能做到用一个实数去代表“数”，这就是裸的动态区间最值查询。<br>关键是怎么用实数去表示。如果我们单纯的把两个数进行O（1）运算去得到一个实数，这样很轻松就会被卡掉，因为无论是longlong还是double都是有限度的。怎么做呢？<br>这里有一个技巧：我们维护一个重量平衡树，每个节点管辖一个区间，这个区间的中位数为这个点的权值，而它的左儿子管辖左半边，右儿子管辖右半边。<br>问题来了，这不是差不多吗？并不是这样。因为我们会重构，树高有保证，所以我们肯定能表示出每一个数，而且还是绰绰有余。<br>重量平衡树可以用非旋转treap或替罪羊树。<br>(吐槽一句，第一次写替罪羊树，真的好TM难写啊还套了个线段树而且我常数大的飞起，写了一整天)</p>
</blockquote>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 500005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></div><div class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    LL x=<span class="number">0</span>,f=<span class="number">1</span>; <span class="keyword">char</span> a=getchar();</div><div class="line">    <span class="keyword">while</span>(a&lt;<span class="string">'0'</span> || a&gt;<span class="string">'9'</span>) &#123;<span class="keyword">if</span>(a==<span class="string">'-'</span>) f=<span class="number">-1</span>; a=getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(a&gt;=<span class="string">'0'</span> &amp;&amp; a&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+a-<span class="string">'0'</span>,a=getchar();</div><div class="line">    <span class="keyword">return</span> x*f;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> n,m; <span class="keyword">char</span> st[<span class="number">5</span>];</div><div class="line">LL MX;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SGT Scapegoat_Tree</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ST Segment_Tree</span></div><div class="line"></div><div class="line"><span class="keyword">namespace</span> Scapegoat_Tree&#123;</div><div class="line">    <span class="meta">#<span class="meta-keyword">define</span> eps 1e-12</span></div><div class="line">    <span class="keyword">const</span> <span class="keyword">double</span> alpha=<span class="number">0.75</span>;</div><div class="line">    <span class="keyword">int</span> ltst,wh,size=<span class="number">1</span>,tmp[N],root=<span class="number">1</span>,anew;</div><div class="line">    <span class="keyword">struct</span> sgt&#123;</div><div class="line">        LL l,r,mid; <span class="keyword">int</span> fir,sec;</div><div class="line">        <span class="keyword">int</span> son[<span class="number">2</span>],sz;</div><div class="line">    &#125;tr[N];</div><div class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">dcmp</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="built_in">fabs</span>((<span class="keyword">double</span>)tr[x].sz*alpha-(<span class="keyword">double</span>)tr[y].sz)&lt;eps) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">return</span> (<span class="keyword">double</span>)tr[x].sz*alpha&gt;(<span class="keyword">double</span>)tr[y].sz?<span class="number">1</span>:<span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">        tr[x].sz=tr[tr[x].son[<span class="number">0</span>]].sz+tr[tr[x].son[<span class="number">1</span>]].sz+<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">balance</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> dcmp(x,tr[x].son[<span class="number">0</span>])&gt;=<span class="number">0</span> &amp;&amp; dcmp(x,tr[x].son[<span class="number">1</span>])&gt;=<span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">travel</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(!x) <span class="keyword">return</span>;</div><div class="line">        travel(tr[x].son[<span class="number">0</span>]);</div><div class="line">        tmp[++tmp[<span class="number">0</span>]]=x;</div><div class="line">        travel(tr[x].son[<span class="number">1</span>]);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rebuild</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,LL L,LL R)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(l&gt;r) &#123;x=<span class="number">0</span>; <span class="keyword">return</span>;&#125;</div><div class="line">        <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</div><div class="line">        LL M=(L+R)/<span class="number">2</span>;</div><div class="line">        x=tmp[mid]; tr[x].l=L; tr[x].r=R; tr[x].mid=M;</div><div class="line">        <span class="keyword">if</span>(l==r) &#123;tr[x].sz=<span class="number">1</span>; tr[x].son[<span class="number">0</span>]=<span class="number">0</span>; tr[x].son[<span class="number">1</span>]=<span class="number">0</span>; <span class="keyword">return</span>;&#125;</div><div class="line">        rebuild(tr[x].son[<span class="number">0</span>],l,mid<span class="number">-1</span>,L,M); rebuild(tr[x].son[<span class="number">1</span>],mid+<span class="number">1</span>,r,M,R);</div><div class="line">        update(x);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span>&amp; x,LL L,LL R,<span class="keyword">int</span> fir,<span class="keyword">int</span> sec)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(!x) &#123;x=++size; anew=x;tr[x]=(sgt)&#123;L,R,(L+R)/<span class="number">2</span>,fir,sec,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;; <span class="keyword">return</span>;&#125;</div><div class="line">        <span class="keyword">if</span>(tr[tr[x].fir].mid==tr[fir].mid &amp;&amp; tr[tr[x].sec].mid==tr[sec].mid) &#123;anew=x; <span class="keyword">return</span>;&#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(tr[tr[x].fir].mid==tr[fir].mid)&#123;</div><div class="line">            <span class="keyword">if</span>(tr[tr[x].sec].mid&gt;tr[sec].mid) insert(tr[x].son[<span class="number">0</span>],tr[x].l,tr[x].mid,fir,sec);</div><div class="line">            <span class="keyword">else</span> insert(tr[x].son[<span class="number">1</span>],tr[x].mid,tr[x].r,fir,sec);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">if</span>(tr[tr[x].fir].mid&gt;tr[fir].mid) insert(tr[x].son[<span class="number">0</span>],tr[x].l,tr[x].mid,fir,sec);</div><div class="line">            <span class="keyword">else</span> insert(tr[x].son[<span class="number">1</span>],tr[x].mid,tr[x].r,fir,sec);</div><div class="line">        &#125;</div><div class="line">        update(x);</div><div class="line">        <span class="keyword">if</span>(tr[x].son[<span class="number">0</span>] &amp;&amp; !balance(tr[x].son[<span class="number">0</span>])) ltst=x,wh=<span class="number">0</span>;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(tr[x].son[<span class="number">1</span>] &amp;&amp; !balance(tr[x].son[<span class="number">1</span>])) ltst=x,wh=<span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span>(x==root &amp;&amp; !balance(x)) tmp[<span class="number">0</span>]=<span class="number">0</span>,travel(root),rebuild(root,<span class="number">1</span>,tmp[<span class="number">0</span>],<span class="number">1</span>,MX);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">namespace</span> Segment_Tree&#123;</div><div class="line">    <span class="keyword">int</span> a[N];</div><div class="line">    <span class="keyword">struct</span> seg&#123;</div><div class="line">        <span class="keyword">int</span> l,r,son[<span class="number">2</span>],mx_pos,num;         </div><div class="line">    &#125;tr[N];</div><div class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(SGT::tr[tr[tr[tr[x].son[<span class="number">0</span>]].mx_pos].num].mid==SGT::tr[tr[tr[tr[x].son[<span class="number">1</span>]].mx_pos].num].mid)&#123;</div><div class="line">            <span class="keyword">int</span> le=tr[tr[x].son[<span class="number">0</span>]].mx_pos,ri=tr[tr[x].son[<span class="number">1</span>]].mx_pos;</div><div class="line">            tr[x].mx_pos=tr[le].l&lt;tr[ri].l?le:ri;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(SGT::tr[tr[tr[tr[x].son[<span class="number">0</span>]].mx_pos].num].mid&gt;SGT::tr[tr[tr[tr[x].son[<span class="number">1</span>]].mx_pos].num].mid) </div><div class="line">        tr[x].mx_pos=tr[tr[x].son[<span class="number">0</span>]].mx_pos;</div><div class="line">        <span class="keyword">else</span> tr[x].mx_pos=tr[tr[x].son[<span class="number">1</span>]].mx_pos;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(l==r) &#123;tr[x]=(seg)&#123;l,r,<span class="number">0</span>,<span class="number">0</span>,x,<span class="number">1</span>&#125;;<span class="keyword">return</span>;&#125;</div><div class="line">        <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>; tr[x].l=l; tr[x].r=r;</div><div class="line">        tr[x].son[<span class="number">0</span>]=x&lt;&lt;<span class="number">1</span>; build(tr[x].son[<span class="number">0</span>],l,mid);</div><div class="line">        tr[x].son[<span class="number">1</span>]=x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>; build(tr[x].son[<span class="number">1</span>],mid+<span class="number">1</span>,r);</div><div class="line">        update(x);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> ai,<span class="keyword">int</span> v)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> l=tr[x].l,r=tr[x].r;</div><div class="line">        <span class="keyword">if</span>(l==r) &#123;tr[x].num=v; <span class="keyword">return</span>;&#125;</div><div class="line">        <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span>(ai&lt;=mid) modify(tr[x].son[<span class="number">0</span>],ai,v);</div><div class="line">        <span class="keyword">else</span> modify(tr[x].son[<span class="number">1</span>],ai,v);</div><div class="line">        update(x);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> l=tr[x].l,r=tr[x].r;</div><div class="line">        <span class="keyword">if</span>(l==L &amp;&amp; r==R) <span class="keyword">return</span> tr[x].mx_pos;</div><div class="line">        <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span>(R&lt;=mid) <span class="keyword">return</span> query(tr[x].son[<span class="number">0</span>],L,R);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(mid&lt;L) <span class="keyword">return</span> query(tr[x].son[<span class="number">1</span>],L,R);</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">int</span> le=query(tr[x].son[<span class="number">0</span>],L,mid),ri=query(tr[x].son[<span class="number">1</span>],mid+<span class="number">1</span>,R);</div><div class="line">            <span class="keyword">if</span>(SGT::tr[tr[le].num].mid==SGT::tr[tr[ri].num].mid) <span class="keyword">return</span> tr[le].l&lt;tr[ri].l?le:ri;</div><div class="line">            <span class="keyword">return</span> SGT::tr[tr[le].num].mid&gt;SGT::tr[tr[ri].num].mid?le:ri;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    n=read(); m=read(); MX=<span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">60</span>;i++) MX*=<span class="number">2</span>;</div><div class="line">    ST::build(<span class="number">1</span>,<span class="number">1</span>,n); SGT::tr[<span class="number">1</span>]=(SGT::sgt)&#123;<span class="number">1</span>,MX,(<span class="number">1</span>+MX)/<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) ST::a[i]=<span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(m--)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,st); <span class="keyword">int</span> k,l=read(),r=read();</div><div class="line">        <span class="keyword">if</span>(st[<span class="number">0</span>]==<span class="string">'C'</span>)&#123;</div><div class="line">            k=read(); </div><div class="line">            l=ST::a[l]; r=ST::a[r]; SGT::ltst=<span class="number">0</span>; SGT::insert(SGT::root,<span class="number">1</span>,MX,l,r);</div><div class="line">            <span class="keyword">if</span>(SGT::ltst) &#123;</div><div class="line">                SGT::tmp[<span class="number">0</span>]=<span class="number">0</span>; SGT::travel(SGT::tr[SGT::ltst].son[SGT::wh]); </div><div class="line">                LL L=SGT::tr[SGT::tr[SGT::ltst].son[SGT::wh]].l,R=SGT::tr[SGT::tr[SGT::ltst].son[SGT::wh]].r;</div><div class="line">                SGT::rebuild(SGT::tr[SGT::ltst].son[SGT::wh],<span class="number">1</span>,SGT::tmp[<span class="number">0</span>],L,R);</div><div class="line">            &#125;</div><div class="line">            ST::modify(<span class="number">1</span>,k,SGT::anew),ST::a[k]=SGT::anew;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">int</span> ans=ST::query(<span class="number">1</span>,l,r);</div><div class="line">            ans=ST::tr[ans].l;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题目精选 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 线段树 </tag>
            
            <tag> 平衡树_替罪羊树 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「BZOJ4213」贪吃蛇]]></title>
      <url>/2017/01/02/bzoj4213/</url>
      <content type="html"><![CDATA[<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><blockquote>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=4213" target="_blank" rel="external">题目传送门</a></p>
</blockquote>
<h3 id="解题报告"><a href="#解题报告" class="headerlink" title="解题报告"></a>解题报告</h3><blockquote>
<p>现在看到网格而且数据范围小的基本上的是网络流黑白染色啊。。（废话你在做网络流的题啊）<br>其实这道题和之前那个只用环覆盖的很像，只不过这里可以用路径。之前我们考虑的是每个点都会被贯穿，也就说度数会是2，所以当初那道题我们用的是二分图跑费用流，但这里有路径，怎么办？<br>首先图的基本关系很简单，相邻点之间连普通的容量1，费用0就好了。然后我们考虑强制要让每个点被贯穿，黑白染色后，用下限去限制，S向黑点连下限为2的边，白点向T连下限为2的边。问题来了，有的方案是有路径的，路径的端点并没有被贯穿，这怎么整？<br>巧妙之处来了。对于端点，我们现在的问题是多了流量，怎么办？把它直接导去就完了。也就是说，我们对于边界上的黑点，向T连一条无下限，上限为1，费用为1的边，白色同理。为什么巧妙呢，这不但解决了端点度数为1的问题，而且一旦出现这种情况，就说明出现了路径，对答案产生贡献，我们再加上费用来记录，跑最小费用可行流就完了。答案记得除2，因为头尾算了两次。判断有无解看有无可行流就好了。</p>
</blockquote>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>; <span class="keyword">char</span> a=getchar();</div><div class="line">    <span class="keyword">while</span>(a&lt;<span class="string">'0'</span> || a&gt;<span class="string">'9'</span>) &#123;<span class="keyword">if</span>(a==<span class="string">'-'</span>) f=<span class="number">-1</span>; a=getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(a&gt;=<span class="string">'0'</span> &amp;&amp; a&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+a-<span class="string">'0'</span>,a=getchar();</div><div class="line">    <span class="keyword">return</span> x*f;</div><div class="line">&#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1e9</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 505</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> in ini</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> id(i,j) (((i)-1)*m+(j))</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> dir[<span class="number">4</span>][<span class="number">2</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>&#125;;</div><div class="line"><span class="keyword">int</span> ans,n,m,head[N],cnt,d[N],a[N],p[N],S,SS,T,TT,TOT,in[N];</div><div class="line"><span class="keyword">char</span> st[<span class="number">25</span>][<span class="number">25</span>];</div><div class="line"><span class="keyword">bool</span> vis[N];</div><div class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;</div><div class="line"><span class="keyword">struct</span> edges&#123;</div><div class="line">    <span class="keyword">int</span> fr,to,cap,flow,cost,next;</div><div class="line">&#125;e[<span class="number">2</span>*N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> f,<span class="keyword">int</span> c)</span></span>&#123;</div><div class="line">    e[cnt]=(edges)&#123;u,v,f,<span class="number">0</span>,c,head[u]&#125;;head[u]=cnt++;</div><div class="line">    e[cnt]=(edges)&#123;v,u,<span class="number">0</span>,<span class="number">0</span>,-c,head[v]&#125;;head[v]=cnt++;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">spfa</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">memset</span>(d,<span class="number">0x3f</span>,<span class="keyword">sizeof</span>(d));</div><div class="line">    d[S]=<span class="number">0</span>; a[S]=INF; q.push(S);</div><div class="line">    <span class="keyword">while</span>(!q.empty())&#123;</div><div class="line">        <span class="keyword">int</span> x=q.front(); q.pop(); vis[x]=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i&gt;=<span class="number">0</span>;i=e[i].next)</div><div class="line">            <span class="keyword">if</span>(d[e[i].to]&gt;d[x]+e[i].cost &amp;&amp; e[i].flow&lt;e[i].cap)&#123;</div><div class="line">                d[e[i].to]=d[x]+e[i].cost; p[e[i].to]=i;</div><div class="line">                a[e[i].to]=min(a[x],e[i].cap-e[i].flow);</div><div class="line">                <span class="keyword">if</span>(!vis[e[i].to]) vis[e[i].to]=<span class="number">1</span>,q.push(e[i].to);</div><div class="line">            &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> d[T]&lt;INF;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">mincf</span><span class="params">()</span></span>&#123;</div><div class="line">    ans+=a[T]*d[T]; TOT-=a[T];</div><div class="line">    <span class="keyword">int</span> u=T;</div><div class="line">    <span class="keyword">while</span>(u!=S)&#123;</div><div class="line">        e[p[u]].flow+=a[T];</div><div class="line">        e[p[u]^<span class="number">1</span>].flow-=a[T];</div><div class="line">        u=e[p[u]].fr;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span>(head));</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%s"</span>,st[++n]+<span class="number">1</span>)!=EOF); n--;</div><div class="line">    m=<span class="built_in">strlen</span>(st[<span class="number">1</span>]+<span class="number">1</span>);</div><div class="line">    SS=<span class="number">0</span>; TT=n*m+<span class="number">1</span>; S=TT+<span class="number">1</span>; T=TT+<span class="number">2</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</div><div class="line">            <span class="keyword">if</span>(st[i][j]==<span class="string">'#'</span>) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">if</span>((i+j)&amp;<span class="number">1</span>)&#123;</div><div class="line">                <span class="keyword">if</span>(i==<span class="number">1</span> || i==n || j==<span class="number">1</span> || j==m) insert(SS,id(i,j),<span class="number">1</span>,<span class="number">1</span>); </div><div class="line">                in[TT]+=<span class="number">2</span>; in[id(i,j)]-=<span class="number">2</span>;    </div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                <span class="keyword">if</span>(i==<span class="number">1</span> || i==n || j==<span class="number">1</span> || j==m) insert(id(i,j),TT,<span class="number">1</span>,<span class="number">1</span>);</div><div class="line">                in[SS]-=<span class="number">2</span>; in[id(i,j)]+=<span class="number">2</span>;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">4</span>;k++)&#123;</div><div class="line">                    <span class="keyword">int</span> tx=i+dir[k][<span class="number">0</span>],ty=j+dir[k][<span class="number">1</span>];</div><div class="line">                    <span class="keyword">if</span>(tx&lt;<span class="number">1</span> || tx&gt;n || ty&lt;<span class="number">1</span> || ty&gt;m || st[tx][ty]==<span class="string">'#'</span>) <span class="keyword">continue</span>;</div><div class="line">                    insert(id(i,j),id(tx,ty),<span class="number">1</span>,<span class="number">0</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    insert(TT,SS,INF,<span class="number">0</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=SS;i&lt;=TT;i++)&#123;</div><div class="line">        <span class="keyword">if</span>(in[i]&gt;<span class="number">0</span>) insert(S,i,in[i],<span class="number">0</span>),TOT+=in[i];</div><div class="line">        <span class="keyword">if</span>(in[i]&lt;<span class="number">0</span>) insert(i,T,-in[i],<span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span>(spfa()) mincf();</div><div class="line">    <span class="keyword">if</span>(!TOT) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans/<span class="number">2</span>);</div><div class="line">    <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"-1"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题目精选 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 网络流_费用流 </tag>
            
            <tag> 网络流_无源汇上下界网络流 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「Topcoder SRM570 900」CurvyonRails]]></title>
      <url>/2016/12/30/SRM570_900/</url>
      <content type="html"><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote>
<p>给定一个网格，一些格子是障碍不用管，剩余的格子是城市，你可以修建铁路，铁路的形状可以是直的或者弯的，也就是说可以以这个点为节点连接它四联通的其中两个方块。要求用一个或多个环来覆盖所有城市。对于有些关键点，如果这里是直轨道，会付出1的代价，如果不能覆盖，输出-1，否则输出最小代价。</p>
</blockquote>
<h3 id="解题报告"><a href="#解题报告" class="headerlink" title="解题报告"></a>解题报告</h3><blockquote>
<p>这次该最小费用流了。x先考虑怎么判断有无解。很明显，既然是棋盘，想不染色不二分图都难。染成黑白后，对于黑点，S向其连2，黑点向周围的白点连1，白点向T连2，判断是否满流就好了。那么怎么计算代价呢？我们发现，如果要付出代价，那么一定是两个开口都给了同一列或者同一行，为了对此限制，我们拆点，分别管辖行和列。<br>如果这个点是黑关键点，我们向行对应的分身连一个容量1，费用0的边，再连一个容量1，费用1的边，表示如果只用一条边，不会产生费用，否则产生两条边的费用。列的话同理。<br>白关键点就不赘述了，其实也就是相较于反了一下。对于普通点，直接相对应的两个点分别连（2,0）就好了（因为没有限制），然后黑连向对应的白就好了。<br>跑费用流，不满流无解，满流输出费用即可。</p>
</blockquote>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1e9</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 5005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> id(i,j) ((i-1)*m+j)</span></div><div class="line"><span class="keyword">int</span> n,m,TOT,S,T,P,head[N],d[N],a[N],p[N],cnt;</div><div class="line"><span class="keyword">bool</span> vis[N];</div><div class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;</div><div class="line"><span class="keyword">char</span> field[N][N];</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>; <span class="keyword">char</span> a=getchar();</div><div class="line">    <span class="keyword">while</span>(a&lt;<span class="string">'0'</span> || a&gt;<span class="string">'9'</span>) &#123;<span class="keyword">if</span>(a==<span class="string">'-'</span>) f=<span class="number">-1</span>; a=getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(a&gt;=<span class="string">'0'</span> &amp;&amp; a&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+a-<span class="string">'0'</span>,a=getchar();</div><div class="line">    <span class="keyword">return</span> x*f;</div><div class="line">&#125;</div><div class="line"><span class="keyword">struct</span> edges&#123;</div><div class="line">    <span class="keyword">int</span> fr,to,cap,flow,cost,next;</div><div class="line">&#125;e[<span class="number">2</span>*N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> f,<span class="keyword">int</span> c)</span></span>&#123;</div><div class="line">    e[cnt]=(edges)&#123;u,v,f,<span class="number">0</span>,c,head[u]&#125;;head[u]=cnt++;</div><div class="line">    e[cnt]=(edges)&#123;v,u,<span class="number">0</span>,<span class="number">0</span>,-c,head[v]&#125;;head[v]=cnt++;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">spfa</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">memset</span>(d,<span class="number">0x3f</span>,<span class="keyword">sizeof</span>(d));</div><div class="line">    d[S]=<span class="number">0</span>; a[S]=INF; q.push(S);</div><div class="line">    <span class="keyword">while</span>(!q.empty())&#123;</div><div class="line">        <span class="keyword">int</span> x=q.front(); q.pop(); vis[x]=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i&gt;=<span class="number">0</span>;i=e[i].next)</div><div class="line">            <span class="keyword">if</span>(d[e[i].to]&gt;d[x]+e[i].cost &amp;&amp; e[i].flow&lt;e[i].cap)&#123;</div><div class="line">                d[e[i].to]=d[x]+e[i].cost; p[e[i].to]=i;</div><div class="line">                a[e[i].to]=min(a[x],e[i].cap-e[i].flow);</div><div class="line">                <span class="keyword">if</span>(!vis[e[i].to]) vis[e[i].to]=<span class="number">1</span>,q.push(e[i].to);</div><div class="line">            &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> d[T]&lt;INF;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">mincf</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> u=T;</div><div class="line">    <span class="keyword">while</span>(u!=S)&#123;</div><div class="line">        e[p[u]].flow+=a[T];</div><div class="line">        e[p[u]^<span class="number">1</span>].flow-=a[T];</div><div class="line">        u=e[p[u]].fr;</div><div class="line">    &#125;</div><div class="line">    TOT-=a[T];</div><div class="line">    <span class="keyword">return</span> a[T]*d[T];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    n=read(); m=read();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,field[i]+<span class="number">1</span>);</div><div class="line">    S=<span class="number">0</span>; T=<span class="number">3</span>*n*m+<span class="number">1</span>; P=n*m; TOT=<span class="number">0</span>;</div><div class="line">    <span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span>(head));</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</div><div class="line">               <span class="keyword">if</span>(field[i][j]==<span class="string">'w'</span>) <span class="keyword">continue</span>;    </div><div class="line">            <span class="keyword">if</span>((i+j)%<span class="number">2</span>==<span class="number">0</span>)&#123;</div><div class="line">                insert(S,id(i,j),<span class="number">2</span>,<span class="number">0</span>); TOT+=<span class="number">2</span>;</div><div class="line">                <span class="keyword">if</span>(field[i][j]!=<span class="string">'C'</span>) insert(id(i,j),id(i,j)+<span class="number">2</span>*P,<span class="number">2</span>,<span class="number">0</span>),insert(id(i,j),id(i,j)+P,<span class="number">2</span>,<span class="number">0</span>);</div><div class="line">                <span class="keyword">else</span> &#123;</div><div class="line">                    insert(id(i,j),id(i,j)+P,<span class="number">1</span>,<span class="number">1</span>); insert(id(i,j),id(i,j)+P,<span class="number">1</span>,<span class="number">0</span>);</div><div class="line">                    insert(id(i,j),id(i,j)+<span class="number">2</span>*P,<span class="number">1</span>,<span class="number">1</span>); insert(id(i,j),id(i,j)+<span class="number">2</span>*P,<span class="number">1</span>,<span class="number">0</span>);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span>(j<span class="number">-1</span>&gt;<span class="number">0</span> &amp;&amp; field[i][j<span class="number">-1</span>]!=<span class="string">'w'</span>) insert(id(i,j)+P,id(i,j<span class="number">-1</span>)+P,<span class="number">1</span>,<span class="number">0</span>);</div><div class="line">                <span class="keyword">if</span>(j+<span class="number">1</span>&lt;=m &amp;&amp; field[i][j+<span class="number">1</span>]!=<span class="string">'w'</span> ) insert(id(i,j)+P,id(i,j+<span class="number">1</span>)+P,<span class="number">1</span>,<span class="number">0</span>);</div><div class="line">                <span class="keyword">if</span>(i<span class="number">-1</span>&gt;<span class="number">0</span> &amp;&amp; field[i<span class="number">-1</span>][j]!=<span class="string">'w'</span>) insert(id(i,j)+<span class="number">2</span>*P,id(i<span class="number">-1</span>,j)+<span class="number">2</span>*P,<span class="number">1</span>,<span class="number">0</span>);</div><div class="line">                <span class="keyword">if</span>(i+<span class="number">1</span>&lt;=n &amp;&amp; field[i+<span class="number">1</span>][j]!=<span class="string">'w'</span>) insert(id(i,j)+<span class="number">2</span>*P,id(i+<span class="number">1</span>,j)+<span class="number">2</span>*P,<span class="number">1</span>,<span class="number">0</span>);</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                insert(id(i,j),T,<span class="number">2</span>,<span class="number">0</span>);</div><div class="line">                <span class="keyword">if</span>(field[i][j]!=<span class="string">'C'</span>) insert(id(i,j)+<span class="number">2</span>*P,id(i,j),<span class="number">2</span>,<span class="number">0</span>),insert(id(i,j)+P,id(i,j),<span class="number">2</span>,<span class="number">0</span>);</div><div class="line">                <span class="keyword">else</span>&#123;</div><div class="line">                    insert(id(i,j)+P,id(i,j),<span class="number">1</span>,<span class="number">1</span>); insert(id(i,j)+P,id(i,j),<span class="number">1</span>,<span class="number">0</span>);</div><div class="line">                    insert(id(i,j)+<span class="number">2</span>*P,id(i,j),<span class="number">1</span>,<span class="number">1</span>); insert(id(i,j)+<span class="number">2</span>*P,id(i,j),<span class="number">1</span>,<span class="number">0</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(spfa()) ans+=mincf();</div><div class="line">    <span class="keyword">if</span>(TOT) ans=<span class="number">-1</span>;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题目精选 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 网络流_费用流 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「Topcoder SRM558 1000」SurroundingGame]]></title>
      <url>/2016/12/30/SRM558_1000/</url>
      <content type="html"><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote>
<p>给定一个网格，每个网格有选取代价和占据收益。每个点被占据，需要满足以下两个条件至少一个条件：1.被选取  2.邻近方格都被选取（有公共边被称为邻近）  不一定要占据所有方格，求最大收益。</p>
</blockquote>
<h3 id="解题报告"><a href="#解题报告" class="headerlink" title="解题报告"></a>解题报告</h3><blockquote>
<p>第一直观感受和文理分科那道题很像，这类肯定用最小割，这种题一般都这样搞，但是建图是个大问题。这道题建出来的图要满足，如果一个点要保留收益，那么要么自己的花费边被割，要么邻近的被割，怎么建呢？<br>考虑先黑白染色，拆点，然后我们S连向黑色，容量为花费，黑色向自己的分身连收益边，并且黑色向相邻的白色点的分身连INF，黑色分身向白色连INF，白色分身向自己连收益，白色向T连花费。<br>仔细观察我们发现，确实能满足要求。<br>这种题一般都是套路，我也不知道怎么就要这么建边，不过可以总结出一些东西，比如一旦有关系，两者之间都会连INF以确保能彼此影响又不会被最小割割中，然后花费和收益，拆点怎么安排就要看具体的题目了。<br>代码已修改了输入输出。</p>
</blockquote>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 25</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1e9</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> id(x,y) ((x-1)*m+y)</span></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>; <span class="keyword">char</span> a=getchar();</div><div class="line">    <span class="keyword">while</span>(a&lt;<span class="string">'0'</span> || a&gt;<span class="string">'9'</span>) &#123;<span class="keyword">if</span>(a==<span class="string">'-'</span>) f=<span class="number">-1</span>; a=getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(a&gt;=<span class="string">'0'</span> &amp;&amp; a&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+a-<span class="string">'0'</span>,a=getchar();</div><div class="line">    <span class="keyword">return</span> x*f;</div><div class="line">&#125;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> dir[<span class="number">4</span>][<span class="number">2</span>]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;;</div><div class="line"><span class="keyword">int</span> n,m,be[N][N],co[N][N],S,T,P,ans,d[<span class="number">1005</span>],head[<span class="number">1005</span>],cur[<span class="number">1005</span>],cnt;</div><div class="line"><span class="keyword">bool</span> vis[<span class="number">1005</span>];</div><div class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;</div><div class="line"><span class="keyword">struct</span> edges&#123;</div><div class="line">    <span class="keyword">int</span> to,cap,flow,next;</div><div class="line">&#125;e[<span class="number">2005</span>];</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> c)</span></span>&#123;</div><div class="line">    e[cnt]=(edges)&#123;v,c,<span class="number">0</span>,head[u]&#125;;head[u]=cnt++;</div><div class="line">    e[cnt]=(edges)&#123;u,<span class="number">0</span>,<span class="number">0</span>,head[v]&#125;;head[v]=cnt++;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</div><div class="line">    vis[S]=<span class="number">1</span>; d[S]=<span class="number">0</span>; q.push(S);</div><div class="line">    <span class="keyword">while</span>(!q.empty())&#123;</div><div class="line">        <span class="keyword">int</span> x=q.front(); q.pop();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i&gt;=<span class="number">0</span>;i=e[i].next)&#123;</div><div class="line">            <span class="keyword">if</span>(!vis[e[i].to] &amp;&amp; e[i].cap&gt;e[i].flow)</div><div class="line">            d[e[i].to]=d[x]+<span class="number">1</span>,q.push(e[i].to),vis[e[i].to]=<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> vis[T];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> a)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(x==T || !a) <span class="keyword">return</span> a;</div><div class="line">    <span class="keyword">int</span> f,flow=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span>&amp; i=cur[x];i&gt;=<span class="number">0</span>;i=e[i].next)&#123;</div><div class="line">        <span class="keyword">if</span>(d[e[i].to]==d[x]+<span class="number">1</span> &amp;&amp; (f=dfs(e[i].to,min(a,e[i].cap-e[i].flow)))&gt;<span class="number">0</span>)</div><div class="line">        e[i].flow+=f,flow+=f,e[i^<span class="number">1</span>].flow-=f,a-=f;</div><div class="line">        <span class="keyword">if</span>(!a) <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> flow;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">maxflow</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> flow=<span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(bfs())&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=S;i&lt;=T;i++) cur[i]=head[i];</div><div class="line">        flow+=dfs(S,INF);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> flow;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span>(head));</div><div class="line">    n=read(); m=read();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</div><div class="line">            be[i][j]=read(),ans+=be[i][j];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</div><div class="line">            co[i][j]=read();</div><div class="line">    S=<span class="number">0</span>; T=<span class="number">2</span>*n*m+<span class="number">1</span>; P=n*m;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</div><div class="line">            <span class="keyword">int</span> x,y;</div><div class="line">            <span class="keyword">if</span>((i+j)%<span class="number">2</span>)&#123;</div><div class="line">                insert(S,id(i,j),co[i][j]),insert(id(i,j),id(i,j)+P,be[i][j]);</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">4</span>;k++)&#123;</div><div class="line">                    x=i+dir[k][<span class="number">0</span>],y=j+dir[k][<span class="number">1</span>];</div><div class="line">                    <span class="keyword">if</span>(x&lt;<span class="number">1</span> || x&gt;n || y&lt;<span class="number">1</span> || y&gt;m) <span class="keyword">continue</span>;</div><div class="line">                    insert(id(i,j),id(x,y)+P,INF);</div><div class="line">                    insert(id(i,j)+P,id(x,y),INF);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> insert(id(i,j)+P,id(i,j),be[i][j]),insert(id(i,j),T,co[i][j]);</div><div class="line">        &#125;</div><div class="line">    ans-=maxflow();</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题目精选 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 网络流_最小割 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「BZOJ3504」「CQOI2014」危桥]]></title>
      <url>/2016/12/28/bzoj3504/</url>
      <content type="html"><![CDATA[<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><blockquote>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=3504" target="_blank" rel="external">题目传送门</a></p>
</blockquote>
<h3 id="解题报告"><a href="#解题报告" class="headerlink" title="解题报告"></a>解题报告</h3><blockquote>
<p>先来一个NAIVE的建图：直接限制边建为容量1，无限制为INF，按照原图连，然后跑最大流就可以了。<br>可惜这样还不够，因为有可能有一部分流量不是对应的起点流过来的，即两条路有流量交换，这样就不一定可以满足题意了。<br>解决方法是：再跑一遍网络流，但是建图要改变一下，即将a路线的起点终点调换一下（当然b也可以），再接着跑，如果仍然满足则是真的有解。<br>证明看了网上的，都说的不太清楚，然后与ihopenot大爷讨论了下，有了一个证明（如果错了请指出）。<br>我们现在要证如果一开始的第一遍网络流跑出来满足条件并且第二遍也满足，则说明一定有真正满足题意的方案存在。<br>如果有交叉流，我们画一张图。<br><img src="http://images2015.cnblogs.com/blog/1039844/201612/1039844-20161228185254445-1387864229.png" alt=""><br>（因为使用的画图软件不能用减号，所以用下划线代替）其中As为起点，At为终点（B同理）<br>我们第二次建图后，如果能没有交叉流，那很好，直接说明有这种方案（因为倒过来是一样的嘛），但我们纠结的是，如果第二次仍然有交叉流怎么办？<br>我们画出来，发现，Bs到As有x的流量，第一张图又有As到Bt的x流量，那么这就是另一条x流量，与第一张图合起来不就是Bn吗，同理，A也是可以这样证明有满足条件且不交叉的流，那么就说明，我们如果两遍跑出来都满足，那就真的是有解的了。</p>
</blockquote>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 5005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1e9</span></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>; <span class="keyword">char</span> a=getchar();</div><div class="line">    <span class="keyword">while</span>(a&gt;<span class="string">'9'</span> || a&lt;<span class="string">'0'</span>) &#123;<span class="keyword">if</span>(a==<span class="string">'-'</span>) f=<span class="number">-1</span>; a=getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(a&gt;=<span class="string">'0'</span> &amp;&amp; a&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+a-<span class="string">'0'</span>,a=getchar();</div><div class="line">    <span class="keyword">return</span> x*f;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> n,d[N],head[N],cur[N],cnt,S,T,a1,a2,an,b1,b2,bn,ans;</div><div class="line"><span class="keyword">bool</span> vis[N],g[<span class="number">55</span>][<span class="number">55</span>],b[<span class="number">55</span>][<span class="number">55</span>];</div><div class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;</div><div class="line"><span class="keyword">char</span> st[<span class="number">55</span>][<span class="number">55</span>];</div><div class="line"><span class="keyword">struct</span> edges&#123;</div><div class="line">    <span class="keyword">int</span> to,cap,flow,next;</div><div class="line">&#125;e[<span class="number">2</span>*N];</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> c)</span></span>&#123;</div><div class="line">    e[cnt]=(edges)&#123;v,c,<span class="number">0</span>,head[u]&#125;;head[u]=cnt++;</div><div class="line">    e[cnt]=(edges)&#123;u,<span class="number">0</span>,<span class="number">0</span>,head[v]&#125;;head[v]=cnt++;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</div><div class="line">    d[S]=<span class="number">0</span>; vis[S]=<span class="number">1</span>; q.push(S);</div><div class="line">    <span class="keyword">while</span>(!q.empty())&#123;</div><div class="line">        <span class="keyword">int</span> x=q.front(); q.pop();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i&gt;=<span class="number">0</span>;i=e[i].next)</div><div class="line">            <span class="keyword">if</span>(!vis[e[i].to] &amp;&amp; e[i].cap&gt;e[i].flow)</div><div class="line">            d[e[i].to]=d[x]+<span class="number">1</span>,vis[e[i].to]=<span class="number">1</span>,q.push(e[i].to);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> vis[T];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> a)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(x==T || !a) <span class="keyword">return</span> a;</div><div class="line">    <span class="keyword">int</span> f,flow=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span>&amp; i=cur[x];i&gt;=<span class="number">0</span>;i=e[i].next)&#123;</div><div class="line">        <span class="keyword">if</span>(d[e[i].to]==d[x]+<span class="number">1</span> &amp;&amp; (f=dfs(e[i].to,min(a,e[i].cap-e[i].flow)))&gt;<span class="number">0</span>)</div><div class="line">        flow+=f,e[i].flow+=f,e[i^<span class="number">1</span>].flow-=f,a-=f;</div><div class="line">        <span class="keyword">if</span>(!a) <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> flow;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">maxflow</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> flow=<span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(bfs())&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=S;i&lt;=T;i++) cur[i]=head[i];</div><div class="line">        flow+=dfs(S,INF);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> flow;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span>(head)); cnt=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</div><div class="line">            <span class="keyword">if</span>(g[i][j]) insert(i,j,INF);</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(b[i][j]) insert(i,j,<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    S=<span class="number">0</span>; T=<span class="number">5000</span>;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)!=EOF)&#123;</div><div class="line">        <span class="built_in">memset</span>(g,<span class="number">0</span>,<span class="keyword">sizeof</span>(g));</div><div class="line">        <span class="built_in">memset</span>(b,<span class="number">0</span>,<span class="keyword">sizeof</span>(b));</div><div class="line">        a1=read()+<span class="number">1</span>; a2=read()+<span class="number">1</span>; an=read();</div><div class="line">        b1=read()+<span class="number">1</span>; b2=read()+<span class="number">1</span>; bn=read();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">"%s"</span>,st[i]+<span class="number">1</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</div><div class="line">                <span class="keyword">if</span>(st[i][j]==<span class="string">'O'</span>) b[i][j]=<span class="number">1</span>;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(st[i][j]==<span class="string">'N'</span>) g[i][j]=<span class="number">1</span>;</div><div class="line">        <span class="keyword">bool</span> flag=<span class="number">0</span>;</div><div class="line">        build(); insert(S,a1,an); insert(a2,T,an); insert(S,b1,bn); insert(b2,T,bn);</div><div class="line">        <span class="keyword">if</span>(maxflow()&lt;an+bn) flag=<span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span>(!flag)&#123;</div><div class="line">            build(); insert(S,a2,an); insert(a1,T,an); insert(S,b1,bn); insert(b2,T,bn);</div><div class="line">            <span class="keyword">if</span>(maxflow()&lt;an+bn) flag=<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(flag) <span class="built_in">puts</span>(<span class="string">"No"</span>);</div><div class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"Yes"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题目精选 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 网络流_最大流 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「BZOJ3894」文理分科]]></title>
      <url>/2016/12/28/bzoj3894/</url>
      <content type="html"><![CDATA[<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><blockquote>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=3894" target="_blank" rel="external">题目传送门</a></p>
</blockquote>
<h3 id="解题报告"><a href="#解题报告" class="headerlink" title="解题报告"></a>解题报告</h3><blockquote>
<p>考虑类似最大闭合子图的思路，我们将总收益先算出来，然后跑最小割，最后用总收益减掉最小割即为答案。<br>怎么建图呢？我们要保证一个点选文科后，它周围选理科的点不能有理科额外收益，选理科也同理。<br>考虑这么建图：每个点拆成3个点，拆出来的第一个点向它周围的点连INF，同时该点本身向拆出来的第一个点连文科额外值，拆出来第二个点与第一个点相反，即被第一个点连到的点（相邻的点）向它连INF，然后被拆出来的第二个点向本体连理科额外值。每个点本体，S向其连文科加上文科额外值，其向T连理科加上理科额外值。<br>仔细思考，会发现这样能使：一旦周围中出了一个叛徒，被多算的额外值就会被扣除掉。<br>一开始也想到了最小割来做，但始终解决不了怎么去掉多余的额外值（因为想的是只拆一个点），再次%ihopenot。</p>
</blockquote>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 200005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1e9</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> id(x,y) (((x)-1)*m+(y))</span></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>; <span class="keyword">char</span> a=getchar();</div><div class="line">    <span class="keyword">while</span>(a&lt;<span class="string">'0'</span> || a&gt;<span class="string">'9'</span>) &#123;<span class="keyword">if</span>(a==<span class="string">'-'</span>) f=<span class="number">-1</span>; a=getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(a&gt;=<span class="string">'0'</span> &amp;&amp; a&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+a-<span class="string">'0'</span>,a=getchar();</div><div class="line">    <span class="keyword">return</span> x*f;</div><div class="line">&#125;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> dir[<span class="number">4</span>][<span class="number">2</span>]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;;</div><div class="line"><span class="keyword">int</span> S,T,P,n,m,cur[N],head[N],ans,cnt,d[N],si[<span class="number">105</span>][<span class="number">105</span>],ai[<span class="number">105</span>][<span class="number">105</span>],alls[<span class="number">105</span>][<span class="number">105</span>],alla[<span class="number">105</span>][<span class="number">105</span>];</div><div class="line"><span class="keyword">bool</span> vis[N];</div><div class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;Q;</div><div class="line"><span class="keyword">struct</span> edges&#123;</div><div class="line">    <span class="keyword">int</span> to,cap,flow,next;</div><div class="line">&#125;e[<span class="number">2</span>*N];</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> c)</span></span>&#123;</div><div class="line">    e[cnt]=(edges)&#123;v,c,<span class="number">0</span>,head[u]&#125;;head[u]=cnt++;</div><div class="line">    e[cnt]=(edges)&#123;u,<span class="number">0</span>,<span class="number">0</span>,head[v]&#125;;head[v]=cnt++;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</div><div class="line">    d[S]=<span class="number">0</span>; Q.push(S); vis[S]=<span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(!Q.empty())&#123;</div><div class="line">        <span class="keyword">int</span> x=Q.front(); Q.pop();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i&gt;=<span class="number">0</span>;i=e[i].next)</div><div class="line">            <span class="keyword">if</span>(!vis[e[i].to] &amp;&amp; e[i].cap&gt;e[i].flow)</div><div class="line">                d[e[i].to]=d[x]+<span class="number">1</span>,vis[e[i].to]=<span class="number">1</span>,Q.push(e[i].to);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> vis[T];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> a)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(x==T || !a) <span class="keyword">return</span> a;</div><div class="line">    <span class="keyword">int</span> f,flow=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span>&amp; i=cur[x];i&gt;=<span class="number">0</span>;i=e[i].next)&#123;</div><div class="line">        <span class="keyword">if</span>(d[e[i].to]==d[x]+<span class="number">1</span> &amp;&amp; (f=dfs(e[i].to,min(a,e[i].cap-e[i].flow)))&gt;<span class="number">0</span>)</div><div class="line">        e[i].flow+=f,flow+=f,e[i^<span class="number">1</span>].flow-=f,a-=f;</div><div class="line">        <span class="keyword">if</span>(!a) <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> flow;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">maxflow</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> flow=<span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(bfs())&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=S;i&lt;=T;i++) cur[i]=head[i];</div><div class="line">        flow+=dfs(S,INF);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> flow;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span>(head));</div><div class="line">    n=read(); m=read(); S=<span class="number">0</span>; T=<span class="number">3</span>*n*m+<span class="number">1</span>; P=n*m;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</div><div class="line">            ai[i][j]=read(),ans+=ai[i][j];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</div><div class="line">            si[i][j]=read(),ans+=si[i][j];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</div><div class="line">            alla[i][j]=read(),ans+=alla[i][j];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</div><div class="line">            alls[i][j]=read(),ans+=alls[i][j];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</div><div class="line">            insert(S,id(i,j),ai[i][j]+alla[i][j]);</div><div class="line">            insert(id(i,j),T,si[i][j]+alls[i][j]);</div><div class="line">            insert(id(i,j),id(i,j)+P,alla[i][j]);</div><div class="line">            insert(id(i,j)+<span class="number">2</span>*P,id(i,j),alls[i][j]);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> x,y,k=<span class="number">0</span>;k&lt;<span class="number">4</span>;k++)&#123;</div><div class="line">                x=i+dir[k][<span class="number">0</span>],y=j+dir[k][<span class="number">1</span>];</div><div class="line">                <span class="keyword">if</span>(x&lt;<span class="number">1</span> || x&gt;n || y&lt;<span class="number">1</span> || y&gt;m) <span class="keyword">continue</span>;</div><div class="line">                insert(id(i,j)+P,id(x,y),INF);</div><div class="line">                insert(id(x,y),id(i,j)+<span class="number">2</span>*P,INF);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans-maxflow());</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题目精选 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 网络流_最小割 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「BZOJ3876」「Ahoi2014」支线剧情]]></title>
      <url>/2016/12/28/bzoj3876/</url>
      <content type="html"><![CDATA[<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><blockquote>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=3876" target="_blank" rel="external">题目传送门</a></p>
</blockquote>
<h3 id="解题报告"><a href="#解题报告" class="headerlink" title="解题报告"></a>解题报告</h3><blockquote>
<p>无源汇有下界最小费用可行流。<br>考虑我们对于无源汇的建图：对于每个点，它的入度下界为容量，S向它拉一条边，出度下界为容量，其向T连一条边，跑一边最大流即可。<br>这里我们建图实际上一样，但是加上了费用，具体建图如下：<br>对于x-&gt;y，费用为z<br>S向y建容量为1，费用为z的边（对应无源汇里的入度处理）<br>x向y建容量INF，费用为z的边（即自由流）<br>对于每一个点x，假设其出度为a<br>x向T建容量为a，费用为0的边（出度处理）（注意这里不要加上费用，因为已经在入度处理的时候就加过了）<br>x向1建容量INF，费用为0的边（对应题意）<br>然后跑最小费用流就可以了。</p>
<p>膜拜ihopenot大爷。<br>实际上有一个很大的建图优化，也是无源汇建图的优化，即合并入出度并且相互抵消。但是对于这道题就不好做，因为有费用，不过可以这么想：既然每一条边都要走，我们就直接把费用抽出来，即答案一开始就为所有边走一次的代价，然后这样入度的费用就变为0了。然后再与出度进行抵消，最后边的数量大大减少。<br>实践证明，从原来改到现在，时间从8000多优化到100多ms。</p>
</blockquote>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 50005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1e9</span></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> a=getchar();</div><div class="line">    <span class="keyword">while</span>(a&lt;<span class="string">'0'</span> || a&gt;<span class="string">'9'</span>) &#123;<span class="keyword">if</span>(a==<span class="string">'-'</span>) f=<span class="number">-1</span>; a=getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(a&gt;=<span class="string">'0'</span> &amp;&amp; a&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+a-<span class="string">'0'</span>,a=getchar();</div><div class="line">    <span class="keyword">return</span> x*f;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> ans,n,cnt,a[N],p[N],d[N],head[N],S,T;</div><div class="line"><span class="keyword">bool</span> vis[N];</div><div class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;</div><div class="line"><span class="keyword">struct</span> edges&#123;</div><div class="line">    <span class="keyword">int</span> fr,to,cap,flow,cost,next;</div><div class="line">&#125;e[<span class="number">2</span>*N];</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> f,<span class="keyword">int</span> c)</span></span>&#123;</div><div class="line">    e[cnt]=(edges)&#123;u,v,f,<span class="number">0</span>,c,head[u]&#125;;head[u]=cnt++;</div><div class="line">    e[cnt]=(edges)&#123;v,u,<span class="number">0</span>,<span class="number">0</span>,-c,head[v]&#125;;head[v]=cnt++;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">spfa</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">memset</span>(d,<span class="number">0x3f</span>,<span class="keyword">sizeof</span>(d));</div><div class="line">    d[S]=<span class="number">0</span>; a[S]=INF; q.push(S);</div><div class="line">    <span class="keyword">while</span>(!q.empty())&#123;</div><div class="line">        <span class="keyword">int</span> x=q.front(); q.pop(); vis[x]=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i&gt;=<span class="number">0</span>;i=e[i].next)</div><div class="line">            <span class="keyword">if</span>(d[e[i].to]&gt;d[x]+e[i].cost &amp;&amp; e[i].flow&lt;e[i].cap)&#123;</div><div class="line">                d[e[i].to]=d[x]+e[i].cost; p[e[i].to]=i;</div><div class="line">                a[e[i].to]=min(a[x],e[i].cap-e[i].flow);</div><div class="line">                <span class="keyword">if</span>(!vis[e[i].to]) vis[e[i].to]=<span class="number">1</span>,q.push(e[i].to);</div><div class="line">            &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> d[T]&lt;INF;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">mincf</span><span class="params">()</span></span>&#123;</div><div class="line">    ans+=a[T]*d[T];</div><div class="line">    <span class="keyword">int</span> u=T;</div><div class="line">    <span class="keyword">while</span>(u!=S)&#123;</div><div class="line">        e[p[u]].flow+=a[T];</div><div class="line">        e[p[u]^<span class="number">1</span>].flow-=a[T];</div><div class="line">        u=e[p[u]].fr;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span>(head));</div><div class="line">    n=read(); S=<span class="number">0</span>; T=n+<span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> a,i=<span class="number">1</span>;i&lt;=n;i++)&#123;</div><div class="line">        a=read(); insert(i,T,a,<span class="number">0</span>); </div><div class="line">        <span class="keyword">if</span>(i!=<span class="number">1</span>) insert(i,<span class="number">1</span>,INF,<span class="number">0</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> to,co,j=<span class="number">1</span>;j&lt;=a;j++)</div><div class="line">        to=read(),co=read(),insert(i,to,INF,co),insert(S,to,<span class="number">1</span>,co);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span>(spfa()) mincf();</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="优化建图"><a href="#优化建图" class="headerlink" title="优化建图"></a>优化建图</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> a,i=<span class="number">1</span>;i&lt;=n;i++)&#123;</div><div class="line">        a=read(); cd[i]=a;</div><div class="line">        <span class="keyword">if</span>(i!=<span class="number">1</span>) insert(i,<span class="number">1</span>,INF,<span class="number">0</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> to,co,j=<span class="number">1</span>;j&lt;=a;j++)</div><div class="line">        to=read(),co=read(),ans+=co,r[to]++,insert(i,to,INF,co);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++) </div><div class="line">    <span class="keyword">if</span>(r[i]&gt;cd[i]) insert(S,i,r[i]-cd[i],<span class="number">0</span>);</div><div class="line">    <span class="keyword">else</span> insert(i,T,cd[i]-r[i],<span class="number">0</span>);</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题目精选 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 网络流_费用流 </tag>
            
            <tag> 网络流_无源汇上下界网络流 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「日常小测」颜色 && 「Hackerrank」Unique_colors]]></title>
      <url>/2016/12/24/color/</url>
      <content type="html"><![CDATA[<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><blockquote>
<p><a href="https://www.hackerrank.com/challenges/unique-colors" target="_blank" rel="external">题目传送门</a></p>
</blockquote>
<h3 id="解题报告"><a href="#解题报告" class="headerlink" title="解题报告"></a>解题报告</h3><blockquote>
<p>感谢hzq大神找来的这道题。<br>考虑点分治（毕竟是路经统计），对于每一个颜色，它的贡献是独立的。我们可以在一次点分治中合在一块处理（为什么时间复杂度是对的呢，因为我们每次改动只会根据当前点的颜色进行变动，而不是所有颜色对着它都来一遍）。每次先对重心单独计算答案贡献，此时也将当前区域的各个答案贡献计算出来，并以此为基础（之后称之为基准贡献，即代码中的tot）。对于每一棵子树，我们先dfs取消掉这一片区域内贡献（为什么要取消，因为这里的贡献要留到它们那一层去解决，不然会重复计算），然后单独对这里再深搜一遍 ，具体内容如下：<br>出现一种颜色，如果深搜过程中这是第一次出现，我们要把目前的基准贡献扣除掉该颜色的贡献（由于进入这种深搜之前，已经取消掉这一棵子树的贡献，所以实际扣除掉了外面子树的该颜色贡献）再加上外面子树大小，从而做到维护基准贡献，然后直接加给这个点就形成当前贡献了。当然如果不是第一次出现就不用管了，因为深搜来的路上已经处理过了，然后直接加上。<br>这是点分治做法，时间复杂度（nlogn）。还有线性做法，即用dfs序，然后对于一个区间打上差分，最后扫一遍。</p>
</blockquote>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1e9</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>; <span class="keyword">char</span> a=getchar();</div><div class="line">    <span class="keyword">while</span>(a&lt;<span class="string">'0'</span> || a&gt;<span class="string">'9'</span>) &#123;<span class="keyword">if</span>(a==<span class="string">'-'</span>) f=<span class="number">-1</span>; a=getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(a&gt;=<span class="string">'0'</span> &amp;&amp; a&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+a-<span class="string">'0'</span>,a=getchar();</div><div class="line">    <span class="keyword">return</span> x*f;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> n,cnt,sum,size[N],head[N],a[N],s[N],weight,weights,tot;</div><div class="line">LL ans[N];</div><div class="line"><span class="keyword">bool</span> vis[N],app[N];</div><div class="line"><span class="keyword">struct</span> edges&#123;</div><div class="line">    <span class="keyword">int</span> to,next;</div><div class="line">&#125;e[<span class="number">2</span>*N];</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> u=read(),v=read();</div><div class="line">    e[cnt]=(edges)&#123;v,head[u]&#125;;head[u]=cnt++;</div><div class="line">    e[cnt]=(edges)&#123;u,head[v]&#125;;head[v]=cnt++;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">getroot</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> fa)</span></span>&#123;</div><div class="line">    size[x]=<span class="number">1</span>; <span class="keyword">int</span> tmp=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i&gt;=<span class="number">0</span>;i=e[i].next)&#123;</div><div class="line">        <span class="keyword">if</span>(vis[e[i].to] || fa==e[i].to) <span class="keyword">continue</span>;</div><div class="line">        getroot(e[i].to,x); size[x]+=size[e[i].to];</div><div class="line">        tmp=max(tmp,size[e[i].to]);</div><div class="line">    &#125;</div><div class="line">    tmp=max(tmp,sum-size[x]);</div><div class="line">    <span class="keyword">if</span>(tmp&lt;weights) weight=x,weights=tmp;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> fa,<span class="keyword">int</span> f)</span></span>&#123;</div><div class="line">    <span class="keyword">bool</span> ok=<span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span>(!app[a[x]] &amp;&amp; a[x]!=a[weight]) app[a[x]]=ok=<span class="number">1</span>,s[a[x]]+=size[x]*f,tot+=size[x]*f;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i&gt;=<span class="number">0</span>;i=e[i].next) <span class="keyword">if</span>(!vis[e[i].to] &amp;&amp; fa!=e[i].to) dfs(e[i].to,x,f);</div><div class="line">    <span class="keyword">if</span>(ok) app[a[x]]=<span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> fa,<span class="keyword">int</span> p)</span></span>&#123;</div><div class="line">    <span class="keyword">bool</span> ok=<span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span>(!app[a[x]] &amp;&amp; a[x]!=a[weight]) app[a[x]]=ok=<span class="number">1</span>,tot+=p-s[a[x]];</div><div class="line">    ans[x]+=tot;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i&gt;=<span class="number">0</span>;i=e[i].next) <span class="keyword">if</span>(!vis[e[i].to] &amp;&amp; fa!=e[i].to) DFS(e[i].to,x,p);</div><div class="line">    <span class="keyword">if</span>(ok) app[a[x]]=<span class="number">0</span>,tot-=p-s[a[x]];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    weights=INF; getroot(x,<span class="number">0</span>); getroot(weight,<span class="number">0</span>);</div><div class="line">    x=weight; vis[x]=<span class="number">1</span>;</div><div class="line">    dfs(weight,<span class="number">0</span>,<span class="number">1</span>); tot+=size[x]; ans[x]+=tot;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i&gt;=<span class="number">0</span>;i=e[i].next)&#123;</div><div class="line">        <span class="keyword">if</span>(vis[e[i].to]) <span class="keyword">continue</span>;</div><div class="line">        dfs(e[i].to,x,<span class="number">-1</span>); tot-=size[e[i].to];</div><div class="line">        DFS(e[i].to,x,size[x]-size[e[i].to]);</div><div class="line">        dfs(e[i].to,x,<span class="number">1</span>); tot+=size[e[i].to];</div><div class="line">    &#125;</div><div class="line">    dfs(weight,<span class="number">0</span>,<span class="number">-1</span>); tot=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i&gt;=<span class="number">0</span>;i=e[i].next)</div><div class="line">    <span class="keyword">if</span>(!vis[e[i].to]) sum=size[e[i].to],work(e[i].to);</div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    n=read(); <span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span>(head));</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) a[i]=read();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++) insert();</div><div class="line">    sum=n; work(<span class="number">1</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans[i]);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题目精选 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 点分治 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「BZOJ1095」「ZJOI2007」Hide 捉迷藏]]></title>
      <url>/2016/12/23/bzoj1095/</url>
      <content type="html"><![CDATA[<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><blockquote>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=1095" target="_blank" rel="external">题目传送门</a></p>
</blockquote>
<h3 id="解题报告"><a href="#解题报告" class="headerlink" title="解题报告"></a>解题报告</h3><blockquote>
<p>动态点分治。一开始想的是对于每个节点维护主大和次大，后来发现这实在是太NAIVE了。实际上，正解是这样的：<br>对于每个点，维护两个堆（接下来说的都是点分树上的节点）：第一个堆，该点子树到该点父亲的距离，第二个堆，该点直接儿子的第一个堆的堆顶元素。<br>然后我们再开一个全局堆，即答案堆，维护所有第二个堆最大和次大之和。每次询问只要把堆顶元素拿出来就可以了。<br>为什么空间开的下呢？这个道理和震波那道题是一样的，考虑点分治的时间复杂度，每个点最大堆空间开到的就是该点子树大小，总和是nlogn的，完全开的下。<br>怎么修改呢，暴力爬树高啊，点分树不就是这一点树高稳定log最好吗！<br>维护3个堆的过程特别繁琐，写的时候写了一个上午。。。就为了那几个if。。<br>最后被自己模拟的堆坑了一发。。改到现在才过</p>
</blockquote>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1e9</span></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>; <span class="keyword">char</span> a=getchar();</div><div class="line">    <span class="keyword">while</span>(a&lt;<span class="string">'0'</span> || a&gt;<span class="string">'9'</span>) &#123;<span class="keyword">if</span>(a==<span class="string">'0'</span>) f=<span class="number">-1</span>; a=getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(a&gt;=<span class="string">'0'</span> &amp;&amp; a&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+a-<span class="string">'0'</span>,a=getchar();</div><div class="line">    <span class="keyword">return</span> x*f;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> n,q,head[N],s[N],cnt,f[N],rt,sz,dep[N],fa[N][<span class="number">20</span>],dis[N][<span class="number">20</span>],now;</div><div class="line"><span class="keyword">char</span> ch[<span class="number">2</span>]; <span class="keyword">bool</span> vis[N],on[N];</div><div class="line"><span class="keyword">struct</span> heap&#123;</div><div class="line">    priority_queue&lt;<span class="keyword">int</span>&gt;A,B;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;A.push(x);&#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">erase</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;B.push(x);&#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;<span class="keyword">while</span>(B.size()&amp;&amp;A.top()==B.top()) A.pop(),B.pop(); A.pop();&#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;<span class="keyword">while</span>(B.size()&amp;&amp;A.top()==B.top()) A.pop(),B.pop(); <span class="keyword">if</span>(A.size()) <span class="keyword">return</span> A.top(); <span class="keyword">else</span> <span class="keyword">return</span> -INF;&#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> A.size()-B.size();&#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">s_top</span><span class="params">()</span></span>&#123; <span class="keyword">if</span>(size()&lt;<span class="number">2</span>) <span class="keyword">return</span> -INF; </div><div class="line">        <span class="keyword">while</span>(B.size()&amp;&amp;A.top()==B.top()) A.pop(),B.pop();</div><div class="line">        <span class="keyword">int</span> t=A.top(),ret; A.pop(); </div><div class="line">        <span class="keyword">while</span>(B.size()&amp;&amp;A.top()==B.top()) A.pop(),B.pop();</div><div class="line">        ret=A.top(); A.push(t); </div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line">&#125;C,A[N],B[N];</div><div class="line"><span class="keyword">struct</span> edges&#123;</div><div class="line">    <span class="keyword">int</span> to,next;</div><div class="line">&#125;e[<span class="number">2</span>*N];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> u=read(),v=read();</div><div class="line">    e[cnt]=(edges)&#123;v,head[u]&#125;;head[u]=cnt++;</div><div class="line">    e[cnt]=(edges)&#123;u,head[v]&#125;;head[v]=cnt++;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">getroot</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> p)</span></span>&#123;</div><div class="line">    s[x]=<span class="number">1</span>; f[x]=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i&gt;=<span class="number">0</span>;i=e[i].next)&#123;</div><div class="line">        <span class="keyword">if</span>(vis[e[i].to] || p==e[i].to) <span class="keyword">continue</span>;</div><div class="line">        getroot(e[i].to,x); s[x]+=s[e[i].to];</div><div class="line">        f[x]=max(f[x],s[e[i].to]);</div><div class="line">    &#125;</div><div class="line">    f[x]=max(f[x],sz-s[x]);</div><div class="line">    <span class="keyword">if</span>(f[rt]&gt;f[x]) rt=x;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">getship</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> anc,<span class="keyword">int</span> p,<span class="keyword">int</span> d)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v,i=head[x];i&gt;=<span class="number">0</span>;i=e[i].next)&#123;</div><div class="line">        v=e[i].to;</div><div class="line">        <span class="keyword">if</span>(vis[v] || p==v) <span class="keyword">continue</span>;</div><div class="line">        fa[v][++dep[v]]=anc; dis[v][dep[v]]=d; getship(v,anc,x,d+<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">buildtree</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    vis[x]=<span class="number">1</span>; getship(x,x,<span class="number">0</span>,<span class="number">1</span>); <span class="keyword">int</span> all=sz;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i&gt;=<span class="number">0</span>;i=e[i].next)&#123;</div><div class="line">        <span class="keyword">if</span>(vis[e[i].to]) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">if</span>(s[e[i].to]&gt;s[x]) s[e[i].to]=all-s[x]; sz=s[e[i].to];</div><div class="line">        rt=<span class="number">0</span>; getroot(e[i].to,x); buildtree(rt);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">turn_off</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">     B[x].push(<span class="number">0</span>);</div><div class="line">     <span class="keyword">if</span>(B[x].size()==<span class="number">2</span>) C.push(B[x].top());</div><div class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> t,pre,i=dep[x];i&gt;<span class="number">1</span>;i--)&#123;</div><div class="line">         <span class="keyword">if</span>(!A[fa[x][i]].size())&#123;</div><div class="line">             A[fa[x][i]].push(dis[x][i<span class="number">-1</span>]);</div><div class="line">             pre=B[fa[x][i<span class="number">-1</span>]].top()+B[fa[x][i<span class="number">-1</span>]].s_top();</div><div class="line">            B[fa[x][i<span class="number">-1</span>]].push(dis[x][i<span class="number">-1</span>]);</div><div class="line">            <span class="keyword">if</span>(pre&gt;<span class="number">0</span> &amp;&amp; pre==B[fa[x][i<span class="number">-1</span>]].top()+B[fa[x][i<span class="number">-1</span>]].s_top()) <span class="keyword">continue</span>;</div><div class="line">             <span class="keyword">if</span>(pre&gt;<span class="number">0</span> &amp;&amp; pre!=B[fa[x][i<span class="number">-1</span>]].top()+B[fa[x][i<span class="number">-1</span>]].s_top())</div><div class="line">             C.erase(pre),C.push(B[fa[x][i<span class="number">-1</span>]].top()+B[fa[x][i<span class="number">-1</span>]].s_top());</div><div class="line">             <span class="keyword">else</span> <span class="keyword">if</span>(B[fa[x][i<span class="number">-1</span>]].top()+B[fa[x][i<span class="number">-1</span>]].s_top()&gt;<span class="number">0</span>) C.push(B[fa[x][i<span class="number">-1</span>]].top()+B[fa[x][i<span class="number">-1</span>]].s_top());</div><div class="line">         &#125;<span class="keyword">else</span>&#123;</div><div class="line">             t=A[fa[x][i]].top(); A[fa[x][i]].push(dis[x][i<span class="number">-1</span>]);</div><div class="line">            <span class="keyword">if</span>(t&lt;dis[x][i<span class="number">-1</span>])&#123; </div><div class="line">                pre=B[fa[x][i<span class="number">-1</span>]].top()+B[fa[x][i<span class="number">-1</span>]].s_top(); </div><div class="line">                B[fa[x][i<span class="number">-1</span>]].erase(t); B[fa[x][i<span class="number">-1</span>]].push(dis[x][i<span class="number">-1</span>]); </div><div class="line">                <span class="keyword">if</span>(pre&gt;<span class="number">0</span> &amp;&amp; pre!=B[fa[x][i<span class="number">-1</span>]].top()+B[fa[x][i<span class="number">-1</span>]].s_top())</div><div class="line">                C.erase(pre),C.push(B[fa[x][i<span class="number">-1</span>]].top()+B[fa[x][i<span class="number">-1</span>]].s_top());</div><div class="line">            &#125;</div><div class="line">         &#125;</div><div class="line">     &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">turn_on</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    B[x].erase(<span class="number">0</span>);</div><div class="line">    <span class="keyword">if</span>(B[x].size()==<span class="number">1</span>) C.erase(B[x].top());</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> t,pre,i=dep[x];i&gt;<span class="number">1</span>;i--)&#123;</div><div class="line">        A[fa[x][i]].erase(dis[x][i<span class="number">-1</span>]);</div><div class="line">        <span class="keyword">if</span>(A[fa[x][i]].top()&lt;dis[x][i<span class="number">-1</span>]) &#123;</div><div class="line">            pre=B[fa[x][i<span class="number">-1</span>]].top()+B[fa[x][i<span class="number">-1</span>]].s_top();</div><div class="line">            B[fa[x][i<span class="number">-1</span>]].erase(dis[x][i<span class="number">-1</span>]); </div><div class="line">            <span class="keyword">if</span>(A[fa[x][i]].size()) B[fa[x][i<span class="number">-1</span>]].push(A[fa[x][i]].top());</div><div class="line">            <span class="keyword">if</span>(pre&gt;<span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">if</span>(pre==B[fa[x][i<span class="number">-1</span>]].top()+B[fa[x][i<span class="number">-1</span>]].s_top()) <span class="keyword">continue</span>;</div><div class="line">                C.erase(pre);</div><div class="line">                <span class="keyword">if</span>(B[fa[x][i<span class="number">-1</span>]].size()&gt;<span class="number">1</span>)</div><div class="line">                C.push(B[fa[x][i<span class="number">-1</span>]].top()+B[fa[x][i<span class="number">-1</span>]].s_top());</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(!on[x]) turn_on(x);</div><div class="line">    <span class="keyword">else</span> turn_off(x);</div><div class="line">    on[x]^=<span class="number">1</span>; </div><div class="line">    <span class="keyword">if</span>(on[x]) now++;</div><div class="line">    <span class="keyword">else</span> now--;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    n=read(); <span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span>(head));</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++) insert();</div><div class="line">    f[<span class="number">0</span>]=INF; sz=n; getroot(<span class="number">1</span>,<span class="number">0</span>); buildtree(rt);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) fa[i][++dep[i]]=i,turn_off(i);</div><div class="line">    q=read();</div><div class="line">    <span class="keyword">while</span>(q--)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,ch);</div><div class="line">        <span class="keyword">if</span>(ch[<span class="number">0</span>]==<span class="string">'G'</span>) &#123;</div><div class="line">            <span class="keyword">if</span>(now==n) <span class="built_in">puts</span>(<span class="string">"-1"</span>);</div><div class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,max(C.top(),<span class="number">0</span>));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> change(read()); </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题目精选 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 点分治 </tag>
            
            <tag> 堆 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「日常小测」生物进阶]]></title>
      <url>/2016/12/23/bio/</url>
      <content type="html"><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote>
<p>给定样本串模式串（只出现4个字母A,C,G,T），求模式串出现多少次。这里匹配定义如下：不一定要严格匹配，在附近k个单位有这个字符都算匹配，可以多个模式串的字符匹配上同一个样本串里的字符。</p>
</blockquote>
<h3 id="解题报告"><a href="#解题报告" class="headerlink" title="解题报告"></a>解题报告</h3><blockquote>
<p>策爷讲过的大原题啊跪。。。。基本思路是分开考虑每个字母。对于以一个位置i开头，我们考虑这里是否能匹配上，需要处理出这里能匹配的字母个数，如果4个字母分别的匹配个数加起来刚好等于模式串长度，则可以匹配。怎么快速求呢？答案是FFT！<br>分开考虑每个字母。对于正在考虑的我们标为1，其他为0.模式串也这样表示，然后把它放到位置上去&amp;。还不够，如果我们把模式串倒着，并且用前导零去补位，会发现对于每个位置，可以用一个叉积的式子来表示它的匹配数。。果断FFT啊<br>时间复杂度O(Sigma*(n+m)log) 其中Sigma是字符集大小，对于这道题是4。</p>
</blockquote>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N ((1&lt;&lt;20)+5)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 0.5</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI=<span class="built_in">acos</span>(<span class="number">-1</span>);</div><div class="line"><span class="keyword">int</span> len,n,m,k,match[N],rev[N],ans;</div><div class="line"><span class="keyword">char</span> st1[N],st2[N],ch[<span class="number">4</span>]=&#123;<span class="string">'A'</span>,<span class="string">'C'</span>,<span class="string">'G'</span>,<span class="string">'T'</span>&#125;;</div><div class="line"><span class="keyword">struct</span> vec&#123;</div><div class="line">    <span class="keyword">double</span> r,i;</div><div class="line">    vec <span class="keyword">operator</span> + (<span class="keyword">const</span> vec&amp; w)&#123;<span class="keyword">return</span> (vec)&#123;r+w.r,i+w.i&#125;;&#125;</div><div class="line">    vec <span class="keyword">operator</span> - (<span class="keyword">const</span> vec&amp; w)&#123;<span class="keyword">return</span> (vec)&#123;r-w.r,i-w.i&#125;;&#125;</div><div class="line">    vec <span class="keyword">operator</span> * (<span class="keyword">const</span> vec&amp; w)&#123;<span class="keyword">return</span> (vec)&#123;r*w.r-i*w.i,w.i*r+i*w.r&#125;;&#125;</div><div class="line">&#125;A[N],B[N];</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">FFT</span><span class="params">(vec* x,<span class="keyword">int</span> f)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len;i++) <span class="keyword">if</span>(i&lt;rev[i]) swap(x[i],x[rev[i]]);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> lnow=<span class="number">2</span>;lnow&lt;=len;lnow&lt;&lt;=<span class="number">1</span>)&#123;</div><div class="line">        vec w0=(vec)&#123;<span class="built_in">cos</span>(<span class="number">2</span>*PI/lnow*f),<span class="built_in">sin</span>(<span class="number">2</span>*PI/lnow*f)&#125;,t1,t2,w;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i+=lnow)&#123;</div><div class="line">            w=(vec)&#123;<span class="number">1</span>,<span class="number">0</span>&#125;;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;lnow/<span class="number">2</span>;j++,w=w*w0)&#123;</div><div class="line">                t1=x[i+j]; t2=w*x[i+j+lnow/<span class="number">2</span>];</div><div class="line">                x[i+j]=t1+t2; x[i+j+lnow/<span class="number">2</span>]=t1-t2;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125; </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>; <span class="keyword">char</span> a=getchar();</div><div class="line">    <span class="keyword">while</span>(a&lt;<span class="string">'0'</span> || a&gt;<span class="string">'9'</span>) &#123;<span class="keyword">if</span>(a==<span class="string">'-'</span>) f=<span class="number">-1</span>; a=getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(a&gt;=<span class="string">'0'</span> &amp;&amp; a&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+a-<span class="string">'0'</span>,a=getchar();</div><div class="line">    <span class="keyword">return</span> x*f;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    n=read(); m=read(); k=read();</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%s%s"</span>,st1,st2); <span class="keyword">int</span> t=<span class="number">0</span>; </div><div class="line">    <span class="keyword">for</span>(len=<span class="number">1</span>;len&lt;=<span class="number">2</span>*n;len&lt;&lt;=<span class="number">1</span>,t++); t--;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len;i++) rev[i]=(rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|(i&amp;<span class="number">1</span>?<span class="number">1</span>&lt;&lt;t:<span class="number">0</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> last,i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=len;j++) A[j]=B[j]=(vec)&#123;<span class="number">0</span>,<span class="number">0</span>&#125;; </div><div class="line">        last=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++) </div><div class="line">            <span class="keyword">if</span>(st1[j]==ch[i])&#123;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> t=max(j-k,last);t&lt;=j+k &amp;&amp; t&lt;n;t++) A[t].r=<span class="number">1.0</span>;</div><div class="line">                last=j+k;</div><div class="line">            &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)</div><div class="line">        <span class="keyword">if</span>(st2[j]==ch[i]) B[len/<span class="number">2</span>-j+<span class="number">1</span>].r=<span class="number">1.0</span>;</div><div class="line">        FFT(A,<span class="number">1</span>); FFT(B,<span class="number">1</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=len;j++) A[j]=A[j]*B[j];</div><div class="line">        FFT(A,<span class="number">-1</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)</div><div class="line">        match[j]+=(<span class="keyword">int</span>)(A[j+len/<span class="number">2</span>].r/len+eps);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</div><div class="line">        <span class="keyword">if</span>(match[i]==m) ans++;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题目精选 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> FFT </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「BZOJ3730」震波]]></title>
      <url>/2016/12/21/bzoj3730/</url>
      <content type="html"><![CDATA[<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><blockquote>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=3730" target="_blank" rel="external">题目传送门</a></p>
</blockquote>
<h3 id="解题报告"><a href="#解题报告" class="headerlink" title="解题报告"></a>解题报告</h3><blockquote>
<p>考虑动态点分治。我们对于每个点（点分树）维护两个树状数组。两个树状数组都以距离为下标，权值为内容。第一个树状数组维护子树中距离该点为k的权值和，第二个维护距离该点父亲距离为k的权值和。这样改权值时我们暴力爬树高，loglog复杂度（log的树高加上log的树状数组）。查询的时候一样爬树高，要注意容斥（把当前子树k的先加起来，往祖先上爬，如果距离小于k，假设为d，我们到祖先上去求一个k-d，再容斥掉原来这棵子树里被计算过的，这就是第二个树状数组的用处）。<br>时间复杂度0（nloglog），空间复杂度O（nlog）（如果用线段树还要加一个log。这里BB一句，为什么树状数组不会爆呢，因为你每一层开的大小为子树大小的话，每层总和n，总共log层，空间就是nlog的。其实就跟点分治的时间复杂度证明一样。用vector来开并且加上函数resize（）就可以办到了。）<br>这道题花了整整一天才写出来。。。一直RE（实际是WA，毕竟防离线加密，如果答案错了后面输入都是错的），总结一下错误：</p>
<ul>
<li>想的只用一个树状数组维护，实际上为了容斥必须要用上第二个树状数组。</li>
<li>更新时，一开始要把自己丢在自己的第二个树状数组里面</li>
<li>这玩意肯定要写在爬树循环外面啊（你是SB吗）</li>
<li>应该用qsum而不是query去爬树高（一开始脑袋抽了。。）</li>
<li>往树上爬的时候是不会中途退出的，不会因为有一个祖先爬不上去就终止，说不定有一个爷爷就在你旁边你可以过去呢。</li>
</ul>
<p>对于点分树的题就想象成爬山吧，我们用每一层的重心将点们分割开来，每次爬树高都是解锁区域，翻过一座高山。<br>还有，点分树自己脑补的板子实在太丑陋了。。这里膜拜一下ihopenot大佬，板子神快，我一开始好不容易调出来T了，参考了一下大佬的板子后就rank8了，真乃神人也！</p>
</blockquote>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1e9</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(i) ((i)&amp;-(i))</span></div><div class="line"><span class="keyword">int</span> n,m,head[N],val[N],fa[N][<span class="number">20</span>],dis[N][<span class="number">20</span>],s[N],f[N],dep[N],rt,sz,cnt,ans;</div><div class="line"><span class="keyword">bool</span> vis[N];</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;bit[N],fbit[N];</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>; <span class="keyword">char</span> a=getchar();</div><div class="line">    <span class="keyword">while</span>(a&gt;<span class="string">'9'</span> || a&lt;<span class="string">'0'</span>) &#123;<span class="keyword">if</span>(a==<span class="string">'-'</span>) f=<span class="number">-1</span>; a=getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(a&lt;=<span class="string">'9'</span> &amp;&amp; a&gt;=<span class="string">'0'</span>) x=x*<span class="number">10</span>+a-<span class="string">'0'</span>,a=getchar();</div><div class="line">    <span class="keyword">return</span> x*f;</div><div class="line">&#125; </div><div class="line"><span class="keyword">struct</span> edges&#123;</div><div class="line">    <span class="keyword">int</span> to,next;</div><div class="line">&#125;e[<span class="number">2</span>*N];</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> u=read(),v=read();</div><div class="line">    e[cnt]=(edges)&#123;v,head[u]&#125;;head[u]=cnt++;</div><div class="line">    e[cnt]=(edges)&#123;u,head[v]&#125;;head[v]=cnt++;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">getroot</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> father)</span></span>&#123;</div><div class="line">    s[x]=<span class="number">1</span>; f[x]=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i&gt;=<span class="number">0</span>;i=e[i].next)&#123;</div><div class="line">        <span class="keyword">if</span>(vis[e[i].to] || father==e[i].to) <span class="keyword">continue</span>;</div><div class="line">        getroot(e[i].to,x); s[x]+=s[e[i].to];</div><div class="line">        f[x]=max(f[x],s[e[i].to]);</div><div class="line">    &#125;</div><div class="line">    f[x]=max(f[x],sz-s[x]);</div><div class="line">    <span class="keyword">if</span>(f[x]&lt;f[rt]) rt=x;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">getship</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> anc,<span class="keyword">int</span> father,<span class="keyword">int</span> d)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i&gt;=<span class="number">0</span>;i=e[i].next)&#123;</div><div class="line">     <span class="keyword">int</span> v=e[i].to;</div><div class="line">     <span class="keyword">if</span>(!vis[v] &amp;&amp; v!=father) fa[v][++dep[v]]=anc,dis[v][dep[v]]=d,getship(v,anc,x,d+<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Buildtree</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    vis[x]=<span class="number">1</span>; getship(x,x,<span class="number">0</span>,<span class="number">1</span>); </div><div class="line">    <span class="keyword">int</span> all=sz; bit[x].resize(all+<span class="number">1</span>); fbit[x].resize(all+<span class="number">1</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i&gt;=<span class="number">0</span>;i=e[i].next)&#123;</div><div class="line">        <span class="keyword">if</span>(vis[e[i].to]) <span class="keyword">continue</span>;</div><div class="line">        sz=s[e[i].to]; <span class="keyword">if</span>(sz&gt;s[x]) sz=all-s[x];</div><div class="line">        rt=<span class="number">0</span>; getroot(e[i].to,x); Buildtree(rt);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">qsum</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> k)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> ret=val[x],lim=bit[x].size()<span class="number">-1</span>; k=min(k,lim); </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=k;i;i-=lowbit(i)) ret+=bit[x][i];</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">qsum2</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> k)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> ret=<span class="number">0</span>,lim=fbit[x].size()<span class="number">-1</span>; k=min(k,lim);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=k;i;i-=lowbit(i)) ret+=fbit[x][i];</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> v)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> d,lim; </div><div class="line">    d=dis[x][dep[x]]; lim=bit[x].size()<span class="number">-1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=d;j&lt;=lim &amp;&amp; j;j+=lowbit(j)) fbit[x][j]+=v;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=dep[x];i;i--)&#123;</div><div class="line">        d=dis[x][i]; lim=bit[fa[x][i]].size()<span class="number">-1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=d;j&lt;=lim;j+=lowbit(j)) bit[fa[x][i]][j]+=v;</div><div class="line">        d=dis[x][i<span class="number">-1</span>];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=d;j&lt;=lim &amp;&amp; j;j+=lowbit(j)) fbit[fa[x][i]][j]+=v;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> k)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> ret=qsum(x,k);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=dep[x];i;i--) <span class="keyword">if</span>(dis[x][i]&lt;=k)</div><div class="line">    ret+=qsum(fa[x][i],k-dis[x][i])-qsum2(fa[x][i+<span class="number">1</span>],k-dis[x][i]);</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    n=read(); m=read(); <span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span>(head));</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) val[i]=read();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++) insert();</div><div class="line">    f[<span class="number">0</span>]=INF; sz=n; getroot(<span class="number">1</span>,<span class="number">0</span>); Buildtree(rt); </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) fa[i][dep[i]+<span class="number">1</span>]=i;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) change(i,val[i]);</div><div class="line">    <span class="keyword">while</span>(m--)&#123;</div><div class="line">        <span class="keyword">int</span> a=read(),b=read()^ans,c=read()^ans;</div><div class="line">        <span class="keyword">if</span>(!a) ans=query(b,c),<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</div><div class="line">        <span class="keyword">else</span> change(b,c-val[b]),val[b]=c;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题目精选 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 树状数组 </tag>
            
            <tag> 点分治 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「BZOJ2653」middle]]></title>
      <url>/2016/12/20/bzoj2653/</url>
      <content type="html"><![CDATA[<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><blockquote>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=2653" target="_blank" rel="external">题目传送门</a></p>
</blockquote>
<h3 id="解题报告"><a href="#解题报告" class="headerlink" title="解题报告"></a>解题报告</h3><blockquote>
<p>OTZ陈老师出的神题。<br>先考虑一个简单问题：只有一个询问的情况。此时我们二分中位数，并且将区间内小中位数的数标为-1，大于的标为1，此时区间最大和如果大等0，则说明中位数可以变大，然后二分下去就可以了。<br>加上询问之后，我们就要维护这样一个区间最大和了。考虑主席树，我们对于每一个值，建出它对应的1，-1树，然后二分，到对应的树上去求最大区间和就好了。那么问题来了，怎么维护这样一个最大区间和呢？首先，我们有必选区间b,c所以我要把这个区间的和算上，对于可选区间a,b-1和c+1,d，我们要求一个最大前后缀和。这个东西可以这样求（以前缀和为例）：max(左儿子sum+右儿子前缀，左儿子前缀)。<br>那么整体思路出来了：先建出一棵全线段树（全为1），然后我们把原序列排个序（要把下标对应好），然后一个一个按顺序丢进树里，把小等自己的变为-1，以供这个数的后一个数查询时使用。 然后我们二分答案，对于当前答案去树上找最大区间和，如果大等0则满足条件。<br>这道题主席树建出来，第一维度是权值，第二维度是下标。我一开始想的一二维是反的，而大神说这样有问题，一直没想通哪里有问题。。。再去和大神讨论一下。<br>写这道题写得异常艰难。先是在想二分会不会有问题（实际是不会的，因为题目弄出来的中位数在偶数个时会选择较大的那个）昨天晚上写了第一版，有点问题，第二天写了第二版，还是有问题，什么没有排序导致没有正确性啊，建树不分配编号啊什么的。然后各种改，终于过了（感谢ihopenot大佬）。</p>
</blockquote>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 20005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M 400005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CT Chairman_Tree</span></div><div class="line"><span class="keyword">int</span> n,Q,p[<span class="number">5</span>],ans;</div><div class="line"><span class="keyword">struct</span> data&#123;</div><div class="line">    <span class="keyword">int</span> num,pos;</div><div class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> data&amp; w)<span class="keyword">const</span>&#123;</div><div class="line">        <span class="keyword">if</span>(num==w.num) <span class="keyword">return</span> pos&lt;w.pos;</div><div class="line">        <span class="keyword">return</span> num&lt;w.num;</div><div class="line">    &#125;</div><div class="line">&#125;a[N]; </div><div class="line"><span class="keyword">namespace</span> Chairman_Tree&#123;</div><div class="line">    <span class="keyword">struct</span> node&#123;</div><div class="line">        <span class="keyword">int</span> son[<span class="number">2</span>],sum,ls,rs;</div><div class="line">    &#125;tr[M];</div><div class="line">    <span class="keyword">int</span> sz,root[N];</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span>&amp; x,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</div><div class="line">        x=++sz;</div><div class="line">        tr[x].ls=tr[x].rs=tr[x].sum=r-l+<span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span>(l==r) <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</div><div class="line">        build(tr[x].son[<span class="number">0</span>],l,mid);</div><div class="line">        build(tr[x].son[<span class="number">1</span>],mid+<span class="number">1</span>,r);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span>&amp; y,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> lim)</span></span>&#123;</div><div class="line">        tr[y=++sz].sum=tr[x].sum<span class="number">-2</span>;</div><div class="line">        <span class="keyword">if</span>(l==r)&#123;</div><div class="line">            tr[y].ls=tr[y].rs=<span class="number">0</span>;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">memcpy</span>(tr[y].son,tr[x].son,<span class="keyword">sizeof</span>(tr[y].son));</div><div class="line">        <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>,LS,RS;</div><div class="line">        <span class="keyword">if</span>(lim&gt;mid) insert(tr[x].son[<span class="number">1</span>],tr[y].son[<span class="number">1</span>],mid+<span class="number">1</span>,r,lim);</div><div class="line">        <span class="keyword">else</span> insert(tr[x].son[<span class="number">0</span>],tr[y].son[<span class="number">0</span>],l,mid,lim);</div><div class="line">        LS=tr[y].son[<span class="number">0</span>],RS=tr[y].son[<span class="number">1</span>];</div><div class="line">        tr[y].ls=max(tr[LS].sum+tr[RS].ls,tr[LS].ls);</div><div class="line">        tr[y].rs=max(tr[RS].sum+tr[LS].rs,tr[RS].rs);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;insert(root[i],root[i+<span class="number">1</span>],<span class="number">1</span>,n,a[i].pos);&#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(L==l &amp;&amp;     R==r) <span class="keyword">return</span> tr[x].sum;</div><div class="line">        <span class="keyword">int</span> mid=(L+R)&gt;&gt;<span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span>(r&lt;=mid) <span class="keyword">return</span> query(tr[x].son[<span class="number">0</span>],L,mid,l,r);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(mid&lt;l) <span class="keyword">return</span> query(tr[x].son[<span class="number">1</span>],mid+<span class="number">1</span>,R,l,r);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">return</span> query(tr[x].son[<span class="number">0</span>],L,mid,l,mid)+query(tr[x].son[<span class="number">1</span>],mid+<span class="number">1</span>,R,mid+<span class="number">1</span>,r);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lquery</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(L==l &amp;&amp; R==r) <span class="keyword">return</span> tr[x].ls;</div><div class="line">        <span class="keyword">int</span> mid=(L+R)&gt;&gt;<span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span>(r&lt;=mid) <span class="keyword">return</span> lquery(tr[x].son[<span class="number">0</span>],L,mid,l,r);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(mid&lt;l) <span class="keyword">return</span> lquery(tr[x].son[<span class="number">1</span>],mid+<span class="number">1</span>,R,l,r);</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">int</span> t1=query(tr[x].son[<span class="number">0</span>],L,mid,l,mid)+lquery(tr[x].son[<span class="number">1</span>],mid+<span class="number">1</span>,R,mid+<span class="number">1</span>,r),t2=lquery(tr[x].son[<span class="number">0</span>],L,mid,l,mid);</div><div class="line">        <span class="keyword">return</span> max(t1,t2);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">rquery</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(L==l &amp;&amp; R==r) <span class="keyword">return</span> tr[x].rs;</div><div class="line">        <span class="keyword">int</span> mid=(L+R)&gt;&gt;<span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span>(r&lt;=mid) <span class="keyword">return</span> rquery(tr[x].son[<span class="number">0</span>],L,mid,l,r);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(mid&lt;l) <span class="keyword">return</span> rquery(tr[x].son[<span class="number">1</span>],mid+<span class="number">1</span>,R,l,r);</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">int</span> t1=rquery(tr[x].son[<span class="number">0</span>],L,mid,l,mid)+query(tr[x].son[<span class="number">1</span>],mid+<span class="number">1</span>,R,mid+<span class="number">1</span>,r),t2=rquery(tr[x].son[<span class="number">1</span>],mid+<span class="number">1</span>,R,mid+<span class="number">1</span>,r); </div><div class="line">        <span class="keyword">return</span> max(t1,t2);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> CT;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>; <span class="keyword">char</span> a=getchar();</div><div class="line">    <span class="keyword">while</span>(a&lt;<span class="string">'0'</span> || a&gt;<span class="string">'9'</span>) &#123;<span class="keyword">if</span>(a==<span class="string">'-'</span>) f=<span class="number">-1</span>; a=getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(a&gt;=<span class="string">'0'</span> &amp;&amp; a&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+a-<span class="string">'0'</span>,a=getchar();</div><div class="line">    <span class="keyword">return</span> x*f;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">jud</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> rquery(root[x],<span class="number">1</span>,n,p[<span class="number">1</span>],p[<span class="number">2</span>]<span class="number">-1</span>)+query(root[x],<span class="number">1</span>,n,p[<span class="number">2</span>],p[<span class="number">3</span>])+lquery(root[x],<span class="number">1</span>,n,p[<span class="number">3</span>]+<span class="number">1</span>,p[<span class="number">4</span>])&gt;=<span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    n=read();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) a[i]=(data)&#123;read(),i&#125;;</div><div class="line">    build(root[<span class="number">1</span>],<span class="number">1</span>,n);</div><div class="line">    sort(a+<span class="number">1</span>,a+<span class="number">1</span>+n);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++) insert(i);</div><div class="line">    Q=read();</div><div class="line">    <span class="keyword">while</span>(Q--)&#123;</div><div class="line">        <span class="keyword">int</span> l=<span class="number">1</span>,r=n;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">4</span>;i++) p[i]=(read()+ans)%n+<span class="number">1</span>;</div><div class="line">        sort(p+<span class="number">1</span>,p+<span class="number">5</span>);</div><div class="line">        <span class="keyword">while</span>(l&lt;r)&#123;</div><div class="line">            <span class="keyword">int</span> mid=(l+r+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span>(jud(mid)) l=mid;</div><div class="line">            <span class="keyword">else</span> r=mid<span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line">        ans=a[l].num; <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题目精选 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 可持久化线段树 </tag>
            
            <tag> 二分 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「BZOJ4408」「FJOI2016」神秘数]]></title>
      <url>/2016/12/19/bzoj4408/</url>
      <content type="html"><![CDATA[<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><blockquote>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=4408" target="_blank" rel="external">题目传送门</a></p>
</blockquote>
<h3 id="解题报告"><a href="#解题报告" class="headerlink" title="解题报告"></a>解题报告</h3><blockquote>
<p>如果我们将这段数排序，并且已知前n个数的神秘数为x，即现在凑得的数的区间为[1,x]，新加入的数为a，那么不难发现，我们凑得的数又得到了一段区间[a+1,a+x]，那么如果a+1&lt;=x，我们就可以拼上这两段，而神秘数变为a+x+1。<br>也即是说，我们有当前解ans，我们将所有小等ans的数加起来（其实根据前面所推应该是小于，但是写小等不会错，而且对于代码来说更好些，至于为什么不多赘述），如果sigma&lt;ans说明出现了断裂处，即此时ans为答案。否则我们将ans变为sigma+1，继续更新答案。<br>时间复杂度0（nlogn*P），其中P为常数（当数列为斐波那契时会被卡到极限40）<br>写代码的时候有一段小插曲。一开始用主席树写的对于每个节点单独累加起来，那样时间复杂度显然不对，实际上直接把每个节点的sum求出来减掉就好了。果然还是太SB啊QAQ</p>
</blockquote>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100005</span></div><div class="line"><span class="keyword">int</span> n,m,root[N],ls[<span class="number">100</span>*N],rs[<span class="number">100</span>*N],sum[<span class="number">100</span>*N],cnt,ans,get;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>; <span class="keyword">char</span> a=getchar();</div><div class="line">    <span class="keyword">while</span>(a&gt;<span class="string">'9'</span> || a&lt;<span class="string">'0'</span>) &#123;<span class="keyword">if</span>(a==<span class="string">'-'</span>) f=<span class="number">-1</span>; a=getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(a&gt;=<span class="string">'0'</span> &amp;&amp; a&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+a-<span class="string">'0'</span>,a=getchar();</div><div class="line">    <span class="keyword">return</span> x*f;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">inser</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span>&amp; y,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> v)</span></span>&#123;</div><div class="line">    y=++cnt;</div><div class="line">    sum[y]=sum[x]+v;</div><div class="line">    <span class="keyword">if</span>(l==r) <span class="keyword">return</span>;</div><div class="line">    ls[y]=ls[x]; rs[y]=rs[x];</div><div class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span>(v&gt;mid) inser(rs[x],rs[y],mid+<span class="number">1</span>,r,v);</div><div class="line">    <span class="keyword">else</span> inser(ls[x],ls[y],l,mid,v);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> lim)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span>(r&lt;=lim) <span class="keyword">return</span> sum[y]-sum[x];</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(lim&lt;=mid) <span class="keyword">return</span> query(ls[x],ls[y],l,mid,lim);</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> sum[ls[y]]-sum[ls[x]]+query(rs[x],rs[y],mid+<span class="number">1</span>,r,lim);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    n=read();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) inser(root[i<span class="number">-1</span>],root[i],<span class="number">1</span>,<span class="number">1e9</span>,read());</div><div class="line">    m=read();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> l,r,i=<span class="number">1</span>;i&lt;=m;i++)&#123;</div><div class="line">        l=read(); r=read(); ans=<span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</div><div class="line">            get=query(root[l<span class="number">-1</span>],root[r],<span class="number">1</span>,<span class="number">1e9</span>,ans);</div><div class="line">            <span class="keyword">if</span>(get&lt;ans) <span class="keyword">break</span>;</div><div class="line">            ans=get+<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题目精选 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 可持久化线段树 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「BZOJ2938」「Poi2000」病毒]]></title>
      <url>/2016/12/14/bzoj2938/</url>
      <content type="html"><![CDATA[<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><blockquote>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=2938" target="_blank" rel="external">题目传送门</a></p>
</blockquote>
<h3 id="解题报告"><a href="#解题报告" class="headerlink" title="解题报告"></a>解题报告</h3><blockquote>
<p>题解：对于一组病毒编码，我们构建AC自动机。如果存在一个无限长的安全代码，它在里面匹配，将一直匹配不上，也就是说，失配边会形成一个环。<br>所以构建好AC自动机后dfs失配边看有无环即可。</p>
</blockquote>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 30005</span></div><div class="line"><span class="keyword">int</span> n; <span class="keyword">char</span> ch[N];</div><div class="line"><span class="keyword">struct</span> acc</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> f[N],next[N][<span class="number">2</span>],cnt,head,tail,q[N];</div><div class="line">    <span class="keyword">bool</span> vis[N],ins[N],danger[N];</div><div class="line">    acc()&#123;</div><div class="line">        cnt=<span class="number">0</span>;</div><div class="line">        <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</div><div class="line">        <span class="built_in">memset</span>(ins,<span class="number">0</span>,<span class="keyword">sizeof</span>(ins));</div><div class="line">        <span class="built_in">memset</span>(danger,<span class="number">0</span>,<span class="keyword">sizeof</span>(danger));</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inser</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,ch); <span class="keyword">int</span> p=<span class="number">0</span>,len=<span class="built_in">strlen</span>(ch);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> a,i=<span class="number">0</span>;i&lt;len;i++)&#123;</div><div class="line">            a=ch[i]-<span class="string">'0'</span>;</div><div class="line">            <span class="keyword">if</span>(!next[p][a]) next[p][a]=++cnt;</div><div class="line">            p=next[p][a];</div><div class="line">        &#125; danger[p]=<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getfail</span><span class="params">()</span></span>&#123;</div><div class="line">        head=<span class="number">0</span>; tail=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++) <span class="keyword">if</span>(next[<span class="number">0</span>][i]) q[tail++]=next[<span class="number">0</span>][i],f[next[<span class="number">0</span>][i]]=<span class="number">0</span>;</div><div class="line">        <span class="comment">//一定不要直接把0丢进队列BFS，要分别把每个单独拿出来，不然是错的 </span></div><div class="line">        <span class="keyword">while</span>(head&lt;tail)&#123;</div><div class="line">            <span class="keyword">int</span> p=q[head++];</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)&#123;</div><div class="line">                <span class="keyword">int</span> v=next[p][i];</div><div class="line">                <span class="keyword">if</span>(!v) &#123;next[p][i]=next[f[p]][i]; <span class="keyword">continue</span>;&#125;</div><div class="line">                <span class="keyword">int</span> k=f[p];</div><div class="line">                <span class="keyword">while</span>(k &amp;&amp; !next[k][i]) k=f[k]; k=next[k][i];</div><div class="line">                f[v]=k;</div><div class="line">                 danger[v]|=danger[k];</div><div class="line">                q[tail++]=v;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">        ins[x]=<span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)&#123;</div><div class="line">            <span class="keyword">int</span> v=next[x][i];</div><div class="line">            <span class="keyword">if</span>(ins[v]) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span>(vis[v] || danger[v]) <span class="keyword">continue</span>;</div><div class="line">            vis[v]=<span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span>(dfs(v)) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        ins[x]=<span class="number">0</span>;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;acm;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) acm.inser();</div><div class="line">    acm.getfail();</div><div class="line">    <span class="keyword">if</span>(acm.dfs(<span class="number">0</span>)) <span class="built_in">puts</span>(<span class="string">"TAK"</span>);</div><div class="line">    <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"NIE"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题目精选 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> AC自动机 </tag>
            
            <tag> DFS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「BZOJ2733」「HNOI2012」永无乡]]></title>
      <url>/2016/12/13/bzoj2733/</url>
      <content type="html"><![CDATA[<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><blockquote>
<p><a href="">题目传送门</a></p>
</blockquote>
<h3 id="解题报告"><a href="#解题报告" class="headerlink" title="解题报告"></a>解题报告</h3><blockquote>
<p>线段树合并模板。</p>
</blockquote>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100005</span></div><div class="line"><span class="keyword">char</span> ch[<span class="number">2</span>];</div><div class="line"><span class="keyword">int</span> n,m,q,sz,f[N],root[N],sum[<span class="number">2000005</span>],ls[<span class="number">2000005</span>],rs[<span class="number">2000005</span>],v[N],id[N];</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    sum[x]=sum[ls[x]]+sum[rs[x]];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>; <span class="keyword">char</span> a=getchar();</div><div class="line">    <span class="keyword">while</span>(a&lt;<span class="string">'0'</span> || a&gt;<span class="string">'9'</span>) &#123;<span class="keyword">if</span>(a==<span class="string">'-'</span>) f=<span class="number">-1</span>; a=getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(a&gt;=<span class="string">'0'</span> &amp;&amp; a&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+a-<span class="string">'0'</span>,a=getchar();</div><div class="line">    <span class="keyword">return</span> x*f;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">fa</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> f[x]!=x?f[x]=fa(f[x]):x;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">inser</span><span class="params">(<span class="keyword">int</span>&amp; x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> val)</span></span>&#123;</div><div class="line">    x=++sz;</div><div class="line">    <span class="keyword">if</span>(l==r) &#123;sum[x]=<span class="number">1</span>;<span class="keyword">return</span>;&#125;</div><div class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span>(val&lt;=mid) inser(ls[x],l,mid,val); </div><div class="line">    <span class="keyword">else</span> inser(rs[x],mid+<span class="number">1</span>,r,val);</div><div class="line">    update(x);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> y;</div><div class="line">    <span class="keyword">if</span>(!y) <span class="keyword">return</span> x;</div><div class="line">    ls[x]=merge(ls[x],ls[y]);</div><div class="line">    rs[x]=merge(rs[x],rs[y]);</div><div class="line">    update(x);</div><div class="line">    <span class="keyword">return</span> x;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(l==r) <span class="keyword">return</span> l;</div><div class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span>(sum[ls[x]]&gt;=k) <span class="keyword">return</span> query(ls[x],l,mid,k);</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> query(rs[x],mid+<span class="number">1</span>,r,k-sum[ls[x]]);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    n=read(); m=read();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) f[i]=i;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) v[i]=read();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> p,i=<span class="number">1</span>;i&lt;=n;i++) inser(root[i],<span class="number">1</span>,n,v[i]),id[v[i]]=i;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x,y,i=<span class="number">1</span>;i&lt;=m;i++) x=read(),y=read(),x=fa(x),y=fa(y),f[y]=x,root[x]=merge(root[x],root[y]);</div><div class="line">    q=read();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x,y,i=<span class="number">1</span>;i&lt;=q;i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,ch); x=read(); y=read();</div><div class="line">        <span class="keyword">if</span>(ch[<span class="number">0</span>]==<span class="string">'Q'</span>)&#123;</div><div class="line">            x=fa(x);</div><div class="line">            <span class="keyword">if</span>(sum[root[x]]&lt;y) &#123;<span class="built_in">puts</span>(<span class="string">"-1"</span>);<span class="keyword">continue</span>;&#125;</div><div class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,id[query(root[x],<span class="number">1</span>,n,y)]);</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            x=fa(x); y=fa(y);</div><div class="line">            <span class="keyword">if</span>(x!=y) f[y]=x,root[x]=merge(root[x],root[y]); </div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题目精选 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 线段树合并 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「BZOJ2719」银河之星]]></title>
      <url>/2016/11/16/bzoj2719/</url>
      <content type="html"><![CDATA[<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><blockquote>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=2719" target="_blank" rel="external">题目传送门</a></p>
</blockquote>
<h3 id="解题报告"><a href="#解题报告" class="headerlink" title="解题报告"></a>解题报告</h3><blockquote>
<p>可以将棋子分为9种类型。且可以通过合并使得两个不同种类棋子转换为另一种棋子（不过要注意棋盘大小，有的时候硬要合并会到棋盘外面，可以先把棋盘全部转换，然后枚举每一个棋子的转换）。然后把状态压成一个十位的十进制数就可以记忆化搜索了。</p>
</blockquote>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> id(i,j) ((i-1)*3+j-1);</span></div><div class="line"><span class="keyword">struct</span> point&#123;</div><div class="line">    <span class="keyword">int</span> a,b;</div><div class="line">&#125;p[<span class="number">15</span>];</div><div class="line"><span class="keyword">int</span> k,n,m,x,y,g[<span class="number">105</span>][<span class="number">105</span>],tot[<span class="number">15</span>],change[<span class="number">10</span>][<span class="number">10</span>];</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> dir[<span class="number">8</span>][<span class="number">2</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>&#125;;</div><div class="line">LL bg,fin,bin[<span class="number">15</span>];</div><div class="line"><span class="keyword">bool</span> flag;</div><div class="line"><span class="built_in">map</span>&lt;LL,<span class="keyword">int</span>&gt;lis;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(LL st)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(lis[st])&#123;</div><div class="line">        <span class="keyword">if</span>(lis[st]==<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(st==fin) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    LL tmp;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)</div><div class="line">        <span class="keyword">if</span>((st%bin[i+<span class="number">1</span>])/bin[i]&gt;<span class="number">0</span>)&#123;</div><div class="line">             <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">9</span>;j++)</div><div class="line">             <span class="keyword">if</span>(change[i][j]!=<span class="number">-1</span> &amp;&amp; (st%bin[j+<span class="number">1</span>])/bin[j]&gt;<span class="number">0</span>)&#123;</div><div class="line">             tmp=st,tmp=tmp-(bin[i]+bin[j])+bin[change[i][j]];</div><div class="line">             <span class="keyword">if</span>(dfs(tmp)) &#123;lis[tmp]=<span class="number">1</span>; <span class="keyword">return</span> <span class="literal">true</span>;&#125;</div><div class="line">             &#125;</div><div class="line">        &#125;</div><div class="line">    lis[st]=<span class="number">2</span>;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    bin[<span class="number">0</span>]=<span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++) bin[i]=bin[i<span class="number">-1</span>]*<span class="number">10</span>;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d%d%d%d"</span>,&amp;k,&amp;n,&amp;m,&amp;x,&amp;y)!=EOF)&#123;</div><div class="line">        lis.clear(); bg=<span class="number">0</span>; flag=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> num=id(((x<span class="number">-1</span>)%<span class="number">3</span>+<span class="number">1</span>),((y<span class="number">-1</span>)%<span class="number">3</span>+<span class="number">1</span>));</div><div class="line">        fin=bin[num];</div><div class="line">        <span class="built_in">memset</span>(tot,<span class="number">0</span>,<span class="keyword">sizeof</span>(tot));</div><div class="line">        <span class="built_in">memset</span>(change,<span class="number">-1</span>,<span class="keyword">sizeof</span>(change));</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> a,b,i=<span class="number">1</span>;i&lt;=k;i++) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</div><div class="line">            p[i]=(point)&#123;a,b&#125;;</div><div class="line">            <span class="keyword">int</span> num=id(((a<span class="number">-1</span>)%<span class="number">3</span>+<span class="number">1</span>),((b<span class="number">-1</span>)%<span class="number">3</span>+<span class="number">1</span>));</div><div class="line">            tot[num]++;</div><div class="line">            <span class="keyword">if</span>(tot[num]==<span class="number">10</span>) <span class="built_in">puts</span>(<span class="string">"No"</span>),flag=<span class="number">1</span>;</div><div class="line">            <span class="keyword">else</span> bg+=bin[num];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(flag) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</div><div class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)</div><div class="line">            g[i+<span class="number">1</span>][j+<span class="number">1</span>]=id((i%<span class="number">3</span>+<span class="number">1</span>),(j%<span class="number">3</span>+<span class="number">1</span>));</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> d=<span class="number">0</span>;d&lt;<span class="number">8</span>;d++)&#123;</div><div class="line">              <span class="keyword">int</span> ta=i+<span class="number">2</span>*dir[d][<span class="number">0</span>],tb=j+<span class="number">2</span>*dir[d][<span class="number">1</span>];</div><div class="line">              <span class="keyword">if</span>(ta&lt;<span class="number">1</span> || ta&gt;n || tb&lt;<span class="number">1</span> || tb&gt;m) <span class="keyword">continue</span>;</div><div class="line">            change[g[ta-dir[d][<span class="number">0</span>]][tb-dir[d][<span class="number">1</span>]]][g[i][j]]=change[g[i][j]][g[ta-dir[d][<span class="number">0</span>]][tb-dir[d][<span class="number">1</span>]]]=g[ta][tb];</div><div class="line">          &#125;</div><div class="line">        <span class="keyword">if</span>(dfs(bg)) <span class="built_in">puts</span>(<span class="string">"Yes"</span>);</div><div class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"No"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题目精选 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 记忆化搜索 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「BZOJ1880」「SDOI2009」Elaxia的路线]]></title>
      <url>/2016/11/05/bzoj1880/</url>
      <content type="html"><![CDATA[<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><blockquote>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=1880" target="_blank" rel="external">题目传送门</a></p>
</blockquote>
<h3 id="解题报告"><a href="#解题报告" class="headerlink" title="解题报告"></a>解题报告</h3><blockquote>
<p>考虑每一条边，如果满足dis(s1,u)+len+dis(v,t1)==dis(s1,t1) &amp;&amp; dis(s2,u)+len+dis(v,t2)==dis(s2,t2) 则该边在公共最短路上<br>拓扑排序dp下即可</p>
</blockquote>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 1505</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1e9</span></div><div class="line"><span class="keyword">int</span> n,m,a[<span class="number">5</span>],dis[<span class="number">5</span>][N],cnt,cnt1,head[N],head1[N],r[N],ans[N],fin;</div><div class="line"><span class="keyword">bool</span> y[N];</div><div class="line"><span class="keyword">struct</span> data&#123;</div><div class="line">    <span class="keyword">int</span> num,v;</div><div class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> data&amp; w)<span class="keyword">const</span>&#123;</div><div class="line">       <span class="keyword">return</span> v&gt;w.v;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">priority_queue&lt;data&gt;q;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>; <span class="keyword">char</span> a=getchar();</div><div class="line">    <span class="keyword">while</span>(a&lt;<span class="string">'0'</span> || a&gt;<span class="string">'9'</span>) &#123;<span class="keyword">if</span>(a==<span class="string">'-'</span>) f=<span class="number">-1</span>; a=getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(a&gt;=<span class="string">'0'</span> &amp;&amp; a&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+a-<span class="string">'0'</span>,a=getchar();</div><div class="line">    <span class="keyword">return</span> x*f;</div><div class="line">&#125; </div><div class="line"><span class="keyword">struct</span> edges&#123;</div><div class="line">    <span class="keyword">int</span> fr,to,v,next;</div><div class="line">&#125;e[<span class="number">500005</span>],e1[<span class="number">500005</span>];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">inser</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> c)</span></span>&#123;</div><div class="line">    e[cnt]=(edges)&#123;u,v,c,head[u]&#125;;head[u]=cnt++;</div><div class="line">    e[cnt]=(edges)&#123;v,u,c,head[v]&#125;;head[v]=cnt++;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> c)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(dis[<span class="number">1</span>][u]&gt;dis[<span class="number">1</span>][v]) swap(u,v);</div><div class="line">    e1[cnt1]=(edges)&#123;u,v,c,head1[u]&#125;;head1[u]=cnt1++; r[v]++;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dj</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    dis[x][a[x]]=<span class="number">0</span>; <span class="built_in">memset</span>(y,<span class="number">0</span>,<span class="keyword">sizeof</span>(y));q.push((data)&#123;a[x],<span class="number">0</span>&#125;);</div><div class="line">    <span class="keyword">int</span> s,to;</div><div class="line">    <span class="keyword">while</span>(!q.empty())&#123;</div><div class="line">        s=q.top().num; q.pop(); </div><div class="line">        <span class="keyword">if</span>(y[s]) <span class="keyword">continue</span>; y[s]=<span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[s];i&gt;=<span class="number">0</span>;i=e[i].next)&#123;</div><div class="line">        <span class="keyword">if</span>(y[e[i].to]) <span class="keyword">continue</span>; to=e[i].to;</div><div class="line">        <span class="keyword">if</span>(dis[x][to]&gt;dis[x][s]+e[i].v) dis[x][to]=dis[x][s]+e[i].v,q.push((data)&#123;to,dis[x][to]&#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">topsort</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    r[x]--;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head1[x];i&gt;=<span class="number">0</span>;i=e1[i].next)&#123;</div><div class="line">        ans[e1[i].to]=max(ans[e1[i].to],ans[x]+e1[i].v);</div><div class="line">        fin=max(ans[e1[i].to],fin);</div><div class="line">        r[e1[i].to]--; <span class="keyword">if</span>(!r[e1[i].to]) topsort(e1[i].to);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    n=read(); m=read(); </div><div class="line">    <span class="built_in">memset</span>(dis,<span class="number">34</span>,<span class="keyword">sizeof</span>(dis)); </div><div class="line">    <span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span>(head));</div><div class="line">    <span class="built_in">memset</span>(head1,<span class="number">-1</span>,<span class="keyword">sizeof</span>(head1));</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">4</span>;i++) a[i]=read();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> u,v,c,i=<span class="number">1</span>;i&lt;=m;i++)</div><div class="line">    u=read(),v=read(),c=read(),inser(u,v,c);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">4</span>;i++) dj(i);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i+=<span class="number">2</span>)&#123;</div><div class="line">        <span class="keyword">int</span> u=e[i].fr,v=e[i].to;</div><div class="line">        <span class="keyword">if</span>((dis[<span class="number">1</span>][u]+e[i].v+dis[<span class="number">2</span>][v]==dis[<span class="number">1</span>][a[<span class="number">2</span>]] || dis[<span class="number">1</span>][v]+e[i].v+dis[<span class="number">2</span>][u]==dis[<span class="number">1</span>][a[<span class="number">2</span>]]) &amp;&amp; (dis[<span class="number">3</span>][u]+e[i].v+dis[<span class="number">4</span>][v]==dis[<span class="number">3</span>][a[<span class="number">4</span>]] || dis[<span class="number">3</span>][v]+e[i].v+dis[<span class="number">4</span>][u]==dis[<span class="number">3</span>][a[<span class="number">4</span>]]))</div><div class="line">        ins(u,v,e[i].v);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line">    <span class="keyword">if</span>(!r[i]) topsort(i);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,fin);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题目精选 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 最短路 </tag>
            
            <tag> 拓扑排序 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「Codeforces731E」Funny Game]]></title>
      <url>/2016/10/25/CF731E/</url>
      <content type="html"><![CDATA[<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><blockquote>
<p><a href="">题目传送门</a></p>
</blockquote>
<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote>
<p>一个游戏，由n张贴纸组成。贴纸排成一排，并且纸条上标有数字，玩家轮流揭下m张从左到右连续的纸条（m大等2），揭下后玩家得分累加这些纸条的sum，并且在剩下纸条最左边贴上新的纸条，数值为揭下纸条的sum。最后只剩一张纸条时游戏结束。每个玩家的策略是使敌我分差尽可能大。求这个分差。</p>
</blockquote>
<h3 id="解题报告"><a href="#解题报告" class="headerlink" title="解题报告"></a>解题报告</h3><blockquote>
<p>这道题是那一场最难的题，交的人最少，然而代码只有几行（一个for循环搞定<br>题解引入了一个“zero-sum game”来阐述这一类游戏，并且说这一类游戏通常用dp解（%%%<br>我们发现每个状态只跟我们已经取走了多少张纸条有关，我们设状态dp[i]表示已经取走i个纸条，一开始分差为0的状态，装的值为这种状态下最大分差<br>状态转移为dp[i]=max(sum[j]-dp[j])    i&lt;j&lt;=n<br>推的时候维护最大值，O（n）草翻这题（%%%%</p>
</blockquote>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 200005</span></div><div class="line"><span class="keyword">int</span> n,s[N],dp[N],maxx;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n); <span class="keyword">for</span>(<span class="keyword">int</span> a,i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a),s[i]=s[i<span class="number">-1</span>]+a;</div><div class="line">    maxx=s[n];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">1</span>;i--)</div><div class="line">    dp[i]=maxx,maxx=max(maxx,s[i]-dp[i]);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dp[<span class="number">1</span>]);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题目精选 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 博弈论 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「BZOJ3295」「CQOI2011」动态逆序对]]></title>
      <url>/2016/10/20/bzoj3295/</url>
      <content type="html"><![CDATA[<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><blockquote>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=3295" target="_blank" rel="external">题目传送门</a></p>
</blockquote>
<h3 id="解题报告"><a href="#解题报告" class="headerlink" title="解题报告"></a>解题报告</h3><blockquote>
<p>可用树套树可用CDQ分治（据说还有分块<br>基本上算是两种方法的版题。。。详解网上有很多，推荐<a href="http://blog.csdn.net/u011542204/article/details/50571409" target="_blank" rel="external">神犇题解</a><br>只写了树套树。。CDQ感觉和之前写的版差不多就懒得写了。。</p>
</blockquote>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> X 5000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></div><div class="line"><span class="keyword">int</span> num[N],pos[N],n,m,t[N],a1[N],a2[N],A[N],B[N],root[X],ls[X],rs[X],sz,sum[X];</div><div class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span>&amp; x)</span></span>&#123;</div><div class="line">    x=<span class="number">0</span>; <span class="keyword">int</span> f=<span class="number">1</span>,a=getchar();</div><div class="line">    <span class="keyword">while</span>(a&lt;<span class="string">'0'</span> || a&gt;<span class="string">'9'</span>) &#123;<span class="keyword">if</span>(a==<span class="string">'-'</span>) f=<span class="number">-1</span>; a=getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(a&gt;=<span class="string">'0'</span> &amp;&amp; a&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+a-<span class="string">'0'</span>,a=getchar(); x*=f;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">getans</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> ret=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=x;i;i-=lowbit(i)) ret+=t[i]; <span class="keyword">return</span> ret; </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span>&amp; y,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(!y) y=++sz;  sum[y]++; <span class="keyword">if</span>(l==r) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span>(k&lt;=mid) update(ls[y],l,mid,k);</div><div class="line">    <span class="keyword">else</span> update(rs[y],mid+<span class="number">1</span>,r,k);</div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">askmore</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> k)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> ret=<span class="number">0</span>; A[<span class="number">0</span>]=B[<span class="number">0</span>]=<span class="number">0</span>; x--;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=x;i;i-=lowbit(i)) A[++A[<span class="number">0</span>]]=root[i];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=y;i;i-=lowbit(i)) B[++B[<span class="number">0</span>]]=root[i];</div><div class="line">    <span class="keyword">int</span> l=<span class="number">1</span>,r=n;</div><div class="line">    <span class="keyword">while</span>(l&lt;r)&#123;</div><div class="line">        <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span>(k&lt;=mid)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=A[<span class="number">0</span>];i++) ret-=sum[rs[A[i]]],A[i]=ls[A[i]];</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=B[<span class="number">0</span>];i++) ret+=sum[rs[B[i]]],B[i]=ls[B[i]];</div><div class="line">            r=mid;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=A[<span class="number">0</span>];i++) A[i]=rs[A[i]];</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=B[<span class="number">0</span>];i++) B[i]=rs[B[i]];</div><div class="line">            l=mid+<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">askless</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> k)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> ret=<span class="number">0</span>; A[<span class="number">0</span>]=B[<span class="number">0</span>]=<span class="number">0</span>; x--;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=x;i;i-=lowbit(i)) A[++A[<span class="number">0</span>]]=root[i];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=y;i;i-=lowbit(i)) B[++B[<span class="number">0</span>]]=root[i];</div><div class="line">    <span class="keyword">int</span> l=<span class="number">1</span>,r=n;</div><div class="line">    <span class="keyword">while</span>(l&lt;r)&#123;</div><div class="line">        <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span>(k&gt;mid)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=A[<span class="number">0</span>];i++) ret-=sum[ls[A[i]]],A[i]=rs[A[i]];</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=B[<span class="number">0</span>];i++) ret+=sum[ls[B[i]]],B[i]=rs[B[i]];</div><div class="line">            l=mid+<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=A[<span class="number">0</span>];i++) A[i]=ls[A[i]];</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=B[<span class="number">0</span>];i++) B[i]=ls[B[i]];</div><div class="line">            r=mid;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    read(n); read(m);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</div><div class="line">        read(num[i]); pos[num[i]]=i;</div><div class="line">        a1[i]=getans(n)-getans(num[i]);                 <span class="comment">//以该数为结尾的逆序对 </span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=num[i];j&lt;=n;j+=lowbit(j))  t[j]++;</div><div class="line">        ans+=a1[i];</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">memset</span>(t,<span class="number">0</span>,<span class="keyword">sizeof</span>(t));</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;i--)&#123;</div><div class="line">        a2[i]=getans(num[i]<span class="number">-1</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=num[i];j&lt;=n;j+=lowbit(j)) t[j]++;    <span class="comment">//以该数为开头的逆序对 </span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> a,i=<span class="number">1</span>;i&lt;=m;i++)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</div><div class="line">        read(a); a=pos[a];  </div><div class="line">        ans-=(a1[a]+a2[a]-askmore(<span class="number">1</span>,a<span class="number">-1</span>,num[a])-askless(a+<span class="number">1</span>,n,num[a]));    <span class="comment">//删点转化为加点 </span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=a;j&lt;=n;j+=lowbit(j)) update(root[j],<span class="number">1</span>,n,num[a]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题目精选 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CDQ分治 </tag>
            
            <tag> 树套树 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[胡扯两句--CDQ分治]]></title>
      <url>/2016/10/20/CDQ/</url>
      <content type="html"><![CDATA[<p>之前听大神讲过CDQ分治大概是个什么东西，但是一直还没有真正去搞过。今天稍微看了一下，写点自己的理解。<br>首先CDQ分治有两个条件。<br>条件1：可以分成两个独立互不影响的问题（这里的“独立”是指将前面区间的影响处理掉后，后面与前面都成为了新的相同问题）<br>条件2：允许离线（据说最近流行强制在线。。。如果这样只好去写恶心的数据结构了）。<br>CDQ分治在可以使用的情况下很多高级数据结构题可以用CDQ分治干过去，不仅时空优越而且易于调试（虽然我并不觉得很好调试<br>大体思路是将问题不断分成两个子问题，用前一个子问题中的修改操作去更新后一个子问题，这样之后就得到了两个互不影响的子问题，达到分治的目的。<br>贴一道版题代码：「BZOJ1176」<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></div><div class="line"><span class="keyword">struct</span> data&#123;</div><div class="line">       <span class="keyword">int</span> v,x,y,d,f,pos;</div><div class="line">       <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> data&amp; w)<span class="keyword">const</span>&#123;</div><div class="line">       <span class="keyword">if</span>(x!=w.x) <span class="keyword">return</span> x&lt;w.x;</div><div class="line">       <span class="keyword">if</span>(y!=w.y) <span class="keyword">return</span> y&lt;w.y;</div><div class="line">       <span class="keyword">return</span> pos&lt;w.pos;</div><div class="line">    &#125;</div><div class="line">&#125;a[<span class="number">200005</span>],tmp[<span class="number">200005</span>];</div><div class="line"><span class="keyword">int</span> s,w,t[<span class="number">2000005</span>],cnt,ans[<span class="number">200005</span>];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span>&amp; x)</span></span>&#123;</div><div class="line">    x=<span class="number">0</span>; <span class="keyword">int</span> f=<span class="number">1</span>,a=getchar();</div><div class="line">    <span class="keyword">while</span>(a&lt;<span class="string">'0'</span> || a&gt;<span class="string">'9'</span>) &#123;<span class="keyword">if</span>(a==<span class="string">'-'</span>) f=<span class="number">-1</span>; a=getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(a&gt;=<span class="string">'0'</span> &amp;&amp; a&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+a-<span class="string">'0'</span>,a=getchar(); x*=f;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> y,<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">for</span>(<span class="keyword">int</span> i=y;i&lt;=w;i+=lowbit(i)) t[i]+=x;&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> y)</span></span>&#123;<span class="keyword">int</span> ret=<span class="number">0</span>; <span class="keyword">for</span>(<span class="keyword">int</span> i=y;i;i-=lowbit(i)) ret+=t[i]; <span class="keyword">return</span> ret;&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">CDQ</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(l==r) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>,t1=l<span class="number">-1</span>,t2=mid; <span class="comment">//这里写错调了老半天</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;=r;i++)&#123;</div><div class="line">        <span class="keyword">if</span>(a[i].v&lt;=mid &amp;&amp; !a[i].pos) add(a[i].y,a[i].d);</div><div class="line">        <span class="keyword">if</span>(a[i].v&gt;mid &amp;&amp; a[i].pos) ans[a[i].pos]+=query(a[i].y)*a[i].f;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;=r;i++)</div><div class="line">        <span class="keyword">if</span>(a[i].v&lt;=mid &amp;&amp; !a[i].pos) add(a[i].y,-a[i].d);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;=r;i++)</div><div class="line">        <span class="keyword">if</span>(a[i].v&lt;=mid) tmp[++t1]=a[i];</div><div class="line">        <span class="keyword">else</span> tmp[++t2]=a[i];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;=r;i++) a[i]=tmp[i];</div><div class="line">    CDQ(l,mid); CDQ(mid+<span class="number">1</span>,r);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    read(s); read(w); <span class="keyword">int</span> t,x,y,d,x1,x2,y1,y2;</div><div class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</div><div class="line">        read(t);</div><div class="line">        <span class="keyword">if</span>(t==<span class="number">1</span>)&#123;</div><div class="line">            read(x); read(y); read(d);</div><div class="line">            a[++cnt]=(data)&#123;cnt,x,y,d,<span class="number">1</span>,<span class="number">0</span>&#125;;</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(t==<span class="number">2</span>)&#123;</div><div class="line">            read(x1); read(y1); read(x2); read(y2); ++ans[<span class="number">0</span>];</div><div class="line">            a[++cnt]=(data)&#123;cnt,x1<span class="number">-1</span>,y1<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>,ans[<span class="number">0</span>]&#125;;</div><div class="line">            a[++cnt]=(data)&#123;cnt,x2,y2,<span class="number">0</span>,<span class="number">1</span>,ans[<span class="number">0</span>]&#125;;</div><div class="line">            a[++cnt]=(data)&#123;cnt,x1<span class="number">-1</span>,y2,<span class="number">0</span>,<span class="number">-1</span>,ans[<span class="number">0</span>]&#125;;</div><div class="line">            a[++cnt]=(data)&#123;cnt,x2,y1<span class="number">-1</span>,<span class="number">0</span>,<span class="number">-1</span>,ans[<span class="number">0</span>]&#125;;</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    sort(a+<span class="number">1</span>,a+<span class="number">1</span>+cnt);</div><div class="line">    CDQ(<span class="number">1</span>,cnt);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=ans[<span class="number">0</span>];i++)</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans[i]);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 学习总结 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CDQ分治 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「BZOJ3594」「SCOI2014」方伯伯的玉米田]]></title>
      <url>/2016/10/18/bzoj3594/</url>
      <content type="html"><![CDATA[<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><blockquote>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=3594" target="_blank" rel="external">题目传送门</a></p>
</blockquote>
<h3 id="解题报告"><a href="#解题报告" class="headerlink" title="解题报告"></a>解题报告</h3><blockquote>
<p>dp新优化姿势。。。<br>首先，当我们拔高时，一定右端点是n最优。因为如果右端点是r，相当于降低了r之后玉米的高度。显然n更优。<br>那么可以dp。dp[i][j]表示前i个拔高j次的LIS。dp[i][j]=max(dp[i’][j’])+1，其中h[i’]+j’&gt;=h[i],j’&lt;=k<br>可以用二维树状数组来维护。</p>
</blockquote>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 10005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x&amp;-x)</span></div><div class="line"><span class="keyword">int</span> n,k,h[N],r[N][<span class="number">505</span>],H,ans;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> tmp=<span class="number">0</span>,f=<span class="number">1</span>,a=getchar();</div><div class="line">    <span class="keyword">while</span>(a&lt;<span class="string">'0'</span> || a&gt;<span class="string">'9'</span>) &#123;<span class="keyword">if</span>(a==<span class="string">'-'</span>) f=<span class="number">-1</span>; a=getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(a&gt;=<span class="string">'0'</span> &amp;&amp; a&lt;=<span class="string">'9'</span>) tmp=tmp*<span class="number">10</span>+a-<span class="string">'0'</span>,a=getchar();</div><div class="line">    <span class="keyword">return</span> tmp*f;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> a)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=x;i&lt;=H+k;i+=lowbit(i))</div><div class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> j=y;j&lt;=k+<span class="number">1</span>;j+=lowbit(j))</div><div class="line">         r[i][j]=max(r[i][j],a);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> ret=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=x;i;i-=lowbit(i))</div><div class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> j=y;j;j-=lowbit(j))</div><div class="line">        ret=max(ret,r[i][j]);</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    n=read(); k=read();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) h[i]=read(),H=max(H,h[i]);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> j=k;j&gt;=<span class="number">0</span>;j--)&#123;</div><div class="line">           <span class="keyword">int</span> tmp=query(h[i]+j,j+<span class="number">1</span>)+<span class="number">1</span>;</div><div class="line">           ans=max(ans,tmp);</div><div class="line">           update(h[i]+j,j+<span class="number">1</span>,tmp);</div><div class="line">      &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题目精选 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 树状数组 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「BZOJ4443」「SCOI2015」小凸玩矩阵]]></title>
      <url>/2016/10/17/bzoj4443/</url>
      <content type="html"><![CDATA[<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><blockquote>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=4443" target="_blank" rel="external">题目传送门</a></p>
</blockquote>
<h3 id="解题报告"><a href="#解题报告" class="headerlink" title="解题报告"></a>解题报告</h3><blockquote>
<p>太久没搞网络流，又被坑了一发死循环。。（这次是对cur[]初始化没对。以后直接for S到T不就好了嘛！）<br>先看数据量。诶，才250，肯定n三方。搜索不行，dp不行，贪心不行，二分图网络流？恩，有可能，先放一边去。<br>然而正解就是二分+二分图匹配。<br>二分答案，二分图匹配看是否存在大等n-k+1个匹配。<br>基本上每当题目中有限制不能同行不能同列的时候都是二分图左边为行，右边为列来匹配的。（我怎么就是不长记性呢，又被坑了</p>
</blockquote>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1e9+5</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 70005</span></div><div class="line"><span class="keyword">int</span> n,m,k,d[N],cur[N],S,T,cnt,z[<span class="number">255</span>][<span class="number">255</span>],head[N];</div><div class="line"><span class="keyword">bool</span> vis[N];</div><div class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;</div><div class="line"><span class="keyword">struct</span> edges&#123;</div><div class="line">    <span class="keyword">int</span> fr,to,cap,flow,next;</div><div class="line">&#125;e[<span class="number">4</span>*N];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">inser</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> c)</span></span>&#123;</div><div class="line">    e[cnt]=(edges)&#123;u,v,c,<span class="number">0</span>,head[u]&#125;;head[u]=cnt++;</div><div class="line">    e[cnt]=(edges)&#123;v,u,<span class="number">0</span>,<span class="number">0</span>,head[v]&#125;;head[v]=cnt++;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis)); </div><div class="line">    vis[S]=<span class="number">1</span>; q.push(S); d[S]=<span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(!q.empty())&#123;</div><div class="line">        <span class="keyword">int</span> x=q.front(); q.pop();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i&gt;=<span class="number">0</span>;i=e[i].next)</div><div class="line">            <span class="keyword">if</span>(!vis[e[i].to] &amp;&amp; e[i].cap&gt;e[i].flow) vis[e[i].to]=<span class="number">1</span>,d[e[i].to]=d[x]+<span class="number">1</span>,q.push(e[i].to);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> vis[T];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> a)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(x==T || !a) <span class="keyword">return</span> a;</div><div class="line">    <span class="keyword">int</span> f,flow=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span>&amp; i=cur[x];i&gt;=<span class="number">0</span>;i=e[i].next)</div><div class="line">        <span class="keyword">if</span>(d[e[i].to]==d[x]+<span class="number">1</span> &amp;&amp; (f=dfs(e[i].to,min(a,e[i].cap-e[i].flow)))&gt;<span class="number">0</span>)&#123;</div><div class="line">          e[i].flow+=f; flow+=f; e[i^<span class="number">1</span>].flow-=f; a-=f;</div><div class="line">        <span class="keyword">if</span>(!a) <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    <span class="keyword">return</span> flow;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxflow</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> flow=<span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(bfs())&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=S;i&lt;=T;i++) cur[i]=head[i];</div><div class="line">        flow+=dfs(S,INF);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> flow;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span>(head)); cnt=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) inser(S,i,<span class="number">1</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) inser(i+n,T,<span class="number">1</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</div><div class="line">         <span class="keyword">if</span>(z[i][j]&lt;=x) inser(i,j+n,<span class="number">1</span>);</div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;m,&amp;k); </div><div class="line">    S=<span class="number">0</span>; T=n+m+<span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</div><div class="line">          <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;z[i][j]);</div><div class="line">    <span class="keyword">int</span> l=<span class="number">1</span>,r=INF;</div><div class="line">    <span class="keyword">while</span>(l&lt;r)&#123;</div><div class="line">        <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>; build(mid);</div><div class="line">        <span class="keyword">if</span>(maxflow()&lt;n-k+<span class="number">1</span>) l=mid+<span class="number">1</span>;</div><div class="line">        <span class="keyword">else</span> r=mid;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,l);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题目精选 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 二分 </tag>
            
            <tag> 网络流_最大流 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「BZOJ1070」「SCOI2007」修车]]></title>
      <url>/2016/10/14/bzoj1070/</url>
      <content type="html"><![CDATA[<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><blockquote>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=1070" target="_blank" rel="external">题目传送门</a></p>
</blockquote>
<h3 id="解题报告"><a href="#解题报告" class="headerlink" title="解题报告"></a>解题报告</h3><blockquote>
<p>网络流——最小费用流。<br>好久没写了板子都快忘了。<br>将m个工人拆成n个点，点（i，j）表示让i工人在倒数第j辆车时去修连向这个点的车，那么显而易见代价为j*ti（后面的人要等）。</p>
</blockquote>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 70</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M 15</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1e9</span></div><div class="line"><span class="keyword">int</span> n,m,cnt=<span class="number">2</span>,ti[M][N],head[<span class="number">5005</span>],p[<span class="number">5005</span>],a[<span class="number">5005</span>],ans,d[<span class="number">5005</span>],S,T;</div><div class="line"><span class="keyword">bool</span> vis[<span class="number">5005</span>];</div><div class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;</div><div class="line"><span class="keyword">struct</span> edges&#123;</div><div class="line">    <span class="keyword">int</span> fr,to,cap,flow,cost,next;</div><div class="line">&#125;e[<span class="number">100005</span>];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">inser</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> c,<span class="keyword">int</span> co)</span></span>&#123;</div><div class="line">    e[cnt]=(edges)&#123;u,v,c,<span class="number">0</span>,co,head[u]&#125;;head[u]=cnt++;</div><div class="line">    e[cnt]=(edges)&#123;v,u,<span class="number">0</span>,<span class="number">0</span>,-co,head[v]&#125;;head[v]=cnt++;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">spfa</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">memset</span>(d,<span class="number">0x3f</span>,<span class="keyword">sizeof</span>(d));</div><div class="line">    q.push(S); d[S]=<span class="number">0</span>; a[S]=INF;</div><div class="line">    <span class="keyword">while</span>(!q.empty())&#123;</div><div class="line">        <span class="keyword">int</span> x=q.front(); q.pop(); vis[x]=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=e[i].next)&#123;</div><div class="line">            <span class="keyword">if</span>(d[e[i].to]&gt;d[x]+e[i].cost &amp;&amp; e[i].cap&gt;e[i].flow)&#123;</div><div class="line">                d[e[i].to]=d[x]+e[i].cost; p[e[i].to]=i; a[e[i].to]=min(a[x],e[i].cap-e[i].flow);</div><div class="line">                <span class="keyword">if</span>(!vis[e[i].to]) vis[e[i].to]=<span class="number">1</span>,q.push(e[i].to);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> d[T]&lt;INF;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">minc</span><span class="params">()</span></span>&#123;</div><div class="line">    ans+=a[T]*d[T];</div><div class="line">    <span class="keyword">int</span> u=T;</div><div class="line">    <span class="keyword">while</span>(u!=S)&#123;</div><div class="line">        e[p[u]].flow+=a[T];</div><div class="line">        e[p[u]^<span class="number">1</span>].flow-=a[T];</div><div class="line">        u=e[p[u]].fr;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;m,&amp;n);</div><div class="line">    S=<span class="number">0</span>,T=n*m*<span class="number">2</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</div><div class="line">          <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;ti[j][i]);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</div><div class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</div><div class="line">          inser((i<span class="number">-1</span>)*n+j,T,<span class="number">1</span>,<span class="number">0</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) inser(S,n*m+i,<span class="number">1</span>,<span class="number">0</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</div><div class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=n;k++)</div><div class="line">          inser(n*m+i,(j<span class="number">-1</span>)*n+k,<span class="number">1</span>,k*ti[j][i]);</div><div class="line">    <span class="keyword">while</span>(spfa()) minc();</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%.2lf\n"</span>,(<span class="keyword">double</span>)ans/n);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题目精选 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 网络流_费用流 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[博弈论一周目学习小结]]></title>
      <url>/2016/10/13/game%20theory/</url>
      <content type="html"><![CDATA[<p>博弈论研究第一周目。<br>博弈论有很多套路，一周目接触到了如下几类：<br>Nim——最基础的博弈论问题，也是博弈论的经典模型，很多问题可以转化为Nim进行求解，解决：SG函数。<br>Anti-Nim——Nim的拓展之一，即反Nim游戏（走最后一步输）。判断必胜条件为：当且仅当全部子SG小等1且局面SG为0，或局面SG&gt;0且至少一个子SG&gt;1。<br>Nimk——Nim的拓展之一，规则仅改变为可以取1-k堆，解决思路很巧妙(想出来的人脑子有天坑):将子SG写成二进制，统计每一位上各有多少1，如果每一位个数都满足mod（k+1）==0则必败，否则必胜。证明可见第一篇随笔中的链接。<br>阶梯博弈。添加了阶梯，其余和Nim相同。解决：对奇数号阶梯上的堆进行Nim游戏。<br>找规律。SG函数只能在子游戏互不影响（即独立）的情况下可以使用。此外可以考虑手动找规律（写个暴力跑一跑看看结果找找规律之类的）。<br>分类讨论。（没啥说头，恶心）<br>树上删边游戏。对于此有若干结论：对于一棵树，它等价于一棵长度为所有该树子属长度的异或和。对于环，如果为偶则可变成一个点，若为奇则可以变成一条边。如此下来将一个图可以变成一根竹子，显然可以进行Nim游戏。<br>博弈论的题总是和异或有不解之缘，所以可以和线性基结合。又由于局面之间的转化关系图，可以变成树上的问题，dp，搜索等等。<br>总之博弈论很神奇，题目很有意思，二周目见！（如果还会有二周目</p>
]]></content>
      
        <categories>
            
            <category> 学习总结 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 博弈论 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「BZOJ2281」「SDOI2011」黑白棋]]></title>
      <url>/2016/10/12/bzoj2281/</url>
      <content type="html"><![CDATA[<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><blockquote>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=2281" target="_blank" rel="external">题目传送门</a> </p>
</blockquote>
<h3 id="解题报告"><a href="#解题报告" class="headerlink" title="解题报告"></a>解题报告</h3><blockquote>
<p>博弈论—Nimk问题。 dp再搞搞。<br>很容易看出，该游戏的终态是每两个棋子都紧靠着。当一颗棋子移动，另一方与该棋子对应的那一刻可以立即追上，使得仍旧紧靠，最终棋子动弹不得，游戏结束。<br>还能看出，对于白色棋子（先手），往左走没有意义。因为黑子（后手）可以紧随其上使得两者距离不变。同理黑子只往左走。（黄学长貌似提出了反例？）<br>所以，问题可以抽象为Nim，与传统Nim只能选1堆不同，你可以选1-d堆。<br>这个拓展问题叫做Nimk问题。对于这种问题，我们可以证明：当将n堆棋子化为二进制，每一位上如果1的个数mod（k+1）==0 则为必败态。<br>详细证明，<a href="http://blog.csdn.net/weixinding/article/details/7321139" target="_blank" rel="external">大传送术！</a><br>最后只需要计算方案数。使用dp，dp[i][j]表示当前在二进制第i位上，总计用了j石头的方案。转移方程为：<br>$$ dp[i + 1][j + a * (k + 1) * bin[i]] += dp[i][j] * { n \choose a * (k + 1) } $$<br>注意组合数处理，取%等细节即可。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 题目精选 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 组合数学 </tag>
            
            <tag> 博弈论 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
