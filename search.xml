<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[「日常小测」颜色 && 「Hackerrank」Unique_colors]]></title>
      <url>/2016/12/24/color/</url>
      <content type="html"><![CDATA[<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><blockquote>
<p><a href="https://www.hackerrank.com/challenges/unique-colors" target="_blank" rel="external">题目传送门</a></p>
</blockquote>
<h3 id="解题报告"><a href="#解题报告" class="headerlink" title="解题报告"></a>解题报告</h3><blockquote>
<p>感谢hzq大神找来的这道题。<br>考虑点分治（毕竟是路经统计），对于每一个颜色，它的贡献是独立的。我们可以在一次点分治中合在一块处理（为什么时间复杂度是对的呢，因为我们每次改动只会根据当前点的颜色进行变动，而不是所有颜色对着它都来一遍）。每次先对重心单独计算答案贡献，此时也将当前区域的各个答案贡献计算出来，并以此为基础（之后称之为基准贡献，即代码中的tot）。对于每一棵子树，我们先dfs取消掉这一片区域内贡献（为什么要取消，因为这里的贡献要留到它们那一层去解决，不然会重复计算），然后单独对这里再深搜一遍 ，具体内容如下：<br>出现一种颜色，如果深搜过程中这是第一次出现，我们要把目前的基准贡献扣除掉该颜色的贡献（由于进入这种深搜之前，已经取消掉这一棵子树的贡献，所以实际扣除掉了外面子树的该颜色贡献）再加上外面子树大小，从而做到维护基准贡献，然后直接加给这个点就形成当前贡献了。当然如果不是第一次出现就不用管了，因为深搜来的路上已经处理过了，然后直接加上。<br>这是点分治做法，时间复杂度（nlogn）。还有线性做法，即用dfs序，然后对于一个区间打上差分，最后扫一遍。</p>
</blockquote>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1e9</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>; <span class="keyword">char</span> a=getchar();</div><div class="line">    <span class="keyword">while</span>(a&lt;<span class="string">'0'</span> || a&gt;<span class="string">'9'</span>) &#123;<span class="keyword">if</span>(a==<span class="string">'-'</span>) f=<span class="number">-1</span>; a=getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(a&gt;=<span class="string">'0'</span> &amp;&amp; a&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+a-<span class="string">'0'</span>,a=getchar();</div><div class="line">    <span class="keyword">return</span> x*f;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> n,cnt,sum,size[N],head[N],a[N],s[N],weight,weights,tot;</div><div class="line">LL ans[N];</div><div class="line"><span class="keyword">bool</span> vis[N],app[N];</div><div class="line"><span class="keyword">struct</span> edges&#123;</div><div class="line">    <span class="keyword">int</span> to,next;</div><div class="line">&#125;e[<span class="number">2</span>*N];</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> u=read(),v=read();</div><div class="line">    e[cnt]=(edges)&#123;v,head[u]&#125;;head[u]=cnt++;</div><div class="line">    e[cnt]=(edges)&#123;u,head[v]&#125;;head[v]=cnt++;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">getroot</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> fa)</span></span>&#123;</div><div class="line">    size[x]=<span class="number">1</span>; <span class="keyword">int</span> tmp=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i&gt;=<span class="number">0</span>;i=e[i].next)&#123;</div><div class="line">        <span class="keyword">if</span>(vis[e[i].to] || fa==e[i].to) <span class="keyword">continue</span>;</div><div class="line">        getroot(e[i].to,x); size[x]+=size[e[i].to];</div><div class="line">        tmp=max(tmp,size[e[i].to]);</div><div class="line">    &#125;</div><div class="line">    tmp=max(tmp,sum-size[x]);</div><div class="line">    <span class="keyword">if</span>(tmp&lt;weights) weight=x,weights=tmp;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> fa,<span class="keyword">int</span> f)</span></span>&#123;</div><div class="line">    <span class="keyword">bool</span> ok=<span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span>(!app[a[x]] &amp;&amp; a[x]!=a[weight]) app[a[x]]=ok=<span class="number">1</span>,s[a[x]]+=size[x]*f,tot+=size[x]*f;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i&gt;=<span class="number">0</span>;i=e[i].next) <span class="keyword">if</span>(!vis[e[i].to] &amp;&amp; fa!=e[i].to) dfs(e[i].to,x,f);</div><div class="line">    <span class="keyword">if</span>(ok) app[a[x]]=<span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> fa,<span class="keyword">int</span> p)</span></span>&#123;</div><div class="line">    <span class="keyword">bool</span> ok=<span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span>(!app[a[x]] &amp;&amp; a[x]!=a[weight]) app[a[x]]=ok=<span class="number">1</span>,tot+=p-s[a[x]];</div><div class="line">    ans[x]+=tot;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i&gt;=<span class="number">0</span>;i=e[i].next) <span class="keyword">if</span>(!vis[e[i].to] &amp;&amp; fa!=e[i].to) DFS(e[i].to,x,p);</div><div class="line">    <span class="keyword">if</span>(ok) app[a[x]]=<span class="number">0</span>,tot-=p-s[a[x]];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    weights=INF; getroot(x,<span class="number">0</span>); getroot(weight,<span class="number">0</span>);</div><div class="line">    x=weight; vis[x]=<span class="number">1</span>;</div><div class="line">    dfs(weight,<span class="number">0</span>,<span class="number">1</span>); tot+=size[x]; ans[x]+=tot;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i&gt;=<span class="number">0</span>;i=e[i].next)&#123;</div><div class="line">        <span class="keyword">if</span>(vis[e[i].to]) <span class="keyword">continue</span>;</div><div class="line">        dfs(e[i].to,x,<span class="number">-1</span>); tot-=size[e[i].to];</div><div class="line">        DFS(e[i].to,x,size[x]-size[e[i].to]);</div><div class="line">        dfs(e[i].to,x,<span class="number">1</span>); tot+=size[e[i].to];</div><div class="line">    &#125;</div><div class="line">    dfs(weight,<span class="number">0</span>,<span class="number">-1</span>); tot=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i&gt;=<span class="number">0</span>;i=e[i].next)</div><div class="line">    <span class="keyword">if</span>(!vis[e[i].to]) sum=size[e[i].to],work(e[i].to);</div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    n=read(); <span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span>(head));</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) a[i]=read();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++) insert();</div><div class="line">    sum=n; work(<span class="number">1</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans[i]);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题目精选 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 点分治 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「BZOJ1095」「ZJOI2007」Hide 捉迷藏]]></title>
      <url>/2016/12/23/bzoj1095/</url>
      <content type="html"><![CDATA[<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><blockquote>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=1095" target="_blank" rel="external">题目传送门</a></p>
</blockquote>
<h3 id="解题报告"><a href="#解题报告" class="headerlink" title="解题报告"></a>解题报告</h3><blockquote>
<p>动态点分治。一开始想的是对于每个节点维护主大和次大，后来发现这实在是太NAIVE了。实际上，正解是这样的：<br>对于每个点，维护两个堆（接下来说的都是点分树上的节点）：第一个堆，该点子树到该点父亲的距离，第二个堆，该点直接儿子的第一个堆的堆顶元素。<br>然后我们再开一个全局堆，即答案堆，维护所有第二个堆最大和次大之和。每次询问只要把堆顶元素拿出来就可以了。<br>为什么空间开的下呢？这个道理和震波那道题是一样的，考虑点分治的时间复杂度，每个点最大堆空间开到的就是该点子树大小，总和是nlogn的，完全开的下。<br>怎么修改呢，暴力爬树高啊，点分树不就是这一点树高稳定log最好吗！<br>维护3个堆的过程特别繁琐，写的时候写了一个上午。。。就为了那几个if。。<br>最后被自己模拟的堆坑了一发。。改到现在才过</p>
</blockquote>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1e9</span></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>; <span class="keyword">char</span> a=getchar();</div><div class="line">    <span class="keyword">while</span>(a&lt;<span class="string">'0'</span> || a&gt;<span class="string">'9'</span>) &#123;<span class="keyword">if</span>(a==<span class="string">'0'</span>) f=<span class="number">-1</span>; a=getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(a&gt;=<span class="string">'0'</span> &amp;&amp; a&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+a-<span class="string">'0'</span>,a=getchar();</div><div class="line">    <span class="keyword">return</span> x*f;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> n,q,head[N],s[N],cnt,f[N],rt,sz,dep[N],fa[N][<span class="number">20</span>],dis[N][<span class="number">20</span>],now;</div><div class="line"><span class="keyword">char</span> ch[<span class="number">2</span>]; <span class="keyword">bool</span> vis[N],on[N];</div><div class="line"><span class="keyword">struct</span> heap&#123;</div><div class="line">    priority_queue&lt;<span class="keyword">int</span>&gt;A,B;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;A.push(x);&#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">erase</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;B.push(x);&#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;<span class="keyword">while</span>(B.size()&amp;&amp;A.top()==B.top()) A.pop(),B.pop(); A.pop();&#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;<span class="keyword">while</span>(B.size()&amp;&amp;A.top()==B.top()) A.pop(),B.pop(); <span class="keyword">if</span>(A.size()) <span class="keyword">return</span> A.top(); <span class="keyword">else</span> <span class="keyword">return</span> -INF;&#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> A.size()-B.size();&#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">s_top</span><span class="params">()</span></span>&#123; <span class="keyword">if</span>(size()&lt;<span class="number">2</span>) <span class="keyword">return</span> -INF; </div><div class="line">        <span class="keyword">while</span>(B.size()&amp;&amp;A.top()==B.top()) A.pop(),B.pop();</div><div class="line">        <span class="keyword">int</span> t=A.top(),ret; A.pop(); </div><div class="line">        <span class="keyword">while</span>(B.size()&amp;&amp;A.top()==B.top()) A.pop(),B.pop();</div><div class="line">        ret=A.top(); A.push(t); </div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line">&#125;C,A[N],B[N];</div><div class="line"><span class="keyword">struct</span> edges&#123;</div><div class="line">    <span class="keyword">int</span> to,next;</div><div class="line">&#125;e[<span class="number">2</span>*N];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> u=read(),v=read();</div><div class="line">    e[cnt]=(edges)&#123;v,head[u]&#125;;head[u]=cnt++;</div><div class="line">    e[cnt]=(edges)&#123;u,head[v]&#125;;head[v]=cnt++;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">getroot</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> p)</span></span>&#123;</div><div class="line">    s[x]=<span class="number">1</span>; f[x]=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i&gt;=<span class="number">0</span>;i=e[i].next)&#123;</div><div class="line">        <span class="keyword">if</span>(vis[e[i].to] || p==e[i].to) <span class="keyword">continue</span>;</div><div class="line">        getroot(e[i].to,x); s[x]+=s[e[i].to];</div><div class="line">        f[x]=max(f[x],s[e[i].to]);</div><div class="line">    &#125;</div><div class="line">    f[x]=max(f[x],sz-s[x]);</div><div class="line">    <span class="keyword">if</span>(f[rt]&gt;f[x]) rt=x;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">getship</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> anc,<span class="keyword">int</span> p,<span class="keyword">int</span> d)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v,i=head[x];i&gt;=<span class="number">0</span>;i=e[i].next)&#123;</div><div class="line">        v=e[i].to;</div><div class="line">        <span class="keyword">if</span>(vis[v] || p==v) <span class="keyword">continue</span>;</div><div class="line">        fa[v][++dep[v]]=anc; dis[v][dep[v]]=d; getship(v,anc,x,d+<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">buildtree</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    vis[x]=<span class="number">1</span>; getship(x,x,<span class="number">0</span>,<span class="number">1</span>); <span class="keyword">int</span> all=sz;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i&gt;=<span class="number">0</span>;i=e[i].next)&#123;</div><div class="line">        <span class="keyword">if</span>(vis[e[i].to]) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">if</span>(s[e[i].to]&gt;s[x]) s[e[i].to]=all-s[x]; sz=s[e[i].to];</div><div class="line">        rt=<span class="number">0</span>; getroot(e[i].to,x); buildtree(rt);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">turn_off</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">     B[x].push(<span class="number">0</span>);</div><div class="line">     <span class="keyword">if</span>(B[x].size()==<span class="number">2</span>) C.push(B[x].top());</div><div class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> t,pre,i=dep[x];i&gt;<span class="number">1</span>;i--)&#123;</div><div class="line">         <span class="keyword">if</span>(!A[fa[x][i]].size())&#123;</div><div class="line">             A[fa[x][i]].push(dis[x][i<span class="number">-1</span>]);</div><div class="line">             pre=B[fa[x][i<span class="number">-1</span>]].top()+B[fa[x][i<span class="number">-1</span>]].s_top();</div><div class="line">            B[fa[x][i<span class="number">-1</span>]].push(dis[x][i<span class="number">-1</span>]);</div><div class="line">            <span class="keyword">if</span>(pre&gt;<span class="number">0</span> &amp;&amp; pre==B[fa[x][i<span class="number">-1</span>]].top()+B[fa[x][i<span class="number">-1</span>]].s_top()) <span class="keyword">continue</span>;</div><div class="line">             <span class="keyword">if</span>(pre&gt;<span class="number">0</span> &amp;&amp; pre!=B[fa[x][i<span class="number">-1</span>]].top()+B[fa[x][i<span class="number">-1</span>]].s_top())</div><div class="line">             C.erase(pre),C.push(B[fa[x][i<span class="number">-1</span>]].top()+B[fa[x][i<span class="number">-1</span>]].s_top());</div><div class="line">             <span class="keyword">else</span> <span class="keyword">if</span>(B[fa[x][i<span class="number">-1</span>]].top()+B[fa[x][i<span class="number">-1</span>]].s_top()&gt;<span class="number">0</span>) C.push(B[fa[x][i<span class="number">-1</span>]].top()+B[fa[x][i<span class="number">-1</span>]].s_top());</div><div class="line">         &#125;<span class="keyword">else</span>&#123;</div><div class="line">             t=A[fa[x][i]].top(); A[fa[x][i]].push(dis[x][i<span class="number">-1</span>]);</div><div class="line">            <span class="keyword">if</span>(t&lt;dis[x][i<span class="number">-1</span>])&#123; </div><div class="line">                pre=B[fa[x][i<span class="number">-1</span>]].top()+B[fa[x][i<span class="number">-1</span>]].s_top(); </div><div class="line">                B[fa[x][i<span class="number">-1</span>]].erase(t); B[fa[x][i<span class="number">-1</span>]].push(dis[x][i<span class="number">-1</span>]); </div><div class="line">                <span class="keyword">if</span>(pre&gt;<span class="number">0</span> &amp;&amp; pre!=B[fa[x][i<span class="number">-1</span>]].top()+B[fa[x][i<span class="number">-1</span>]].s_top())</div><div class="line">                C.erase(pre),C.push(B[fa[x][i<span class="number">-1</span>]].top()+B[fa[x][i<span class="number">-1</span>]].s_top());</div><div class="line">            &#125;</div><div class="line">         &#125;</div><div class="line">     &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">turn_on</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    B[x].erase(<span class="number">0</span>);</div><div class="line">    <span class="keyword">if</span>(B[x].size()==<span class="number">1</span>) C.erase(B[x].top());</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> t,pre,i=dep[x];i&gt;<span class="number">1</span>;i--)&#123;</div><div class="line">        A[fa[x][i]].erase(dis[x][i<span class="number">-1</span>]);</div><div class="line">        <span class="keyword">if</span>(A[fa[x][i]].top()&lt;dis[x][i<span class="number">-1</span>]) &#123;</div><div class="line">            pre=B[fa[x][i<span class="number">-1</span>]].top()+B[fa[x][i<span class="number">-1</span>]].s_top();</div><div class="line">            B[fa[x][i<span class="number">-1</span>]].erase(dis[x][i<span class="number">-1</span>]); </div><div class="line">            <span class="keyword">if</span>(A[fa[x][i]].size()) B[fa[x][i<span class="number">-1</span>]].push(A[fa[x][i]].top());</div><div class="line">            <span class="keyword">if</span>(pre&gt;<span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">if</span>(pre==B[fa[x][i<span class="number">-1</span>]].top()+B[fa[x][i<span class="number">-1</span>]].s_top()) <span class="keyword">continue</span>;</div><div class="line">                C.erase(pre);</div><div class="line">                <span class="keyword">if</span>(B[fa[x][i<span class="number">-1</span>]].size()&gt;<span class="number">1</span>)</div><div class="line">                C.push(B[fa[x][i<span class="number">-1</span>]].top()+B[fa[x][i<span class="number">-1</span>]].s_top());</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(!on[x]) turn_on(x);</div><div class="line">    <span class="keyword">else</span> turn_off(x);</div><div class="line">    on[x]^=<span class="number">1</span>; </div><div class="line">    <span class="keyword">if</span>(on[x]) now++;</div><div class="line">    <span class="keyword">else</span> now--;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    n=read(); <span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span>(head));</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++) insert();</div><div class="line">    f[<span class="number">0</span>]=INF; sz=n; getroot(<span class="number">1</span>,<span class="number">0</span>); buildtree(rt);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) fa[i][++dep[i]]=i,turn_off(i);</div><div class="line">    q=read();</div><div class="line">    <span class="keyword">while</span>(q--)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,ch);</div><div class="line">        <span class="keyword">if</span>(ch[<span class="number">0</span>]==<span class="string">'G'</span>) &#123;</div><div class="line">            <span class="keyword">if</span>(now==n) <span class="built_in">puts</span>(<span class="string">"-1"</span>);</div><div class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,max(C.top(),<span class="number">0</span>));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> change(read()); </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题目精选 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 动态树分治 </tag>
            
            <tag> 堆 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「日常小测」生物进阶]]></title>
      <url>/2016/12/23/bio/</url>
      <content type="html"><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote>
<p>给定样本串模式串（只出现4个字母A,C,G,T），求模式串出现多少次。这里匹配定义如下：不一定要严格匹配，在附近k个单位有这个字符都算匹配，可以多个模式串的字符匹配上同一个样本串里的字符。</p>
</blockquote>
<h3 id="解题报告"><a href="#解题报告" class="headerlink" title="解题报告"></a>解题报告</h3><blockquote>
<p>策爷讲过的大原题啊跪。。。。基本思路是分开考虑每个字母。对于以一个位置i开头，我们考虑这里是否能匹配上，需要处理出这里能匹配的字母个数，如果4个字母分别的匹配个数加起来刚好等于模式串长度，则可以匹配。怎么快速求呢？答案是FFT！<br>分开考虑每个字母。对于正在考虑的我们标为1，其他为0.模式串也这样表示，然后把它放到位置上去&amp;。还不够，如果我们把模式串倒着，并且用前导零去补位，会发现对于每个位置，可以用一个叉积的式子来表示它的匹配数。。果断FFT啊<br>时间复杂度O(Sigma*(n+m)log) 其中Sigma是字符集大小，对于这道题是4。</p>
</blockquote>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N ((1&lt;&lt;20)+5)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 0.5</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI=<span class="built_in">acos</span>(<span class="number">-1</span>);</div><div class="line"><span class="keyword">int</span> len,n,m,k,match[N],rev[N],ans;</div><div class="line"><span class="keyword">char</span> st1[N],st2[N],ch[<span class="number">4</span>]=&#123;<span class="string">'A'</span>,<span class="string">'C'</span>,<span class="string">'G'</span>,<span class="string">'T'</span>&#125;;</div><div class="line"><span class="keyword">struct</span> vec&#123;</div><div class="line">    <span class="keyword">double</span> r,i;</div><div class="line">    vec <span class="keyword">operator</span> + (<span class="keyword">const</span> vec&amp; w)&#123;<span class="keyword">return</span> (vec)&#123;r+w.r,i+w.i&#125;;&#125;</div><div class="line">    vec <span class="keyword">operator</span> - (<span class="keyword">const</span> vec&amp; w)&#123;<span class="keyword">return</span> (vec)&#123;r-w.r,i-w.i&#125;;&#125;</div><div class="line">    vec <span class="keyword">operator</span> * (<span class="keyword">const</span> vec&amp; w)&#123;<span class="keyword">return</span> (vec)&#123;r*w.r-i*w.i,w.i*r+i*w.r&#125;;&#125;</div><div class="line">&#125;A[N],B[N];</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">FFT</span><span class="params">(vec* x,<span class="keyword">int</span> f)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len;i++) <span class="keyword">if</span>(i&lt;rev[i]) swap(x[i],x[rev[i]]);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> lnow=<span class="number">2</span>;lnow&lt;=len;lnow&lt;&lt;=<span class="number">1</span>)&#123;</div><div class="line">        vec w0=(vec)&#123;<span class="built_in">cos</span>(<span class="number">2</span>*PI/lnow*f),<span class="built_in">sin</span>(<span class="number">2</span>*PI/lnow*f)&#125;,t1,t2,w;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i+=lnow)&#123;</div><div class="line">            w=(vec)&#123;<span class="number">1</span>,<span class="number">0</span>&#125;;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;lnow/<span class="number">2</span>;j++,w=w*w0)&#123;</div><div class="line">                t1=x[i+j]; t2=w*x[i+j+lnow/<span class="number">2</span>];</div><div class="line">                x[i+j]=t1+t2; x[i+j+lnow/<span class="number">2</span>]=t1-t2;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125; </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>; <span class="keyword">char</span> a=getchar();</div><div class="line">    <span class="keyword">while</span>(a&lt;<span class="string">'0'</span> || a&gt;<span class="string">'9'</span>) &#123;<span class="keyword">if</span>(a==<span class="string">'-'</span>) f=<span class="number">-1</span>; a=getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(a&gt;=<span class="string">'0'</span> &amp;&amp; a&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+a-<span class="string">'0'</span>,a=getchar();</div><div class="line">    <span class="keyword">return</span> x*f;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    n=read(); m=read(); k=read();</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%s%s"</span>,st1,st2); <span class="keyword">int</span> t=<span class="number">0</span>; </div><div class="line">    <span class="keyword">for</span>(len=<span class="number">1</span>;len&lt;=<span class="number">2</span>*n;len&lt;&lt;=<span class="number">1</span>,t++); t--;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len;i++) rev[i]=(rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|(i&amp;<span class="number">1</span>?<span class="number">1</span>&lt;&lt;t:<span class="number">0</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> last,i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=len;j++) A[j]=B[j]=(vec)&#123;<span class="number">0</span>,<span class="number">0</span>&#125;; </div><div class="line">        last=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++) </div><div class="line">            <span class="keyword">if</span>(st1[j]==ch[i])&#123;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> t=max(j-k,last);t&lt;=j+k &amp;&amp; t&lt;n;t++) A[t].r=<span class="number">1.0</span>;</div><div class="line">                last=j+k;</div><div class="line">            &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)</div><div class="line">        <span class="keyword">if</span>(st2[j]==ch[i]) B[len/<span class="number">2</span>-j+<span class="number">1</span>].r=<span class="number">1.0</span>;</div><div class="line">        FFT(A,<span class="number">1</span>); FFT(B,<span class="number">1</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=len;j++) A[j]=A[j]*B[j];</div><div class="line">        FFT(A,<span class="number">-1</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)</div><div class="line">        match[j]+=(<span class="keyword">int</span>)(A[j+len/<span class="number">2</span>].r/len+eps);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</div><div class="line">        <span class="keyword">if</span>(match[i]==m) ans++;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题目精选 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> FFT </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「BZOJ3730」震波]]></title>
      <url>/2016/12/21/bzoj3730/</url>
      <content type="html"><![CDATA[<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><blockquote>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=3730" target="_blank" rel="external">题目传送门</a></p>
</blockquote>
<h3 id="解题报告"><a href="#解题报告" class="headerlink" title="解题报告"></a>解题报告</h3><blockquote>
<p>考虑动态点分治。我们对于每个点（点分树）维护两个树状数组。两个树状数组都以距离为下标，权值为内容。第一个树状数组维护子树中距离该点为k的权值和，第二个维护距离该点父亲距离为k的权值和。这样改权值时我们暴力爬树高，loglog复杂度（log的树高加上log的树状数组）。查询的时候一样爬树高，要注意容斥（把当前子树k的先加起来，往祖先上爬，如果距离小于k，假设为d，我们到祖先上去求一个k-d，再容斥掉原来这棵子树里被计算过的，这就是第二个树状数组的用处）。<br>时间复杂度0（nloglog），空间复杂度O（nlog）（如果用线段树还要加一个log。这里BB一句，为什么树状数组不会爆呢，因为你每一层开的大小为子树大小的话，每层总和n，总共log层，空间就是nlog的。其实就跟点分治的时间复杂度证明一样。用vector来开并且加上函数resize（）就可以办到了。）<br>这道题花了整整一天才写出来。。。一直RE（实际是WA，毕竟防离线加密，如果答案错了后面输入都是错的），总结一下错误：</p>
<ul>
<li>想的只用一个树状数组维护，实际上为了容斥必须要用上第二个树状数组。</li>
<li>更新时，一开始要把自己丢在自己的第二个树状数组里面</li>
<li>这玩意肯定要写在爬树循环外面啊（你是SB吗）</li>
<li>应该用qsum而不是query去爬树高（一开始脑袋抽了。。）</li>
<li>往树上爬的时候是不会中途退出的，不会因为有一个祖先爬不上去就终止，说不定有一个爷爷就在你旁边你可以过去呢。</li>
</ul>
<p>对于点分树的题就想象成爬山吧，我们用每一层的重心将点们分割开来，每次爬树高都是解锁区域，翻过一座高山。<br>还有，点分树自己脑补的板子实在太丑陋了。。这里膜拜一下ihopenot大佬，板子神快，我一开始好不容易调出来T了，参考了一下大佬的板子后就rank8了，真乃神人也！</p>
</blockquote>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1e9</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(i) ((i)&amp;-(i))</span></div><div class="line"><span class="keyword">int</span> n,m,head[N],val[N],fa[N][<span class="number">20</span>],dis[N][<span class="number">20</span>],s[N],f[N],dep[N],rt,sz,cnt,ans;</div><div class="line"><span class="keyword">bool</span> vis[N];</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;bit[N],fbit[N];</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>; <span class="keyword">char</span> a=getchar();</div><div class="line">    <span class="keyword">while</span>(a&gt;<span class="string">'9'</span> || a&lt;<span class="string">'0'</span>) &#123;<span class="keyword">if</span>(a==<span class="string">'-'</span>) f=<span class="number">-1</span>; a=getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(a&lt;=<span class="string">'9'</span> &amp;&amp; a&gt;=<span class="string">'0'</span>) x=x*<span class="number">10</span>+a-<span class="string">'0'</span>,a=getchar();</div><div class="line">    <span class="keyword">return</span> x*f;</div><div class="line">&#125; </div><div class="line"><span class="keyword">struct</span> edges&#123;</div><div class="line">    <span class="keyword">int</span> to,next;</div><div class="line">&#125;e[<span class="number">2</span>*N];</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> u=read(),v=read();</div><div class="line">    e[cnt]=(edges)&#123;v,head[u]&#125;;head[u]=cnt++;</div><div class="line">    e[cnt]=(edges)&#123;u,head[v]&#125;;head[v]=cnt++;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">getroot</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> father)</span></span>&#123;</div><div class="line">    s[x]=<span class="number">1</span>; f[x]=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i&gt;=<span class="number">0</span>;i=e[i].next)&#123;</div><div class="line">        <span class="keyword">if</span>(vis[e[i].to] || father==e[i].to) <span class="keyword">continue</span>;</div><div class="line">        getroot(e[i].to,x); s[x]+=s[e[i].to];</div><div class="line">        f[x]=max(f[x],s[e[i].to]);</div><div class="line">    &#125;</div><div class="line">    f[x]=max(f[x],sz-s[x]);</div><div class="line">    <span class="keyword">if</span>(f[x]&lt;f[rt]) rt=x;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">getship</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> anc,<span class="keyword">int</span> father,<span class="keyword">int</span> d)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i&gt;=<span class="number">0</span>;i=e[i].next)&#123;</div><div class="line">     <span class="keyword">int</span> v=e[i].to;</div><div class="line">     <span class="keyword">if</span>(!vis[v] &amp;&amp; v!=father) fa[v][++dep[v]]=anc,dis[v][dep[v]]=d,getship(v,anc,x,d+<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Buildtree</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    vis[x]=<span class="number">1</span>; getship(x,x,<span class="number">0</span>,<span class="number">1</span>); </div><div class="line">    <span class="keyword">int</span> all=sz; bit[x].resize(all+<span class="number">1</span>); fbit[x].resize(all+<span class="number">1</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i&gt;=<span class="number">0</span>;i=e[i].next)&#123;</div><div class="line">        <span class="keyword">if</span>(vis[e[i].to]) <span class="keyword">continue</span>;</div><div class="line">        sz=s[e[i].to]; <span class="keyword">if</span>(sz&gt;s[x]) sz=all-s[x];</div><div class="line">        rt=<span class="number">0</span>; getroot(e[i].to,x); Buildtree(rt);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">qsum</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> k)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> ret=val[x],lim=bit[x].size()<span class="number">-1</span>; k=min(k,lim); </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=k;i;i-=lowbit(i)) ret+=bit[x][i];</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">qsum2</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> k)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> ret=<span class="number">0</span>,lim=fbit[x].size()<span class="number">-1</span>; k=min(k,lim);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=k;i;i-=lowbit(i)) ret+=fbit[x][i];</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> v)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> d,lim; </div><div class="line">    d=dis[x][dep[x]]; lim=bit[x].size()<span class="number">-1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=d;j&lt;=lim &amp;&amp; j;j+=lowbit(j)) fbit[x][j]+=v;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=dep[x];i;i--)&#123;</div><div class="line">        d=dis[x][i]; lim=bit[fa[x][i]].size()<span class="number">-1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=d;j&lt;=lim;j+=lowbit(j)) bit[fa[x][i]][j]+=v;</div><div class="line">        d=dis[x][i<span class="number">-1</span>];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=d;j&lt;=lim &amp;&amp; j;j+=lowbit(j)) fbit[fa[x][i]][j]+=v;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> k)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> ret=qsum(x,k);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=dep[x];i;i--) <span class="keyword">if</span>(dis[x][i]&lt;=k)</div><div class="line">    ret+=qsum(fa[x][i],k-dis[x][i])-qsum2(fa[x][i+<span class="number">1</span>],k-dis[x][i]);</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    n=read(); m=read(); <span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span>(head));</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) val[i]=read();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++) insert();</div><div class="line">    f[<span class="number">0</span>]=INF; sz=n; getroot(<span class="number">1</span>,<span class="number">0</span>); Buildtree(rt); </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) fa[i][dep[i]+<span class="number">1</span>]=i;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) change(i,val[i]);</div><div class="line">    <span class="keyword">while</span>(m--)&#123;</div><div class="line">        <span class="keyword">int</span> a=read(),b=read()^ans,c=read()^ans;</div><div class="line">        <span class="keyword">if</span>(!a) ans=query(b,c),<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</div><div class="line">        <span class="keyword">else</span> change(b,c-val[b]),val[b]=c;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题目精选 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 树状数组 </tag>
            
            <tag> 动态点分治 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「BZOJ2653」middle]]></title>
      <url>/2016/12/20/bzoj2653/</url>
      <content type="html"><![CDATA[<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><blockquote>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=2653" target="_blank" rel="external">题目传送门</a></p>
</blockquote>
<h3 id="解题报告"><a href="#解题报告" class="headerlink" title="解题报告"></a>解题报告</h3><blockquote>
<p>OTZ陈老师出的神题。<br>先考虑一个简单问题：只有一个询问的情况。此时我们二分中位数，并且将区间内小中位数的数标为-1，大于的标为1，此时区间最大和如果大等0，则说明中位数可以变大，然后二分下去就可以了。<br>加上询问之后，我们就要维护这样一个区间最大和了。考虑主席树，我们对于每一个值，建出它对应的1，-1树，然后二分，到对应的树上去求最大区间和就好了。那么问题来了，怎么维护这样一个最大区间和呢？首先，我们有必选区间b,c所以我要把这个区间的和算上，对于可选区间a,b-1和c+1,d，我们要求一个最大前后缀和。这个东西可以这样求（以前缀和为例）：max(左儿子sum+右儿子前缀，左儿子前缀)。<br>那么整体思路出来了：先建出一棵全线段树（全为1），然后我们把原序列排个序（要把下标对应好），然后一个一个按顺序丢进树里，把小等自己的变为-1，以供这个数的后一个数查询时使用。 然后我们二分答案，对于当前答案去树上找最大区间和，如果大等0则满足条件。<br>这道题主席树建出来，第一维度是权值，第二维度是下标。我一开始想的一二维是反的，而大神说这样有问题，一直没想通哪里有问题。。。再去和大神讨论一下。<br>写这道题写得异常艰难。先是在想二分会不会有问题（实际是不会的，因为题目弄出来的中位数在偶数个时会选择较大的那个）昨天晚上写了第一版，有点问题，第二天写了第二版，还是有问题，什么没有排序导致没有正确性啊，建树不分配编号啊什么的。然后各种改，终于过了（感谢ihopenot大佬）。</p>
</blockquote>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 20005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M 400005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CT Chairman_Tree</span></div><div class="line"><span class="keyword">int</span> n,Q,p[<span class="number">5</span>],ans;</div><div class="line"><span class="keyword">struct</span> data&#123;</div><div class="line">    <span class="keyword">int</span> num,pos;</div><div class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> data&amp; w)<span class="keyword">const</span>&#123;</div><div class="line">        <span class="keyword">if</span>(num==w.num) <span class="keyword">return</span> pos&lt;w.pos;</div><div class="line">        <span class="keyword">return</span> num&lt;w.num;</div><div class="line">    &#125;</div><div class="line">&#125;a[N]; </div><div class="line"><span class="keyword">namespace</span> Chairman_Tree&#123;</div><div class="line">    <span class="keyword">struct</span> node&#123;</div><div class="line">        <span class="keyword">int</span> son[<span class="number">2</span>],sum,ls,rs;</div><div class="line">    &#125;tr[M];</div><div class="line">    <span class="keyword">int</span> sz,root[N];</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span>&amp; x,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</div><div class="line">        x=++sz;</div><div class="line">        tr[x].ls=tr[x].rs=tr[x].sum=r-l+<span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span>(l==r) <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</div><div class="line">        build(tr[x].son[<span class="number">0</span>],l,mid);</div><div class="line">        build(tr[x].son[<span class="number">1</span>],mid+<span class="number">1</span>,r);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span>&amp; y,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> lim)</span></span>&#123;</div><div class="line">        tr[y=++sz].sum=tr[x].sum<span class="number">-2</span>;</div><div class="line">        <span class="keyword">if</span>(l==r)&#123;</div><div class="line">            tr[y].ls=tr[y].rs=<span class="number">0</span>;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">memcpy</span>(tr[y].son,tr[x].son,<span class="keyword">sizeof</span>(tr[y].son));</div><div class="line">        <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>,LS,RS;</div><div class="line">        <span class="keyword">if</span>(lim&gt;mid) insert(tr[x].son[<span class="number">1</span>],tr[y].son[<span class="number">1</span>],mid+<span class="number">1</span>,r,lim);</div><div class="line">        <span class="keyword">else</span> insert(tr[x].son[<span class="number">0</span>],tr[y].son[<span class="number">0</span>],l,mid,lim);</div><div class="line">        LS=tr[y].son[<span class="number">0</span>],RS=tr[y].son[<span class="number">1</span>];</div><div class="line">        tr[y].ls=max(tr[LS].sum+tr[RS].ls,tr[LS].ls);</div><div class="line">        tr[y].rs=max(tr[RS].sum+tr[LS].rs,tr[RS].rs);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;insert(root[i],root[i+<span class="number">1</span>],<span class="number">1</span>,n,a[i].pos);&#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(L==l &amp;&amp;     R==r) <span class="keyword">return</span> tr[x].sum;</div><div class="line">        <span class="keyword">int</span> mid=(L+R)&gt;&gt;<span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span>(r&lt;=mid) <span class="keyword">return</span> query(tr[x].son[<span class="number">0</span>],L,mid,l,r);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(mid&lt;l) <span class="keyword">return</span> query(tr[x].son[<span class="number">1</span>],mid+<span class="number">1</span>,R,l,r);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">return</span> query(tr[x].son[<span class="number">0</span>],L,mid,l,mid)+query(tr[x].son[<span class="number">1</span>],mid+<span class="number">1</span>,R,mid+<span class="number">1</span>,r);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lquery</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(L==l &amp;&amp; R==r) <span class="keyword">return</span> tr[x].ls;</div><div class="line">        <span class="keyword">int</span> mid=(L+R)&gt;&gt;<span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span>(r&lt;=mid) <span class="keyword">return</span> lquery(tr[x].son[<span class="number">0</span>],L,mid,l,r);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(mid&lt;l) <span class="keyword">return</span> lquery(tr[x].son[<span class="number">1</span>],mid+<span class="number">1</span>,R,l,r);</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">int</span> t1=query(tr[x].son[<span class="number">0</span>],L,mid,l,mid)+lquery(tr[x].son[<span class="number">1</span>],mid+<span class="number">1</span>,R,mid+<span class="number">1</span>,r),t2=lquery(tr[x].son[<span class="number">0</span>],L,mid,l,mid);</div><div class="line">        <span class="keyword">return</span> max(t1,t2);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">rquery</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(L==l &amp;&amp; R==r) <span class="keyword">return</span> tr[x].rs;</div><div class="line">        <span class="keyword">int</span> mid=(L+R)&gt;&gt;<span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span>(r&lt;=mid) <span class="keyword">return</span> rquery(tr[x].son[<span class="number">0</span>],L,mid,l,r);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(mid&lt;l) <span class="keyword">return</span> rquery(tr[x].son[<span class="number">1</span>],mid+<span class="number">1</span>,R,l,r);</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">int</span> t1=rquery(tr[x].son[<span class="number">0</span>],L,mid,l,mid)+query(tr[x].son[<span class="number">1</span>],mid+<span class="number">1</span>,R,mid+<span class="number">1</span>,r),t2=rquery(tr[x].son[<span class="number">1</span>],mid+<span class="number">1</span>,R,mid+<span class="number">1</span>,r); </div><div class="line">        <span class="keyword">return</span> max(t1,t2);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> CT;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>; <span class="keyword">char</span> a=getchar();</div><div class="line">    <span class="keyword">while</span>(a&lt;<span class="string">'0'</span> || a&gt;<span class="string">'9'</span>) &#123;<span class="keyword">if</span>(a==<span class="string">'-'</span>) f=<span class="number">-1</span>; a=getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(a&gt;=<span class="string">'0'</span> &amp;&amp; a&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+a-<span class="string">'0'</span>,a=getchar();</div><div class="line">    <span class="keyword">return</span> x*f;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">jud</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> rquery(root[x],<span class="number">1</span>,n,p[<span class="number">1</span>],p[<span class="number">2</span>]<span class="number">-1</span>)+query(root[x],<span class="number">1</span>,n,p[<span class="number">2</span>],p[<span class="number">3</span>])+lquery(root[x],<span class="number">1</span>,n,p[<span class="number">3</span>]+<span class="number">1</span>,p[<span class="number">4</span>])&gt;=<span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    n=read();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) a[i]=(data)&#123;read(),i&#125;;</div><div class="line">    build(root[<span class="number">1</span>],<span class="number">1</span>,n);</div><div class="line">    sort(a+<span class="number">1</span>,a+<span class="number">1</span>+n);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++) insert(i);</div><div class="line">    Q=read();</div><div class="line">    <span class="keyword">while</span>(Q--)&#123;</div><div class="line">        <span class="keyword">int</span> l=<span class="number">1</span>,r=n;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">4</span>;i++) p[i]=(read()+ans)%n+<span class="number">1</span>;</div><div class="line">        sort(p+<span class="number">1</span>,p+<span class="number">5</span>);</div><div class="line">        <span class="keyword">while</span>(l&lt;r)&#123;</div><div class="line">            <span class="keyword">int</span> mid=(l+r+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span>(jud(mid)) l=mid;</div><div class="line">            <span class="keyword">else</span> r=mid<span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line">        ans=a[l].num; <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题目精选 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 二分 </tag>
            
            <tag> 可持久化线段树 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「BZOJ4408」「FJOI2016」神秘数]]></title>
      <url>/2016/12/19/bzoj4408/</url>
      <content type="html"><![CDATA[<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><blockquote>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=4408" target="_blank" rel="external">题目传送门</a></p>
</blockquote>
<h3 id="解题报告"><a href="#解题报告" class="headerlink" title="解题报告"></a>解题报告</h3><blockquote>
<p>如果我们将这段数排序，并且已知前n个数的神秘数为x，即现在凑得的数的区间为[1,x]，新加入的数为a，那么不难发现，我们凑得的数又得到了一段区间[a+1,a+x]，那么如果a+1&lt;=x，我们就可以拼上这两段，而神秘数变为a+x+1。<br>也即是说，我们有当前解ans，我们将所有小等ans的数加起来（其实根据前面所推应该是小于，但是写小等不会错，而且对于代码来说更好些，至于为什么不多赘述），如果sigma&lt;ans说明出现了断裂处，即此时ans为答案。否则我们将ans变为sigma+1，继续更新答案。<br>时间复杂度0（nlogn*P），其中P为常数（当数列为斐波那契时会被卡到极限40）<br>写代码的时候有一段小插曲。一开始用主席树写的对于每个节点单独累加起来，那样时间复杂度显然不对，实际上直接把每个节点的sum求出来减掉就好了。果然还是太SB啊QAQ</p>
</blockquote>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100005</span></div><div class="line"><span class="keyword">int</span> n,m,root[N],ls[<span class="number">100</span>*N],rs[<span class="number">100</span>*N],sum[<span class="number">100</span>*N],cnt,ans,get;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>; <span class="keyword">char</span> a=getchar();</div><div class="line">    <span class="keyword">while</span>(a&gt;<span class="string">'9'</span> || a&lt;<span class="string">'0'</span>) &#123;<span class="keyword">if</span>(a==<span class="string">'-'</span>) f=<span class="number">-1</span>; a=getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(a&gt;=<span class="string">'0'</span> &amp;&amp; a&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+a-<span class="string">'0'</span>,a=getchar();</div><div class="line">    <span class="keyword">return</span> x*f;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">inser</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span>&amp; y,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> v)</span></span>&#123;</div><div class="line">    y=++cnt;</div><div class="line">    sum[y]=sum[x]+v;</div><div class="line">    <span class="keyword">if</span>(l==r) <span class="keyword">return</span>;</div><div class="line">    ls[y]=ls[x]; rs[y]=rs[x];</div><div class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span>(v&gt;mid) inser(rs[x],rs[y],mid+<span class="number">1</span>,r,v);</div><div class="line">    <span class="keyword">else</span> inser(ls[x],ls[y],l,mid,v);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> lim)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span>(r&lt;=lim) <span class="keyword">return</span> sum[y]-sum[x];</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(lim&lt;=mid) <span class="keyword">return</span> query(ls[x],ls[y],l,mid,lim);</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> sum[ls[y]]-sum[ls[x]]+query(rs[x],rs[y],mid+<span class="number">1</span>,r,lim);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    n=read();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) inser(root[i<span class="number">-1</span>],root[i],<span class="number">1</span>,<span class="number">1e9</span>,read());</div><div class="line">    m=read();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> l,r,i=<span class="number">1</span>;i&lt;=m;i++)&#123;</div><div class="line">        l=read(); r=read(); ans=<span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</div><div class="line">            get=query(root[l<span class="number">-1</span>],root[r],<span class="number">1</span>,<span class="number">1e9</span>,ans);</div><div class="line">            <span class="keyword">if</span>(get&lt;ans) <span class="keyword">break</span>;</div><div class="line">            ans=get+<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题目精选 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 可持久化线段树 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「BZOJ2938」「Poi2000」病毒]]></title>
      <url>/2016/12/14/bzoj2938/</url>
      <content type="html"><![CDATA[<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><blockquote>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=2938" target="_blank" rel="external">题目传送门</a></p>
</blockquote>
<h3 id="解题报告"><a href="#解题报告" class="headerlink" title="解题报告"></a>解题报告</h3><blockquote>
<p>题解：对于一组病毒编码，我们构建AC自动机。如果存在一个无限长的安全代码，它在里面匹配，将一直匹配不上，也就是说，失配边会形成一个环。<br>所以构建好AC自动机后dfs失配边看有无环即可。</p>
</blockquote>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 30005</span></div><div class="line"><span class="keyword">int</span> n; <span class="keyword">char</span> ch[N];</div><div class="line"><span class="keyword">struct</span> acc</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> f[N],next[N][<span class="number">2</span>],cnt,head,tail,q[N];</div><div class="line">    <span class="keyword">bool</span> vis[N],ins[N],danger[N];</div><div class="line">    acc()&#123;</div><div class="line">        cnt=<span class="number">0</span>;</div><div class="line">        <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</div><div class="line">        <span class="built_in">memset</span>(ins,<span class="number">0</span>,<span class="keyword">sizeof</span>(ins));</div><div class="line">        <span class="built_in">memset</span>(danger,<span class="number">0</span>,<span class="keyword">sizeof</span>(danger));</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inser</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,ch); <span class="keyword">int</span> p=<span class="number">0</span>,len=<span class="built_in">strlen</span>(ch);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> a,i=<span class="number">0</span>;i&lt;len;i++)&#123;</div><div class="line">            a=ch[i]-<span class="string">'0'</span>;</div><div class="line">            <span class="keyword">if</span>(!next[p][a]) next[p][a]=++cnt;</div><div class="line">            p=next[p][a];</div><div class="line">        &#125; danger[p]=<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getfail</span><span class="params">()</span></span>&#123;</div><div class="line">        head=<span class="number">0</span>; tail=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++) <span class="keyword">if</span>(next[<span class="number">0</span>][i]) q[tail++]=next[<span class="number">0</span>][i],f[next[<span class="number">0</span>][i]]=<span class="number">0</span>;</div><div class="line">        <span class="comment">//一定不要直接把0丢进队列BFS，要分别把每个单独拿出来，不然是错的 </span></div><div class="line">        <span class="keyword">while</span>(head&lt;tail)&#123;</div><div class="line">            <span class="keyword">int</span> p=q[head++];</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)&#123;</div><div class="line">                <span class="keyword">int</span> v=next[p][i];</div><div class="line">                <span class="keyword">if</span>(!v) &#123;next[p][i]=next[f[p]][i]; <span class="keyword">continue</span>;&#125;</div><div class="line">                <span class="keyword">int</span> k=f[p];</div><div class="line">                <span class="keyword">while</span>(k &amp;&amp; !next[k][i]) k=f[k]; k=next[k][i];</div><div class="line">                f[v]=k;</div><div class="line">                 danger[v]|=danger[k];</div><div class="line">                q[tail++]=v;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">        ins[x]=<span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)&#123;</div><div class="line">            <span class="keyword">int</span> v=next[x][i];</div><div class="line">            <span class="keyword">if</span>(ins[v]) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span>(vis[v] || danger[v]) <span class="keyword">continue</span>;</div><div class="line">            vis[v]=<span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span>(dfs(v)) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        ins[x]=<span class="number">0</span>;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;acm;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) acm.inser();</div><div class="line">    acm.getfail();</div><div class="line">    <span class="keyword">if</span>(acm.dfs(<span class="number">0</span>)) <span class="built_in">puts</span>(<span class="string">"TAK"</span>);</div><div class="line">    <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"NIE"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题目精选 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> AC自动机 </tag>
            
            <tag> DFS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「BZOJ2733」「HNOI2012」永无乡]]></title>
      <url>/2016/12/13/bzoj2733/</url>
      <content type="html"><![CDATA[<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><blockquote>
<p><a href="">题目传送门</a></p>
</blockquote>
<h3 id="解题报告"><a href="#解题报告" class="headerlink" title="解题报告"></a>解题报告</h3><blockquote>
<p>线段树合并模板。</p>
</blockquote>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100005</span></div><div class="line"><span class="keyword">char</span> ch[<span class="number">2</span>];</div><div class="line"><span class="keyword">int</span> n,m,q,sz,f[N],root[N],sum[<span class="number">2000005</span>],ls[<span class="number">2000005</span>],rs[<span class="number">2000005</span>],v[N],id[N];</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    sum[x]=sum[ls[x]]+sum[rs[x]];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>; <span class="keyword">char</span> a=getchar();</div><div class="line">    <span class="keyword">while</span>(a&lt;<span class="string">'0'</span> || a&gt;<span class="string">'9'</span>) &#123;<span class="keyword">if</span>(a==<span class="string">'-'</span>) f=<span class="number">-1</span>; a=getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(a&gt;=<span class="string">'0'</span> &amp;&amp; a&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+a-<span class="string">'0'</span>,a=getchar();</div><div class="line">    <span class="keyword">return</span> x*f;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">fa</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> f[x]!=x?f[x]=fa(f[x]):x;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">inser</span><span class="params">(<span class="keyword">int</span>&amp; x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> val)</span></span>&#123;</div><div class="line">    x=++sz;</div><div class="line">    <span class="keyword">if</span>(l==r) &#123;sum[x]=<span class="number">1</span>;<span class="keyword">return</span>;&#125;</div><div class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span>(val&lt;=mid) inser(ls[x],l,mid,val); </div><div class="line">    <span class="keyword">else</span> inser(rs[x],mid+<span class="number">1</span>,r,val);</div><div class="line">    update(x);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> y;</div><div class="line">    <span class="keyword">if</span>(!y) <span class="keyword">return</span> x;</div><div class="line">    ls[x]=merge(ls[x],ls[y]);</div><div class="line">    rs[x]=merge(rs[x],rs[y]);</div><div class="line">    update(x);</div><div class="line">    <span class="keyword">return</span> x;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(l==r) <span class="keyword">return</span> l;</div><div class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span>(sum[ls[x]]&gt;=k) <span class="keyword">return</span> query(ls[x],l,mid,k);</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> query(rs[x],mid+<span class="number">1</span>,r,k-sum[ls[x]]);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    n=read(); m=read();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) f[i]=i;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) v[i]=read();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> p,i=<span class="number">1</span>;i&lt;=n;i++) inser(root[i],<span class="number">1</span>,n,v[i]),id[v[i]]=i;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x,y,i=<span class="number">1</span>;i&lt;=m;i++) x=read(),y=read(),x=fa(x),y=fa(y),f[y]=x,root[x]=merge(root[x],root[y]);</div><div class="line">    q=read();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x,y,i=<span class="number">1</span>;i&lt;=q;i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,ch); x=read(); y=read();</div><div class="line">        <span class="keyword">if</span>(ch[<span class="number">0</span>]==<span class="string">'Q'</span>)&#123;</div><div class="line">            x=fa(x);</div><div class="line">            <span class="keyword">if</span>(sum[root[x]]&lt;y) &#123;<span class="built_in">puts</span>(<span class="string">"-1"</span>);<span class="keyword">continue</span>;&#125;</div><div class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,id[query(root[x],<span class="number">1</span>,n,y)]);</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            x=fa(x); y=fa(y);</div><div class="line">            <span class="keyword">if</span>(x!=y) f[y]=x,root[x]=merge(root[x],root[y]); </div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题目精选 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 线段树合并 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「BZOJ2719」银河之星]]></title>
      <url>/2016/11/16/bzoj2719/</url>
      <content type="html"><![CDATA[<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><blockquote>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=2719" target="_blank" rel="external">题目传送门</a></p>
</blockquote>
<h3 id="解题报告"><a href="#解题报告" class="headerlink" title="解题报告"></a>解题报告</h3><blockquote>
<p>可以将棋子分为9种类型。且可以通过合并使得两个不同种类棋子转换为另一种棋子（不过要注意棋盘大小，有的时候硬要合并会到棋盘外面，可以先把棋盘全部转换，然后枚举每一个棋子的转换）。然后把状态压成一个十位的十进制数就可以记忆化搜索了。</p>
</blockquote>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> id(i,j) ((i-1)*3+j-1);</span></div><div class="line"><span class="keyword">struct</span> point&#123;</div><div class="line">    <span class="keyword">int</span> a,b;</div><div class="line">&#125;p[<span class="number">15</span>];</div><div class="line"><span class="keyword">int</span> k,n,m,x,y,g[<span class="number">105</span>][<span class="number">105</span>],tot[<span class="number">15</span>],change[<span class="number">10</span>][<span class="number">10</span>];</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> dir[<span class="number">8</span>][<span class="number">2</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>&#125;;</div><div class="line">LL bg,fin,bin[<span class="number">15</span>];</div><div class="line"><span class="keyword">bool</span> flag;</div><div class="line"><span class="built_in">map</span>&lt;LL,<span class="keyword">int</span>&gt;lis;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(LL st)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(lis[st])&#123;</div><div class="line">        <span class="keyword">if</span>(lis[st]==<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(st==fin) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    LL tmp;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)</div><div class="line">        <span class="keyword">if</span>((st%bin[i+<span class="number">1</span>])/bin[i]&gt;<span class="number">0</span>)&#123;</div><div class="line">             <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">9</span>;j++)</div><div class="line">             <span class="keyword">if</span>(change[i][j]!=<span class="number">-1</span> &amp;&amp; (st%bin[j+<span class="number">1</span>])/bin[j]&gt;<span class="number">0</span>)&#123;</div><div class="line">             tmp=st,tmp=tmp-(bin[i]+bin[j])+bin[change[i][j]];</div><div class="line">             <span class="keyword">if</span>(dfs(tmp)) &#123;lis[tmp]=<span class="number">1</span>; <span class="keyword">return</span> <span class="literal">true</span>;&#125;</div><div class="line">             &#125;</div><div class="line">        &#125;</div><div class="line">    lis[st]=<span class="number">2</span>;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    bin[<span class="number">0</span>]=<span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++) bin[i]=bin[i<span class="number">-1</span>]*<span class="number">10</span>;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d%d%d%d"</span>,&amp;k,&amp;n,&amp;m,&amp;x,&amp;y)!=EOF)&#123;</div><div class="line">        lis.clear(); bg=<span class="number">0</span>; flag=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> num=id(((x<span class="number">-1</span>)%<span class="number">3</span>+<span class="number">1</span>),((y<span class="number">-1</span>)%<span class="number">3</span>+<span class="number">1</span>));</div><div class="line">        fin=bin[num];</div><div class="line">        <span class="built_in">memset</span>(tot,<span class="number">0</span>,<span class="keyword">sizeof</span>(tot));</div><div class="line">        <span class="built_in">memset</span>(change,<span class="number">-1</span>,<span class="keyword">sizeof</span>(change));</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> a,b,i=<span class="number">1</span>;i&lt;=k;i++) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</div><div class="line">            p[i]=(point)&#123;a,b&#125;;</div><div class="line">            <span class="keyword">int</span> num=id(((a<span class="number">-1</span>)%<span class="number">3</span>+<span class="number">1</span>),((b<span class="number">-1</span>)%<span class="number">3</span>+<span class="number">1</span>));</div><div class="line">            tot[num]++;</div><div class="line">            <span class="keyword">if</span>(tot[num]==<span class="number">10</span>) <span class="built_in">puts</span>(<span class="string">"No"</span>),flag=<span class="number">1</span>;</div><div class="line">            <span class="keyword">else</span> bg+=bin[num];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(flag) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</div><div class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)</div><div class="line">            g[i+<span class="number">1</span>][j+<span class="number">1</span>]=id((i%<span class="number">3</span>+<span class="number">1</span>),(j%<span class="number">3</span>+<span class="number">1</span>));</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> d=<span class="number">0</span>;d&lt;<span class="number">8</span>;d++)&#123;</div><div class="line">              <span class="keyword">int</span> ta=i+<span class="number">2</span>*dir[d][<span class="number">0</span>],tb=j+<span class="number">2</span>*dir[d][<span class="number">1</span>];</div><div class="line">              <span class="keyword">if</span>(ta&lt;<span class="number">1</span> || ta&gt;n || tb&lt;<span class="number">1</span> || tb&gt;m) <span class="keyword">continue</span>;</div><div class="line">            change[g[ta-dir[d][<span class="number">0</span>]][tb-dir[d][<span class="number">1</span>]]][g[i][j]]=change[g[i][j]][g[ta-dir[d][<span class="number">0</span>]][tb-dir[d][<span class="number">1</span>]]]=g[ta][tb];</div><div class="line">          &#125;</div><div class="line">        <span class="keyword">if</span>(dfs(bg)) <span class="built_in">puts</span>(<span class="string">"Yes"</span>);</div><div class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"No"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题目精选 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 记忆化搜索 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「BZOJ1880」「SDOI2009」Elaxia的路线]]></title>
      <url>/2016/11/05/bzoj1880/</url>
      <content type="html"><![CDATA[<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><blockquote>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=1880" target="_blank" rel="external">题目传送门</a></p>
</blockquote>
<h3 id="解题报告"><a href="#解题报告" class="headerlink" title="解题报告"></a>解题报告</h3><blockquote>
<p>考虑每一条边，如果满足dis(s1,u)+len+dis(v,t1)==dis(s1,t1) &amp;&amp; dis(s2,u)+len+dis(v,t2)==dis(s2,t2) 则该边在公共最短路上<br>拓扑排序dp下即可</p>
</blockquote>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 1505</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1e9</span></div><div class="line"><span class="keyword">int</span> n,m,a[<span class="number">5</span>],dis[<span class="number">5</span>][N],cnt,cnt1,head[N],head1[N],r[N],ans[N],fin;</div><div class="line"><span class="keyword">bool</span> y[N];</div><div class="line"><span class="keyword">struct</span> data&#123;</div><div class="line">    <span class="keyword">int</span> num,v;</div><div class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> data&amp; w)<span class="keyword">const</span>&#123;</div><div class="line">       <span class="keyword">return</span> v&gt;w.v;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">priority_queue&lt;data&gt;q;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>; <span class="keyword">char</span> a=getchar();</div><div class="line">    <span class="keyword">while</span>(a&lt;<span class="string">'0'</span> || a&gt;<span class="string">'9'</span>) &#123;<span class="keyword">if</span>(a==<span class="string">'-'</span>) f=<span class="number">-1</span>; a=getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(a&gt;=<span class="string">'0'</span> &amp;&amp; a&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+a-<span class="string">'0'</span>,a=getchar();</div><div class="line">    <span class="keyword">return</span> x*f;</div><div class="line">&#125; </div><div class="line"><span class="keyword">struct</span> edges&#123;</div><div class="line">    <span class="keyword">int</span> fr,to,v,next;</div><div class="line">&#125;e[<span class="number">500005</span>],e1[<span class="number">500005</span>];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">inser</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> c)</span></span>&#123;</div><div class="line">    e[cnt]=(edges)&#123;u,v,c,head[u]&#125;;head[u]=cnt++;</div><div class="line">    e[cnt]=(edges)&#123;v,u,c,head[v]&#125;;head[v]=cnt++;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> c)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(dis[<span class="number">1</span>][u]&gt;dis[<span class="number">1</span>][v]) swap(u,v);</div><div class="line">    e1[cnt1]=(edges)&#123;u,v,c,head1[u]&#125;;head1[u]=cnt1++; r[v]++;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dj</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    dis[x][a[x]]=<span class="number">0</span>; <span class="built_in">memset</span>(y,<span class="number">0</span>,<span class="keyword">sizeof</span>(y));q.push((data)&#123;a[x],<span class="number">0</span>&#125;);</div><div class="line">    <span class="keyword">int</span> s,to;</div><div class="line">    <span class="keyword">while</span>(!q.empty())&#123;</div><div class="line">        s=q.top().num; q.pop(); </div><div class="line">        <span class="keyword">if</span>(y[s]) <span class="keyword">continue</span>; y[s]=<span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[s];i&gt;=<span class="number">0</span>;i=e[i].next)&#123;</div><div class="line">        <span class="keyword">if</span>(y[e[i].to]) <span class="keyword">continue</span>; to=e[i].to;</div><div class="line">        <span class="keyword">if</span>(dis[x][to]&gt;dis[x][s]+e[i].v) dis[x][to]=dis[x][s]+e[i].v,q.push((data)&#123;to,dis[x][to]&#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">topsort</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    r[x]--;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head1[x];i&gt;=<span class="number">0</span>;i=e1[i].next)&#123;</div><div class="line">        ans[e1[i].to]=max(ans[e1[i].to],ans[x]+e1[i].v);</div><div class="line">        fin=max(ans[e1[i].to],fin);</div><div class="line">        r[e1[i].to]--; <span class="keyword">if</span>(!r[e1[i].to]) topsort(e1[i].to);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    n=read(); m=read(); </div><div class="line">    <span class="built_in">memset</span>(dis,<span class="number">34</span>,<span class="keyword">sizeof</span>(dis)); </div><div class="line">    <span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span>(head));</div><div class="line">    <span class="built_in">memset</span>(head1,<span class="number">-1</span>,<span class="keyword">sizeof</span>(head1));</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">4</span>;i++) a[i]=read();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> u,v,c,i=<span class="number">1</span>;i&lt;=m;i++)</div><div class="line">    u=read(),v=read(),c=read(),inser(u,v,c);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">4</span>;i++) dj(i);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i+=<span class="number">2</span>)&#123;</div><div class="line">        <span class="keyword">int</span> u=e[i].fr,v=e[i].to;</div><div class="line">        <span class="keyword">if</span>((dis[<span class="number">1</span>][u]+e[i].v+dis[<span class="number">2</span>][v]==dis[<span class="number">1</span>][a[<span class="number">2</span>]] || dis[<span class="number">1</span>][v]+e[i].v+dis[<span class="number">2</span>][u]==dis[<span class="number">1</span>][a[<span class="number">2</span>]]) &amp;&amp; (dis[<span class="number">3</span>][u]+e[i].v+dis[<span class="number">4</span>][v]==dis[<span class="number">3</span>][a[<span class="number">4</span>]] || dis[<span class="number">3</span>][v]+e[i].v+dis[<span class="number">4</span>][u]==dis[<span class="number">3</span>][a[<span class="number">4</span>]]))</div><div class="line">        ins(u,v,e[i].v);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line">    <span class="keyword">if</span>(!r[i]) topsort(i);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,fin);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题目精选 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 最短路 </tag>
            
            <tag> 拓扑排序 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「Codeforces731E」Funny Game]]></title>
      <url>/2016/10/25/CF731E/</url>
      <content type="html"><![CDATA[<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><blockquote>
<p><a href="">题目传送门</a></p>
</blockquote>
<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote>
<p>一个游戏，由n张贴纸组成。贴纸排成一排，并且纸条上标有数字，玩家轮流揭下m张从左到右连续的纸条（m大等2），揭下后玩家得分累加这些纸条的sum，并且在剩下纸条最左边贴上新的纸条，数值为揭下纸条的sum。最后只剩一张纸条时游戏结束。每个玩家的策略是使敌我分差尽可能大。求这个分差。</p>
</blockquote>
<h3 id="解题报告"><a href="#解题报告" class="headerlink" title="解题报告"></a>解题报告</h3><blockquote>
<p>这道题是那一场最难的题，交的人最少，然而代码只有几行（一个for循环搞定<br>题解引入了一个“zero-sum game”来阐述这一类游戏，并且说这一类游戏通常用dp解（%%%<br>我们发现每个状态只跟我们已经取走了多少张纸条有关，我们设状态dp[i]表示已经取走i个纸条，一开始分差为0的状态，装的值为这种状态下最大分差<br>状态转移为dp[i]=max(sum[j]-dp[j])    i&lt;j&lt;=n<br>推的时候维护最大值，O（n）草翻这题（%%%%</p>
</blockquote>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 200005</span></div><div class="line"><span class="keyword">int</span> n,s[N],dp[N],maxx;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n); <span class="keyword">for</span>(<span class="keyword">int</span> a,i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a),s[i]=s[i<span class="number">-1</span>]+a;</div><div class="line">    maxx=s[n];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">1</span>;i--)</div><div class="line">    dp[i]=maxx,maxx=max(maxx,s[i]-dp[i]);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dp[<span class="number">1</span>]);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题目精选 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 博弈论 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[胡扯两句--CDQ分治]]></title>
      <url>/2016/10/20/CDQ/</url>
      <content type="html"><![CDATA[<p>之前听大神讲过CDQ分治大概是个什么东西，但是一直还没有真正去搞过。今天稍微看了一下，写点自己的理解。<br>首先CDQ分治有两个条件。<br>条件1：可以分成两个独立互不影响的问题（这里的“独立”是指将前面区间的影响处理掉后，后面与前面都成为了新的相同问题）<br>条件2：允许离线（据说最近流行强制在线。。。如果这样只好去写恶心的数据结构了）。<br>CDQ分治在可以使用的情况下很多高级数据结构题可以用CDQ分治干过去，不仅时空优越而且易于调试（虽然我并不觉得很好调试<br>大体思路是将问题不断分成两个子问题，用前一个子问题中的修改操作去更新后一个子问题，这样之后就得到了两个互不影响的子问题，达到分治的目的。<br>贴一道版题代码：「BZOJ1176」<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></div><div class="line"><span class="keyword">struct</span> data&#123;</div><div class="line">       <span class="keyword">int</span> v,x,y,d,f,pos;</div><div class="line">       <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> data&amp; w)<span class="keyword">const</span>&#123;</div><div class="line">       <span class="keyword">if</span>(x!=w.x) <span class="keyword">return</span> x&lt;w.x;</div><div class="line">       <span class="keyword">if</span>(y!=w.y) <span class="keyword">return</span> y&lt;w.y;</div><div class="line">       <span class="keyword">return</span> pos&lt;w.pos;</div><div class="line">    &#125;</div><div class="line">&#125;a[<span class="number">200005</span>],tmp[<span class="number">200005</span>];</div><div class="line"><span class="keyword">int</span> s,w,t[<span class="number">2000005</span>],cnt,ans[<span class="number">200005</span>];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span>&amp; x)</span></span>&#123;</div><div class="line">    x=<span class="number">0</span>; <span class="keyword">int</span> f=<span class="number">1</span>,a=getchar();</div><div class="line">    <span class="keyword">while</span>(a&lt;<span class="string">'0'</span> || a&gt;<span class="string">'9'</span>) &#123;<span class="keyword">if</span>(a==<span class="string">'-'</span>) f=<span class="number">-1</span>; a=getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(a&gt;=<span class="string">'0'</span> &amp;&amp; a&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+a-<span class="string">'0'</span>,a=getchar(); x*=f;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> y,<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">for</span>(<span class="keyword">int</span> i=y;i&lt;=w;i+=lowbit(i)) t[i]+=x;&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> y)</span></span>&#123;<span class="keyword">int</span> ret=<span class="number">0</span>; <span class="keyword">for</span>(<span class="keyword">int</span> i=y;i;i-=lowbit(i)) ret+=t[i]; <span class="keyword">return</span> ret;&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">CDQ</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(l==r) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>,t1=l<span class="number">-1</span>,t2=mid; <span class="comment">//这里写错调了老半天</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;=r;i++)&#123;</div><div class="line">        <span class="keyword">if</span>(a[i].v&lt;=mid &amp;&amp; !a[i].pos) add(a[i].y,a[i].d);</div><div class="line">        <span class="keyword">if</span>(a[i].v&gt;mid &amp;&amp; a[i].pos) ans[a[i].pos]+=query(a[i].y)*a[i].f;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;=r;i++)</div><div class="line">        <span class="keyword">if</span>(a[i].v&lt;=mid &amp;&amp; !a[i].pos) add(a[i].y,-a[i].d);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;=r;i++)</div><div class="line">        <span class="keyword">if</span>(a[i].v&lt;=mid) tmp[++t1]=a[i];</div><div class="line">        <span class="keyword">else</span> tmp[++t2]=a[i];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;=r;i++) a[i]=tmp[i];</div><div class="line">    CDQ(l,mid); CDQ(mid+<span class="number">1</span>,r);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    read(s); read(w); <span class="keyword">int</span> t,x,y,d,x1,x2,y1,y2;</div><div class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</div><div class="line">        read(t);</div><div class="line">        <span class="keyword">if</span>(t==<span class="number">1</span>)&#123;</div><div class="line">            read(x); read(y); read(d);</div><div class="line">            a[++cnt]=(data)&#123;cnt,x,y,d,<span class="number">1</span>,<span class="number">0</span>&#125;;</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(t==<span class="number">2</span>)&#123;</div><div class="line">            read(x1); read(y1); read(x2); read(y2); ++ans[<span class="number">0</span>];</div><div class="line">            a[++cnt]=(data)&#123;cnt,x1<span class="number">-1</span>,y1<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>,ans[<span class="number">0</span>]&#125;;</div><div class="line">            a[++cnt]=(data)&#123;cnt,x2,y2,<span class="number">0</span>,<span class="number">1</span>,ans[<span class="number">0</span>]&#125;;</div><div class="line">            a[++cnt]=(data)&#123;cnt,x1<span class="number">-1</span>,y2,<span class="number">0</span>,<span class="number">-1</span>,ans[<span class="number">0</span>]&#125;;</div><div class="line">            a[++cnt]=(data)&#123;cnt,x2,y1<span class="number">-1</span>,<span class="number">0</span>,<span class="number">-1</span>,ans[<span class="number">0</span>]&#125;;</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    sort(a+<span class="number">1</span>,a+<span class="number">1</span>+cnt);</div><div class="line">    CDQ(<span class="number">1</span>,cnt);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=ans[<span class="number">0</span>];i++)</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans[i]);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 学习总结 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CDQ分治 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「BZOJ3295」「CQOI2011」动态逆序对]]></title>
      <url>/2016/10/20/bzoj3295/</url>
      <content type="html"><![CDATA[<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><blockquote>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=3295" target="_blank" rel="external">题目传送门</a></p>
</blockquote>
<h3 id="解题报告"><a href="#解题报告" class="headerlink" title="解题报告"></a>解题报告</h3><blockquote>
<p>可用树套树可用CDQ分治（据说还有分块<br>基本上算是两种方法的版题。。。详解网上有很多，推荐<a href="http://blog.csdn.net/u011542204/article/details/50571409" target="_blank" rel="external">神犇题解</a><br>只写了树套树。。CDQ感觉和之前写的版差不多就懒得写了。。</p>
</blockquote>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> X 5000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></div><div class="line"><span class="keyword">int</span> num[N],pos[N],n,m,t[N],a1[N],a2[N],A[N],B[N],root[X],ls[X],rs[X],sz,sum[X];</div><div class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span>&amp; x)</span></span>&#123;</div><div class="line">    x=<span class="number">0</span>; <span class="keyword">int</span> f=<span class="number">1</span>,a=getchar();</div><div class="line">    <span class="keyword">while</span>(a&lt;<span class="string">'0'</span> || a&gt;<span class="string">'9'</span>) &#123;<span class="keyword">if</span>(a==<span class="string">'-'</span>) f=<span class="number">-1</span>; a=getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(a&gt;=<span class="string">'0'</span> &amp;&amp; a&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+a-<span class="string">'0'</span>,a=getchar(); x*=f;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">getans</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> ret=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=x;i;i-=lowbit(i)) ret+=t[i]; <span class="keyword">return</span> ret; </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span>&amp; y,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(!y) y=++sz;  sum[y]++; <span class="keyword">if</span>(l==r) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span>(k&lt;=mid) update(ls[y],l,mid,k);</div><div class="line">    <span class="keyword">else</span> update(rs[y],mid+<span class="number">1</span>,r,k);</div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">askmore</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> k)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> ret=<span class="number">0</span>; A[<span class="number">0</span>]=B[<span class="number">0</span>]=<span class="number">0</span>; x--;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=x;i;i-=lowbit(i)) A[++A[<span class="number">0</span>]]=root[i];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=y;i;i-=lowbit(i)) B[++B[<span class="number">0</span>]]=root[i];</div><div class="line">    <span class="keyword">int</span> l=<span class="number">1</span>,r=n;</div><div class="line">    <span class="keyword">while</span>(l&lt;r)&#123;</div><div class="line">        <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span>(k&lt;=mid)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=A[<span class="number">0</span>];i++) ret-=sum[rs[A[i]]],A[i]=ls[A[i]];</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=B[<span class="number">0</span>];i++) ret+=sum[rs[B[i]]],B[i]=ls[B[i]];</div><div class="line">            r=mid;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=A[<span class="number">0</span>];i++) A[i]=rs[A[i]];</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=B[<span class="number">0</span>];i++) B[i]=rs[B[i]];</div><div class="line">            l=mid+<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">askless</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> k)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> ret=<span class="number">0</span>; A[<span class="number">0</span>]=B[<span class="number">0</span>]=<span class="number">0</span>; x--;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=x;i;i-=lowbit(i)) A[++A[<span class="number">0</span>]]=root[i];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=y;i;i-=lowbit(i)) B[++B[<span class="number">0</span>]]=root[i];</div><div class="line">    <span class="keyword">int</span> l=<span class="number">1</span>,r=n;</div><div class="line">    <span class="keyword">while</span>(l&lt;r)&#123;</div><div class="line">        <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span>(k&gt;mid)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=A[<span class="number">0</span>];i++) ret-=sum[ls[A[i]]],A[i]=rs[A[i]];</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=B[<span class="number">0</span>];i++) ret+=sum[ls[B[i]]],B[i]=rs[B[i]];</div><div class="line">            l=mid+<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=A[<span class="number">0</span>];i++) A[i]=ls[A[i]];</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=B[<span class="number">0</span>];i++) B[i]=ls[B[i]];</div><div class="line">            r=mid;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    read(n); read(m);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</div><div class="line">        read(num[i]); pos[num[i]]=i;</div><div class="line">        a1[i]=getans(n)-getans(num[i]);                 <span class="comment">//以该数为结尾的逆序对 </span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=num[i];j&lt;=n;j+=lowbit(j))  t[j]++;</div><div class="line">        ans+=a1[i];</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">memset</span>(t,<span class="number">0</span>,<span class="keyword">sizeof</span>(t));</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;i--)&#123;</div><div class="line">        a2[i]=getans(num[i]<span class="number">-1</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=num[i];j&lt;=n;j+=lowbit(j)) t[j]++;    <span class="comment">//以该数为开头的逆序对 </span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> a,i=<span class="number">1</span>;i&lt;=m;i++)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</div><div class="line">        read(a); a=pos[a];  </div><div class="line">        ans-=(a1[a]+a2[a]-askmore(<span class="number">1</span>,a<span class="number">-1</span>,num[a])-askless(a+<span class="number">1</span>,n,num[a]));    <span class="comment">//删点转化为加点 </span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=a;j&lt;=n;j+=lowbit(j)) update(root[j],<span class="number">1</span>,n,num[a]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题目精选 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CDQ分治 </tag>
            
            <tag> 树套树 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「BZOJ3594」「SCOI2014」方伯伯的玉米田]]></title>
      <url>/2016/10/18/bzoj3594/</url>
      <content type="html"><![CDATA[<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><blockquote>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=3594" target="_blank" rel="external">题目传送门</a></p>
</blockquote>
<h3 id="解题报告"><a href="#解题报告" class="headerlink" title="解题报告"></a>解题报告</h3><blockquote>
<p>dp新优化姿势。。。<br>首先，当我们拔高时，一定右端点是n最优。因为如果右端点是r，相当于降低了r之后玉米的高度。显然n更优。<br>那么可以dp。dp[i][j]表示前i个拔高j次的LIS。dp[i][j]=max(dp[i’][j’])+1，其中h[i’]+j’&gt;=h[i],j’&lt;=k<br>可以用二维树状数组来维护。</p>
</blockquote>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 10005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x&amp;-x)</span></div><div class="line"><span class="keyword">int</span> n,k,h[N],r[N][<span class="number">505</span>],H,ans;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> tmp=<span class="number">0</span>,f=<span class="number">1</span>,a=getchar();</div><div class="line">    <span class="keyword">while</span>(a&lt;<span class="string">'0'</span> || a&gt;<span class="string">'9'</span>) &#123;<span class="keyword">if</span>(a==<span class="string">'-'</span>) f=<span class="number">-1</span>; a=getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(a&gt;=<span class="string">'0'</span> &amp;&amp; a&lt;=<span class="string">'9'</span>) tmp=tmp*<span class="number">10</span>+a-<span class="string">'0'</span>,a=getchar();</div><div class="line">    <span class="keyword">return</span> tmp*f;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> a)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=x;i&lt;=H+k;i+=lowbit(i))</div><div class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> j=y;j&lt;=k+<span class="number">1</span>;j+=lowbit(j))</div><div class="line">         r[i][j]=max(r[i][j],a);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> ret=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=x;i;i-=lowbit(i))</div><div class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> j=y;j;j-=lowbit(j))</div><div class="line">        ret=max(ret,r[i][j]);</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    n=read(); k=read();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) h[i]=read(),H=max(H,h[i]);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> j=k;j&gt;=<span class="number">0</span>;j--)&#123;</div><div class="line">           <span class="keyword">int</span> tmp=query(h[i]+j,j+<span class="number">1</span>)+<span class="number">1</span>;</div><div class="line">           ans=max(ans,tmp);</div><div class="line">           update(h[i]+j,j+<span class="number">1</span>,tmp);</div><div class="line">      &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题目精选 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 树状数组 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「BZOJ4443」「SCOI2015」小凸玩矩阵]]></title>
      <url>/2016/10/17/bzoj4443/</url>
      <content type="html"><![CDATA[<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><blockquote>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=4443" target="_blank" rel="external">题目传送门</a></p>
</blockquote>
<h3 id="解题报告"><a href="#解题报告" class="headerlink" title="解题报告"></a>解题报告</h3><blockquote>
<p>太久没搞网络流，又被坑了一发死循环。。（这次是对cur[]初始化没对。以后直接for S到T不就好了嘛！）<br>先看数据量。诶，才250，肯定n三方。搜索不行，dp不行，贪心不行，二分图网络流？恩，有可能，先放一边去。<br>然而正解就是二分+二分图匹配。<br>二分答案，二分图匹配看是否存在大等n-k+1个匹配。<br>基本上每当题目中有限制不能同行不能同列的时候都是二分图左边为行，右边为列来匹配的。（我怎么就是不长记性呢，又被坑了</p>
</blockquote>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1e9+5</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 70005</span></div><div class="line"><span class="keyword">int</span> n,m,k,d[N],cur[N],S,T,cnt,z[<span class="number">255</span>][<span class="number">255</span>],head[N];</div><div class="line"><span class="keyword">bool</span> vis[N];</div><div class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;</div><div class="line"><span class="keyword">struct</span> edges&#123;</div><div class="line">    <span class="keyword">int</span> fr,to,cap,flow,next;</div><div class="line">&#125;e[<span class="number">4</span>*N];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">inser</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> c)</span></span>&#123;</div><div class="line">    e[cnt]=(edges)&#123;u,v,c,<span class="number">0</span>,head[u]&#125;;head[u]=cnt++;</div><div class="line">    e[cnt]=(edges)&#123;v,u,<span class="number">0</span>,<span class="number">0</span>,head[v]&#125;;head[v]=cnt++;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis)); </div><div class="line">    vis[S]=<span class="number">1</span>; q.push(S); d[S]=<span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(!q.empty())&#123;</div><div class="line">        <span class="keyword">int</span> x=q.front(); q.pop();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i&gt;=<span class="number">0</span>;i=e[i].next)</div><div class="line">            <span class="keyword">if</span>(!vis[e[i].to] &amp;&amp; e[i].cap&gt;e[i].flow) vis[e[i].to]=<span class="number">1</span>,d[e[i].to]=d[x]+<span class="number">1</span>,q.push(e[i].to);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> vis[T];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> a)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(x==T || !a) <span class="keyword">return</span> a;</div><div class="line">    <span class="keyword">int</span> f,flow=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span>&amp; i=cur[x];i&gt;=<span class="number">0</span>;i=e[i].next)</div><div class="line">        <span class="keyword">if</span>(d[e[i].to]==d[x]+<span class="number">1</span> &amp;&amp; (f=dfs(e[i].to,min(a,e[i].cap-e[i].flow)))&gt;<span class="number">0</span>)&#123;</div><div class="line">          e[i].flow+=f; flow+=f; e[i^<span class="number">1</span>].flow-=f; a-=f;</div><div class="line">        <span class="keyword">if</span>(!a) <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    <span class="keyword">return</span> flow;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxflow</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> flow=<span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(bfs())&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=S;i&lt;=T;i++) cur[i]=head[i];</div><div class="line">        flow+=dfs(S,INF);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> flow;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span>(head)); cnt=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) inser(S,i,<span class="number">1</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) inser(i+n,T,<span class="number">1</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</div><div class="line">         <span class="keyword">if</span>(z[i][j]&lt;=x) inser(i,j+n,<span class="number">1</span>);</div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;m,&amp;k); </div><div class="line">    S=<span class="number">0</span>; T=n+m+<span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</div><div class="line">          <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;z[i][j]);</div><div class="line">    <span class="keyword">int</span> l=<span class="number">1</span>,r=INF;</div><div class="line">    <span class="keyword">while</span>(l&lt;r)&#123;</div><div class="line">        <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>; build(mid);</div><div class="line">        <span class="keyword">if</span>(maxflow()&lt;n-k+<span class="number">1</span>) l=mid+<span class="number">1</span>;</div><div class="line">        <span class="keyword">else</span> r=mid;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,l);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题目精选 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 网络流 </tag>
            
            <tag> 二分 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「BZOJ1070」「SCOI2007」修车]]></title>
      <url>/2016/10/14/bzoj1070/</url>
      <content type="html"><![CDATA[<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><blockquote>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=1070" target="_blank" rel="external">题目传送门</a></p>
</blockquote>
<h3 id="解题报告"><a href="#解题报告" class="headerlink" title="解题报告"></a>解题报告</h3><blockquote>
<p>网络流——最小费用流。<br>好久没写了板子都快忘了。<br>将m个工人拆成n个点，点（i，j）表示让i工人在倒数第j辆车时去修连向这个点的车，那么显而易见代价为j*ti（后面的人要等）。</p>
</blockquote>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 70</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M 15</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1e9</span></div><div class="line"><span class="keyword">int</span> n,m,cnt=<span class="number">2</span>,ti[M][N],head[<span class="number">5005</span>],p[<span class="number">5005</span>],a[<span class="number">5005</span>],ans,d[<span class="number">5005</span>],S,T;</div><div class="line"><span class="keyword">bool</span> vis[<span class="number">5005</span>];</div><div class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;</div><div class="line"><span class="keyword">struct</span> edges&#123;</div><div class="line">    <span class="keyword">int</span> fr,to,cap,flow,cost,next;</div><div class="line">&#125;e[<span class="number">100005</span>];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">inser</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> c,<span class="keyword">int</span> co)</span></span>&#123;</div><div class="line">    e[cnt]=(edges)&#123;u,v,c,<span class="number">0</span>,co,head[u]&#125;;head[u]=cnt++;</div><div class="line">    e[cnt]=(edges)&#123;v,u,<span class="number">0</span>,<span class="number">0</span>,-co,head[v]&#125;;head[v]=cnt++;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">spfa</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">memset</span>(d,<span class="number">0x3f</span>,<span class="keyword">sizeof</span>(d));</div><div class="line">    q.push(S); d[S]=<span class="number">0</span>; a[S]=INF;</div><div class="line">    <span class="keyword">while</span>(!q.empty())&#123;</div><div class="line">        <span class="keyword">int</span> x=q.front(); q.pop(); vis[x]=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=e[i].next)&#123;</div><div class="line">            <span class="keyword">if</span>(d[e[i].to]&gt;d[x]+e[i].cost &amp;&amp; e[i].cap&gt;e[i].flow)&#123;</div><div class="line">                d[e[i].to]=d[x]+e[i].cost; p[e[i].to]=i; a[e[i].to]=min(a[x],e[i].cap-e[i].flow);</div><div class="line">                <span class="keyword">if</span>(!vis[e[i].to]) vis[e[i].to]=<span class="number">1</span>,q.push(e[i].to);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> d[T]&lt;INF;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">minc</span><span class="params">()</span></span>&#123;</div><div class="line">    ans+=a[T]*d[T];</div><div class="line">    <span class="keyword">int</span> u=T;</div><div class="line">    <span class="keyword">while</span>(u!=S)&#123;</div><div class="line">        e[p[u]].flow+=a[T];</div><div class="line">        e[p[u]^<span class="number">1</span>].flow-=a[T];</div><div class="line">        u=e[p[u]].fr;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;m,&amp;n);</div><div class="line">    S=<span class="number">0</span>,T=n*m*<span class="number">2</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</div><div class="line">          <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;ti[j][i]);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</div><div class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</div><div class="line">          inser((i<span class="number">-1</span>)*n+j,T,<span class="number">1</span>,<span class="number">0</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) inser(S,n*m+i,<span class="number">1</span>,<span class="number">0</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</div><div class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=n;k++)</div><div class="line">          inser(n*m+i,(j<span class="number">-1</span>)*n+k,<span class="number">1</span>,k*ti[j][i]);</div><div class="line">    <span class="keyword">while</span>(spfa()) minc();</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%.2lf\n"</span>,(<span class="keyword">double</span>)ans/n);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题目精选 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 网络流 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[博弈论一周目学习小结]]></title>
      <url>/2016/10/13/game%20theory/</url>
      <content type="html"><![CDATA[<p>博弈论研究第一周目。<br>博弈论有很多套路，一周目接触到了如下几类：<br>Nim——最基础的博弈论问题，也是博弈论的经典模型，很多问题可以转化为Nim进行求解，解决：SG函数。<br>Anti-Nim——Nim的拓展之一，即反Nim游戏（走最后一步输）。判断必胜条件为：当且仅当全部子SG小等1且局面SG为0，或局面SG&gt;0且至少一个子SG&gt;1。<br>Nimk——Nim的拓展之一，规则仅改变为可以取1-k堆，解决思路很巧妙(想出来的人脑子有天坑):将子SG写成二进制，统计每一位上各有多少1，如果每一位个数都满足mod（k+1）==0则必败，否则必胜。证明可见第一篇随笔中的链接。<br>阶梯博弈。添加了阶梯，其余和Nim相同。解决：对奇数号阶梯上的堆进行Nim游戏。<br>找规律。SG函数只能在子游戏互不影响（即独立）的情况下可以使用。此外可以考虑手动找规律（写个暴力跑一跑看看结果找找规律之类的）。<br>分类讨论。（没啥说头，恶心）<br>树上删边游戏。对于此有若干结论：对于一棵树，它等价于一棵长度为所有该树子属长度的异或和。对于环，如果为偶则可变成一个点，若为奇则可以变成一条边。如此下来将一个图可以变成一根竹子，显然可以进行Nim游戏。<br>博弈论的题总是和异或有不解之缘，所以可以和线性基结合。又由于局面之间的转化关系图，可以变成树上的问题，dp，搜索等等。<br>总之博弈论很神奇，题目很有意思，二周目见！（如果还会有二周目</p>
]]></content>
      
        <categories>
            
            <category> 学习总结 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 博弈论 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「BZOJ2281」「SDOI2011」黑白棋]]></title>
      <url>/2016/10/12/bzoj2281/</url>
      <content type="html"><![CDATA[<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><blockquote>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=2281" target="_blank" rel="external">题目传送门</a> </p>
</blockquote>
<h3 id="解题报告"><a href="#解题报告" class="headerlink" title="解题报告"></a>解题报告</h3><blockquote>
<p>博弈论—Nimk问题。 dp再搞搞。<br>很容易看出，该游戏的终态是每两个棋子都紧靠着。当一颗棋子移动，另一方与该棋子对应的那一刻可以立即追上，使得仍旧紧靠，最终棋子动弹不得，游戏结束。<br>还能看出，对于白色棋子（先手），往左走没有意义。因为黑子（后手）可以紧随其上使得两者距离不变。同理黑子只往左走。（黄学长貌似提出了反例？）<br>所以，问题可以抽象为Nim，与传统Nim只能选1堆不同，你可以选1-d堆。<br>这个拓展问题叫做Nimk问题。对于这种问题，我们可以证明：当将n堆棋子化为二进制，每一位上如果1的个数mod（k+1）==0 则为必败态。<br>详细证明，<a href="http://blog.csdn.net/weixinding/article/details/7321139" target="_blank" rel="external">大传送术！</a><br>最后只需要计算方案数。使用dp，dp[i][j]表示当前在二进制第i位上，总计用了j石头的方案。转移方程为：<br>$$ dp[i + 1][j + a * (k + 1) * bin[i]] += dp[i][j] * { n \choose a * (k + 1) } $$<br>注意组合数处理，取%等细节即可。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 题目精选 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 博弈论 </tag>
            
            <tag> 动态规划 </tag>
            
            <tag> 组合数学 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
